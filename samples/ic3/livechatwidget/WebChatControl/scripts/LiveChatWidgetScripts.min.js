/* LiveChatInitializer.min.js:start */
var __awaiter =
    (this && this.__awaiter) ||
    function (n, t, i, r) {
      return new (i || (i = Promise))(function (u, f) {
        function o(n) {
          try {
            e(r.next(n));
          } catch (t) {
            f(t);
          }
        }
        function s(n) {
          try {
            e(r['throw'](n));
          } catch (t) {
            f(t);
          }
        }
        function e(n) {
          n.done
            ? u(n.value)
            : new i(function (t) {
                t(n.value);
              }).then(o, s);
        }
        e((r = r.apply(n, t || [])).next());
      });
    },
  __generator =
    (this && this.__generator) ||
    function (n, t) {
      function o(n) {
        return function (t) {
          return s([n, t]);
        };
      }
      function s(e) {
        if (f) throw new TypeError('Generator is already executing.');
        while (r)
          try {
            if (((f = 1), u && (i = u[e[0] & 2 ? 'return' : e[0] ? 'throw' : 'next']) && !(i = i.call(u, e[1])).done))
              return i;
            ((u = 0), i) && (e = [0, i.value]);
            switch (e[0]) {
              case 0:
              case 1:
                i = e;
                break;
              case 4:
                return r.label++, { value: e[1], done: !1 };
              case 5:
                r.label++;
                u = e[1];
                e = [0];
                continue;
              case 7:
                e = r.ops.pop();
                r.trys.pop();
                continue;
              default:
                if (!((i = r.trys), (i = i.length > 0 && i[i.length - 1])) && (e[0] === 6 || e[0] === 2)) {
                  r = 0;
                  continue;
                }
                if (e[0] === 3 && (!i || (e[1] > i[0] && e[1] < i[3]))) {
                  r.label = e[1];
                  break;
                }
                if (e[0] === 6 && r.label < i[1]) {
                  r.label = i[1];
                  i = e;
                  break;
                }
                if (i && r.label < i[2]) {
                  r.label = i[2];
                  r.ops.push(e);
                  break;
                }
                i[2] && r.ops.pop();
                r.trys.pop();
                continue;
            }
            e = t.call(n, r);
          } catch (o) {
            e = [6, o];
            u = 0;
          } finally {
            f = i = 0;
          }
        if (e[0] & 5) throw e[1];
        return { value: e[0] ? e[1] : void 0, done: !0 };
      }
      var r = {
          label: 0,
          sent: function () {
            if (i[0] & 1) throw i[1];
            return i[1];
          },
          trys: [],
          ops: []
        },
        f,
        u,
        i,
        e;
      return (
        (e = { next: o(0), throw: o(1), return: o(2) }),
        typeof Symbol == 'function' &&
          (e[Symbol.iterator] = function () {
            return this;
          }),
        e
      );
    },
  Microsoft;
(function (n) {
  var t;
  (function (n) {
    var t;
    (function (n) {
      var t = (function () {
        function t() {}
        return (
          (t.isInternetConnected = function () {
            return __awaiter(this, void 0, void 0, function () {
              var t, i;
              return __generator(this, function (r) {
                switch (r.label) {
                  case 0:
                    return (
                      r.trys.push([0, 2, , 3]),
                      [4, $.get({ url: n.ScriptPaths.getInternetConnectivityTestFile(), cache: !1 })]
                    );
                  case 1:
                    return ((t = r.sent()), t === n.Constants.internetConnectionTestUrlText) ? [2, !0] : [3, 3];
                  case 2:
                    return (i = r.sent()), [3, 3];
                  case 3:
                    return [2, !1];
                }
              });
            });
          }),
          t
        );
      })();
      n.ConnectivityManager = t;
    })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
  })((t = n.Omnichannel || (n.Omnichannel = {})));
})(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {
            this.configRequestIds = [];
            this.getChatTokenRequestIds = [];
            this.getChatTranscriptRequestIds = [];
            this.sendEmailTranscriptRequestIds = [];
            this.sessionInitRequestIds = [];
            this.sessionCloseRequestIds = [];
            this.submitPostChatRequestIds = [];
            this.secondaryChannelEventRequestInfos = [];
          }
          return (
            (t.prototype.setRuntimeId = function (n) {
              this.runtimeId = n;
            }),
            (t.prototype.addConfigRequestId = function (n) {
              this.configRequestIds.push(n);
            }),
            (t.prototype.addGetChatTokenRequestId = function (n) {
              this.getChatTokenRequestIds.push(n);
            }),
            (t.prototype.addGetChatTranscriptRequestId = function (n) {
              this.getChatTranscriptRequestIds.push(n);
            }),
            (t.prototype.addSendEmailTranscriptRequestId = function (n) {
              this.sendEmailTranscriptRequestIds.push(n);
            }),
            (t.prototype.addSessionInitRequestId = function (n) {
              this.sessionInitRequestIds.push(n);
            }),
            (t.prototype.addSessionCloseRequestId = function (n) {
              this.sessionCloseRequestIds.push(n);
            }),
            (t.prototype.addSubmitPostChatRequestId = function (n) {
              this.submitPostChatRequestIds.push(n);
            }),
            (t.prototype.setWebChatVersion = function (n) {
              this.webChatVersion = n;
            }),
            (t.prototype.setIc3SdkVersion = function (n) {
              this.ic3SdkVersion = n;
            }),
            (t.prototype.setOcSdkVersion = function (n) {
              this.ocSdkVersion = n;
            }),
            (t.prototype.setWidgetState = function (n) {
              this.widgetState = n;
            }),
            (t.prototype.addSecondaryChannelEventRequestId = function (n) {
              this.secondaryChannelEventRequestInfos.push(n);
            }),
            (t.prototype.setDebugButtonDisplay = function (t) {
              var i, r;
              t === void 0 && (t = !1);
              i = n.Util.getDebugButton();
              n.Util.isNullOrUndefined(i) || ((r = this.getDebugMode(t)), (i.style.display = r ? 'flex' : 'none'));
            }),
            (t.prototype.getDebugMode = function (t) {
              var i, r, u;
              return (
                t === void 0 && (t = !1),
                (i = t ? !0 : n.ConfigurationManager.IsDebugMode),
                (r = n.Util.getDebugModeFromScript()),
                n.Util.isNullOrUndefined(r) || (i = r),
                (u = n.Util.getDebugModeFromUrl()),
                n.Util.isNullOrUndefined(u) || (i = u),
                i
              );
            }),
            (t.prototype.getDebugText = function () {
              this.debugText ||
                ((this.debugText = document.createElement('div')),
                (this.debugText.className = n.Constants.HTMLConstants.debugText),
                document.body.appendChild(this.debugText));
              var t = '';
              this.runtimeId && (t = 'Run Time Id: ' + this.runtimeId + ' \n');
              this.configRequestIds &&
                this.configRequestIds.length > 0 &&
                (t += 'Config request Id: ' + this.getChatTokenRequestIds + ' \n');
              this.getChatTokenRequestIds &&
                this.getChatTokenRequestIds.length > 0 &&
                (t += 'Chat token request Id: ' + this.getChatTokenRequestIds + ' \n');
              this.sessionInitRequestIds &&
                this.sessionInitRequestIds.length > 0 &&
                (t += 'Session init request Id: ' + this.sessionInitRequestIds + ' \n');
              this.sessionCloseRequestIds &&
                this.sessionCloseRequestIds.length > 0 &&
                (t += 'Session close request Id: ' + this.sessionCloseRequestIds + ' \n');
              this.webChatVersion && (t += 'Web Chat Version: ' + this.webChatVersion + ' \n');
              this.ocSdkVersion && (t += 'OC SDK Version: ' + this.ocSdkVersion + ' \n');
              this.debugText.innerText = t;
              this.debugButton.innerText = 'Refresh';
            }),
            (t.prototype.getDebugButton = function () {
              return (
                this.debugButton ||
                  ((this.debugButton = document.createElement('div')),
                  (this.debugButton.className = n.Constants.HTMLConstants.debugButton),
                  (this.debugButton.innerText = n.Constants.LCWDebugInfo),
                  (this.debugButton.onclick = this.getDebugText.bind(this))),
                this.debugButton
              );
            }),
            (t.prototype.addDebugButtonIfNotPresent = function (t) {
              t === void 0 && (t = !1);
              this.getDebugMode(t) &&
                (n.Util.isNullOrUndefined(document.body)
                  ? document.addEventListener(n.Constants.HTMLConstants.DOMContentLoaded, function () {
                      document.body.appendChild(this.getDebugButton());
                    })
                  : document.body.appendChild(this.getDebugButton()));
            }),
            t
          );
        })();
        n.DebugInformation = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function n() {}
          return (
            (n.PersistData = function (n, t, i) {
              var r = JSON.stringify(i);
              n.setItem(t, r);
            }),
            (n.GetData = function (n, t) {
              var i = n.getItem(t);
              return JSON.parse(i);
            }),
            (n.RemoveData = function (n, t) {
              n.removeItem(t);
            }),
            n
          );
        })();
        n.BrowserDataStore = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.PersistData = function (i, r, u, f) {
              var e = t.getDataStoreFromContext(i),
                o = t.getStoreKey(r, i),
                s = t.addTTLToData(u, f);
              n.BrowserDataStore.PersistData(e, o, s);
            }),
            (t.GetData = function (i, r) {
              var f = t.getDataStoreFromContext(i),
                e = t.getStoreKey(r, i),
                u = n.BrowserDataStore.GetData(f, e);
              return t.isDataValid(u) ? t.extractData(u) : (t.RemoveData(i, r), undefined);
            }),
            (t.RemoveData = function (i, r) {
              n.BrowserDataStore.RemoveData(t.getDataStoreFromContext(i), t.getStoreKey(r, i));
            }),
            (t.UpdateData = function (i, r, u, f) {
              var o = !1,
                s = t.getDataStoreFromContext(i),
                h = t.getStoreKey(r, i),
                c = n.BrowserDataStore.GetData(s, h),
                e;
              return (
                n.Util.isNullOrUndefined(c) ||
                  ((e = { data: u, ttl: c.ttl }),
                  n.Util.isNullOrUndefined(f) || (e = t.addTTLToData(e.data, f)),
                  n.BrowserDataStore.PersistData(s, h, e),
                  (o = !0)),
                o
              );
            }),
            (t.UpsertData = function (n, i, r, u) {
              var f = t.UpdateData(n, i, r, u);
              f === !1 && t.PersistData(n, i, r, u);
            }),
            (t.getStoreKey = function (t, i) {
              var r = '',
                u,
                f,
                e,
                o;
              return (
                i & n.DataContextType.EnvironmentContext &&
                  ((u = n.Bootstrapper.environmentVersion),
                  n.Util.isNullOrUndefined(u) || (r += u + n.Constants.WidgetDataStoreKeySeparator)),
                i & n.DataContextType.OrganizationContext &&
                  ((f = n.Bootstrapper.orgId),
                  n.Util.isNullOrUndefined(f) || (r += f + n.Constants.WidgetDataStoreKeySeparator)),
                i & n.DataContextType.WidgetContext &&
                  ((e = n.Bootstrapper.widgetId),
                  n.Util.isNullOrUndefined(e) || (r += e + n.Constants.WidgetDataStoreKeySeparator)),
                i & n.DataContextType.UserContext &&
                  ((o =
                    window[n.Constants.Microsoft][n.Constants.Omnichannel][n.Constants.LiveChatWidget].Loader
                      .initContext.portalcontactid),
                  n.Util.isNullOrUndefined(o) || (r += o + n.Constants.UserDataStoreKeySeparator)),
                r + t
              );
            }),
            (t.getDataStoreFromContext = function (t) {
              return t & n.DataContextType.UserContext && n.Util.canStoreDataInLocalStorage()
                ? localStorage
                : sessionStorage;
            }),
            (t.addTTLToData = function (t, i) {
              var r = n.Constants.InfiniteTTLForStorage;
              return (
                i === n.Constants.InfiniteTTLForStorage ||
                  n.Util.isNullOrUndefined(i) ||
                  (r = new Date().getTime() + i),
                { data: t, ttl: r }
              );
            }),
            (t.extractData = function (t) {
              return n.Util.isNullOrUndefined(t) ? undefined : t.data;
            }),
            (t.isDataValid = function (t) {
              if (n.Util.isNullOrUndefined(t) || t.ttl === n.Constants.InfiniteTTLForStorage) return !0;
              var i = new Date().getTime();
              return i < t.ttl;
            }),
            t
          );
        })();
        n.ContextSpecificDataStore = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t, i;
        (function (n) {
          n[(n.Script = 0)] = 'Script';
          n[(n.StyleSheet = 1)] = 'StyleSheet';
        })((t = n.ResourceType || (n.ResourceType = {})));
        i = (function () {
          function i(n) {
            this.counter = 0;
            this.resources = n;
          }
          return (
            (i.prototype.loadResources = function () {
              var r = this,
                t,
                u;
              n.Util.isNullOrUndefined(this.resources) ||
                this.counter >= this.resources.length ||
                ((t = !0),
                this.resources[this.counter] &&
                  this.resources[this.counter].preload &&
                  (t = this.resources[this.counter].preload()),
                t
                  ? ((u = function () {
                      r.executeCurrentCallback(t);
                      r.counter++;
                      r.loadResources();
                    }),
                    i.LoadResource(this.resources[this.counter], u))
                  : (this.executeCurrentCallback(t), this.counter++, this.loadResources()));
            }),
            (i.prototype.executeCurrentCallback = function (t) {
              if (this.resources[this.counter].callback)
                try {
                  this.resources[this.counter].callback(t);
                } catch (i) {
                  n.TelemetryClient.error({
                    Event: n.TelemetryEvent.ResourceLoadFailed,
                    ExceptionDetails: i,
                    ResourcePath: this.resources[this.counter].path
                  });
                }
            }),
            (i.CreateResource = function (i, r, u) {
              var o = null,
                c = function (t) {
                  n.TelemetryClient.error({
                    Event: n.TelemetryEvent.ResourceLoadFailed,
                    ExceptionDetails: t,
                    ResourcePath: r.path
                  });
                },
                l = function () {
                  n.TelemetryClient.debug({ Event: n.TelemetryEvent.ResourceLoaded, ResourcePath: r.path });
                  u();
                },
                e,
                f,
                s,
                h;
              switch (r.resourceType) {
                case t.Script:
                  e = document.createElement('script');
                  e.src = r.path;
                  e.type = 'text/javascript';
                  e.onload = l;
                  e.onerror = c;
                  o = e;
                  break;
                case t.StyleSheet:
                  f = document.createElement('link');
                  f.href = r.path;
                  f.rel = 'stylesheet';
                  f.type = 'text/css';
                  f.onload = l;
                  f.onerror = c;
                  o = f;
              }
              if (
                ((o.id = i),
                !n.Util.isNullOrUndefined(r.resourceMetadata) &&
                  !n.Util.isNullOrUndefined(r.resourceMetadata.dataAttributes))
              )
                for (s in r.resourceMetadata.dataAttributes)
                  r.resourceMetadata.dataAttributes.hasOwnProperty(s) &&
                    ((h = r.resourceMetadata.dataAttributes[s]), n.Util.isPrimitiveString(h) && (o.dataset[s] = h));
              return o;
            }),
            (i.LogResourceLoadEvent = function (t, i) {
              n.TelemetryClient.info({
                Event: n.TelemetryEvent.ResourceLoaded,
                ResourcePath: t.path,
                ElapsedTimeInMilliseconds: i
              });
            }),
            (i.LoadResource = function (t, r) {
              var u = t.path;
              if (
                (n.Util.isNullOrUndefined(t.resourceMetadata) ||
                  n.Util.isNullOrUndefined(t.resourceMetadata.id) ||
                  (u = t.resourceMetadata.id),
                t.forceLoad || !document.getElementById(u))
              ) {
                var e = n.Util.timer(),
                  o = function () {
                    i.LogResourceLoadEvent(t, e.milliSecondsElapsed);
                    r();
                  },
                  f = i.CreateResource(u, t, o);
                try {
                  document.getElementsByTagName('head')[0].appendChild(f);
                } catch (h) {
                  document.getElementsByTagName('body')[0].appendChild(f);
                }
              } else {
                n.TelemetryClient.debug({ Event: n.TelemetryEvent.ResourceLoaded, ResourcePath: t.path });
                try {
                  r();
                } catch (s) {
                  n.TelemetryClient.error({
                    Event: n.TelemetryEvent.ResourceLoadFailed,
                    ResourcePath: t.path,
                    ExceptionDetails: s
                  });
                }
              }
            }),
            (i.Load = function (n) {
              var t = new i(n);
              t.loadResources();
            }),
            i
          );
        })();
        n.ResourceLoader = i;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w, b, k;
        (function (n) {
          n[(n.BottomLeft = 0)] = 'BottomLeft';
          n[(n.BottomRight = 1)] = 'BottomRight';
        })((t = n.WidgetPosition || (n.WidgetPosition = {}))),
          (function (n) {
            n.Bridged = 'bridged';
            n.Unbridged = 'unbridged';
          })((i = n.DeliveryMode || (n.DeliveryMode = {}))),
          (function (n) {
            n.IE = 'IE';
            n.CHROME = 'Chrome';
            n.FIREFOX = 'Firefox';
            n.SAFARI = 'Safari';
            n.EDGE = 'Edge';
            n.EDGE_CHROMIUM = 'Edg';
            n.OPERA = 'Opera';
            n.UNKNOWN = 'Unknown';
          })((r = n.BrowserVendor || (n.BrowserVendor = {}))),
          (function (n) {
            n[(n.Chrome = 0)] = 'Chrome';
            n[(n.Firefox = 1)] = 'Firefox';
            n[(n.Ie = 2)] = 'Ie';
            n[(n.Edge = 3)] = 'Edge';
            n[(n.Safari = 4)] = 'Safari';
            n[(n.None = 5)] = 'None';
          })((u = n.Browser || (n.Browser = {}))),
          (function (n) {
            n.Desktop = 'Desktop';
            n.Mobile = 'Mobile';
            n.Tablet = 'Tablet';
          })((f = n.DeviceType || (n.DeviceType = {}))),
          (function (n) {
            n.WINDOWS = 'Windows';
            n.MACOSX = 'Mac OS X';
            n.WINDOWS_PHONE = 'Windows Phone';
            n.WINDOWS_RT = 'Windows RT';
            n.IOS = 'iOS';
            n.ANDROID = 'Android';
            n.LINUX = 'Linux';
            n.UNKNOWN = 'Unknown';
          })((e = n.OperatingSystem || (n.OperatingSystem = {}))),
          (function (n) {
            n.prod = 'prod';
            n.dogfood = 'df';
            n.int = 'int';
            n.test = 'test';
          })((o = n.EnvironmentVersion || (n.EnvironmentVersion = {}))),
          (function (n) {
            n[(n.None = 0)] = 'None';
            n[(n.UserContext = 1)] = 'UserContext';
            n[(n.WidgetContext = 2)] = 'WidgetContext';
            n[(n.OrganizationContext = 4)] = 'OrganizationContext';
            n[(n.EnvironmentContext = 8)] = 'EnvironmentContext';
          })((s = n.DataContextType || (n.DataContextType = {}))),
          (function (n) {
            n.ConversationData = 'conversationData';
            n.ConfigData = 'configData';
            n.SystemConfigurationData = 'SystemConfigurationData';
            n.PreChatResponse = 'PreChatResponseData';
          })((h = n.WidgetDataKeys || (n.WidgetDataKeys = {}))),
          (function (n) {
            n[(n.SessionInitNotStarted = 0)] = 'SessionInitNotStarted';
            n[(n.SessionInitStarted = 1)] = 'SessionInitStarted';
            n[(n.SessionInitComplete = 2)] = 'SessionInitComplete';
          })((c = n.SessionInitState || (n.SessionInitState = {}))),
          (function (n) {
            n[(n.Voice = 19237e4)] = 'Voice';
            n[(n.Video = 19238e4)] = 'Video';
            n[(n.Cobrowse = 19239e4)] = 'Cobrowse';
          })((l = n.SecondaryChannelType || (n.SecondaryChannelType = {}))),
          (function (n) {
            n[(n.Minimized = 0)] = 'Minimized';
            n[(n.Maximized = 1)] = 'Maximized';
            n[(n.Closed = 2)] = 'Closed';
          })((a = n.WidgetState || (n.WidgetState = {}))),
          (function (n) {
            n[(n.Prechat = 0)] = 'Prechat';
            n[(n.Postchat = 1)] = 'Postchat';
          })((v = n.SurveyType || (n.SurveyType = {}))),
          (function (n) {
            n[(n.ConfigRequest = 0)] = 'ConfigRequest';
            n[(n.GetChatTokenRequest = 1)] = 'GetChatTokenRequest';
            n[(n.GetChatTranscriptRequest = 2)] = 'GetChatTranscriptRequest';
            n[(n.SendEmailTranscriptRequest = 3)] = 'SendEmailTranscriptRequest';
            n[(n.SessionInitRequest = 4)] = 'SessionInitRequest';
            n[(n.SessionCloseRequest = 5)] = 'SessionCloseRequest';
            n[(n.SubmitPostChatRequest = 6)] = 'SubmitPostChatRequest';
            n[(n.SecondaryChannelEventRequest = 7)] = 'SecondaryChannelEventRequest';
          })((y = n.RequestType || (n.RequestType = {}))),
          (function (n) {
            n[(n.Typing = 0)] = 'Typing';
            n[(n.ClearTyping = 1)] = 'ClearTyping';
          })((p = n.BotMessageType || (n.BotMessageType = {}))),
          (function (n) {
            n[(n.WidgetUseOutsideOperatingHour = 705)] = 'WidgetUseOutsideOperatingHour';
          })((w = n.OmnichannelErrorCodes || (n.OmnichannelErrorCodes = {}))),
          (function (n) {
            n.NoCalling = 'NoCalling';
            n.VideoAndVoiceCalling = 'VideoAndVoiceCalling';
            n.VoiceOnly = 'VoiceOnly';
          })((b = n.CallingOptions || (n.CallingOptions = {}))),
          (function (n) {
            n[(n.NoCalling = 19235e4)] = 'NoCalling';
            n[(n.VideoAndVoiceCalling = 192350001)] = 'VideoAndVoiceCalling';
            n[(n.VoiceOnly = 192350002)] = 'VoiceOnly';
          })((k = n.CallingOptionsOptionSetNumber || (n.CallingOptionsOptionSetNumber = {})));
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var k = (function () {
            function n() {}
            return n;
          })(),
          t,
          i,
          r,
          u,
          f,
          e,
          o,
          s,
          h,
          c,
          l,
          a,
          v,
          y,
          p,
          w,
          b;
        n.LiveChatConfig = k;
        t = (function () {
          function n() {}
          return n;
        })();
        n.LiveChatContext = t;
        i = (function () {
          function n(n, t) {
            this.OptionSetSelectedValue = n;
            this.OptionSetConfigValue = t;
          }
          return n;
        })();
        n.WidgetOptionSetMapping = i;
        r = (function () {
          function n(n, t) {
            this.CallingOptionSetSelectedValue = n;
            this.CallingOptionSetConfigValue = t;
          }
          return n;
        })();
        n.WidgetCallingOptionSetMapping = r;
        u = (function () {
          function t() {
            this.sessionInitState = n.SessionInitState.SessionInitNotStarted;
          }
          return t;
        })();
        n.Conversation = u;
        f = (function () {
          function n() {}
          return n;
        })();
        n.Token = f;
        e = (function () {
          function n() {}
          return n;
        })();
        n.FetchChatTokenResponse = e;
        o = (function () {
          function n() {}
          return n;
        })();
        n.FetchChatTranscriptResponse = o;
        s = (function () {
          function t() {}
          return (
            Object.defineProperty(t.prototype, 'portalcontactid', {
              get: function () {
                return this.fetchPortalContactId();
              },
              enumerable: !0,
              configurable: !0
            }),
            (t.prototype.toJSON = function () {
              return n.Util.toJSONWithGetters(this);
            }),
            t
          );
        })();
        n.InitContext = s;
        h = (function () {
          function n() {}
          return n;
        })();
        n.EmailRequestBody = h;
        c = (function () {
          function n() {}
          return n;
        })();
        n.Location = c;
        l = (function () {
          function n() {}
          return n;
        })();
        n.LiveChatWidgetLocation = l;
        a = (function () {
          function n() {}
          return (n.LCWReadyEvent = 'lcw:ready'), (n.LCWErrorEvent = 'lcw:error'), n;
        })();
        n.LCWEvents = a;
        v = (function () {
          function t() {}
          return (
            (t.getBotMessage = function (t) {
              switch (t) {
                case n.BotMessageType.Typing:
                  return { isTyping: !0 };
                default:
                  return null;
              }
            }),
            t
          );
        })();
        n.BotMessageFactory = v;
        y = (function () {
          function n() {}
          return n;
        })();
        n.DataMaskingRule = y;
        p = (function () {
          function n() {}
          return n;
        })();
        n.ProactiveChatNotificationConfig = p;
        w = (function () {
          function n() {}
          return n;
        })();
        n.SecondaryChannelEventBody = w;
        b = (function () {
          function n() {}
          return (n.authTokenRequest = 'authTokenRequest'), (n.authTokenResponse = 'authTokenResponse'), n;
        })();
        n.IframeMessages = b;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var u = (function () {
            function t() {}
            return (
              (t.LiveChatScriptId = 'Microsoft_Omnichannel_LCWidget'),
              (t.EnableTelemetryAttributeName = 'data-enable-telemetry'),
              (t.AppIdAttributeName = 'data-app-id'),
              (t.OrgIdAttributeName = 'data-org-id'),
              (t.OrgUrlAttributeName = 'data-org-url'),
              (t.HostNameAttributeName = 'hostname'),
              (t.EnvironmentVersionAttributeName = 'data-lcw-version'),
              (t.LiveChatWidgetHideChatButton = 'data-hide-chat-button'),
              (t.RenderOnMobileDevice = 'data-render-mobile'),
              (t.DebugModeAttributeName = 'data-lcw-debug'),
              (t.DefaultFileAttachmentName = 'Untitled.txt'),
              (t.CustomerDialogColor = '#E8E8E8'),
              (t.CustomerFontColor = 'black'),
              (t.AgentDialogColor = '#2266E3'),
              (t.AgentFontColor = 'white'),
              (t.ChannelId = 'lcw'),
              (t.LiveChatWidget = 'LiveChatWidget'),
              (t.TelemetryPrefix = 'LCW'),
              (t.LocalStorageTestKey = 'Microsoft.Omnichannel.LiveChatWidget.LocalStorageTestKey'),
              (t.UserDataStoreKeySeparator = '_'),
              (t.WidgetDataStoreKeySeparator = '_'),
              (t.InfiniteTTLForStorage = -1),
              (t.ScriptUnminifiedExtension = '.js'),
              (t.JsonUnminifiedExtension = '.json'),
              (t.ScriptMinifiedExtension = '.min.js'),
              (t.CssUnminifiedExtension = '.css'),
              (t.CssMinifiedExtension = '.min.css'),
              (t.DefaultLocale = 'en-us'),
              (t.DefaultLocaleLCID = '1033'),
              (t.LocaleFile = 'locales/'),
              (t.UserMessageTag = 'user'),
              (t.SystemMessageTag = 'system'),
              (t.AdaptiveCardType = 'adaptivecard'),
              (t.InternalMode = 'internal'),
              (t.Microsoft = 'Microsoft'),
              (t.Omnichannel = 'Omnichannel'),
              (t.BotFramework = 'BotFramework'),
              (t.WebChat = 'WebChat'),
              (t.React = 'React'),
              (t.LCWDebugInfo = 'LCW Debug Info'),
              (t.Loader = 'Loader'),
              (t.Dynamic365 = 'Dynamic365'),
              (t.Undefined = 'undefined'),
              (t.Portal = 'Portal'),
              (t.ContactId = 'contactId'),
              (t.User = 'User'),
              (t.String = 'string'),
              (t.ChatMessagesJson = 'chatMessagesJson'),
              (t.DotNet = '.NET'),
              (t.IC3Adapter = 'IC3Adapter'),
              (t.Markdown = 'markdown'),
              (t.MarkdownIt = 'markdownit'),
              (t.MarkdownItForInline = 'markdownitForInline'),
              (t.Zero = 'zero'),
              (t.ProactiveChatInviteTimeout = 6e4),
              (t.GuidPattern = 'xx-x-4m-ym-xxx'),
              (t.DataMaskingMiddlewareId = 'DataMasking'),
              (t.HTMLTextMiddlewareId = 'HTMLText'),
              (t.AttachmentUploadValidatorMiddlewareId = 'PostActivityValidator'),
              (t.WebChatDailyBuildFlag = 'daily'),
              (t.WebChatLocalBuildFlag = 'local'),
              (t.Meta = 'meta'),
              (t.Viewport = 'viewport'),
              (t.ScaleFordevice = 'width=device-width, initial-scale=1'),
              (t.WebChatIEPolyfillsBaseURL = 'https://polyfill.io/v3/polyfill.min.js'),
              (t.WebChatIEPolyfillsFeatures = [
                'Array.prototype.find',
                'Array.prototype.findIndex',
                'Element.prototype.append',
                'String.prototype.includes',
                'Element.prototype.closest',
                'Event'
              ]),
              (t.Target = 'target'),
              (t.Blank = '_blank'),
              (t.TargetRelationship = 'rel'),
              (t.TargetRelationshipAttributes = 'noopener noreferrer'),
              (t.CustomerDisplayName = 'Customer'),
              (t.DefaultUserId = 'teamsvisitor'),
              (t.CloseCalling = 'closeCalling'),
              (t.SystemConfigExpiryTimeForStorage = 9e5),
              (t.supportedLocales = [
                'ar-sa',
                'bg-bg',
                'ca-es',
                'cs-cz',
                'da-dk',
                'de-de',
                'el-gr',
                'en-us',
                'es-es',
                'et-ee',
                'eu-es',
                'fi-fi',
                'fr-fr',
                'gl-es',
                'he-il',
                'hi-in',
                'hr-hr',
                'hu-hu',
                'id-id',
                'it-it',
                'ja-jp',
                'kk-kz',
                'ko-kr',
                'lt-lt',
                'lv-lv',
                'ms-my',
                'nb-no',
                'nl-nl',
                'pl-pl',
                'pt-br',
                'pt-pt',
                'ro-ro',
                'ru-ru',
                'sk-sk',
                'sl-si',
                'sr-cyrl-cs',
                'sr-latn-cs',
                'sv-se',
                'th-th',
                'tr-tr',
                'uk-ua',
                'vi-vn',
                'zh-cn',
                'zh-hk',
                'zh-tw'
              ]),
              (t.OptionSetMapping = [
                new n.WidgetOptionSetMapping('19236001', '#BF0900'),
                new n.WidgetOptionSetMapping('192360017', '#00818A'),
                new n.WidgetOptionSetMapping('19236002', '#315FA2'),
                new n.WidgetOptionSetMapping('19236003', '#358717'),
                new n.WidgetOptionSetMapping('19236004', '#000000'),
                new n.WidgetOptionSetMapping('192350001', '#D24204'),
                new n.WidgetOptionSetMapping('192350002', '#AD5889'),
                new n.WidgetOptionSetMapping('192350003', '#767676'),
                new n.WidgetOptionSetMapping('192350004', '#6A1E7A'),
                new n.WidgetOptionSetMapping('192350005', '#927200'),
                new n.WidgetOptionSetMapping('192350006', '#A42B1A'),
                new n.WidgetOptionSetMapping('192350007', '#691B88'),
                new n.WidgetOptionSetMapping('1025', 'ar-sa'),
                new n.WidgetOptionSetMapping('1026', 'bg-bg'),
                new n.WidgetOptionSetMapping('1027', 'ca-es'),
                new n.WidgetOptionSetMapping('1029', 'cs-cz'),
                new n.WidgetOptionSetMapping('1030', 'da-dk'),
                new n.WidgetOptionSetMapping('1031', 'de-de'),
                new n.WidgetOptionSetMapping('1032', 'el-gr'),
                new n.WidgetOptionSetMapping('1033', 'en-us'),
                new n.WidgetOptionSetMapping('3082', 'es-es'),
                new n.WidgetOptionSetMapping('1061', 'et-ee'),
                new n.WidgetOptionSetMapping('1069', 'eu-es'),
                new n.WidgetOptionSetMapping('1035', 'fi-fi'),
                new n.WidgetOptionSetMapping('1036', 'fr-fr'),
                new n.WidgetOptionSetMapping('1110', 'gl-es'),
                new n.WidgetOptionSetMapping('1037', 'he-il'),
                new n.WidgetOptionSetMapping('1081', 'hi-in'),
                new n.WidgetOptionSetMapping('1050', 'hr-hr'),
                new n.WidgetOptionSetMapping('1038', 'hu-hu'),
                new n.WidgetOptionSetMapping('1057', 'id-id'),
                new n.WidgetOptionSetMapping('1040', 'it-it'),
                new n.WidgetOptionSetMapping('1041', 'ja-jp'),
                new n.WidgetOptionSetMapping('1087', 'kk-kz'),
                new n.WidgetOptionSetMapping('1042', 'ko-kr'),
                new n.WidgetOptionSetMapping('1063', 'lt-lt'),
                new n.WidgetOptionSetMapping('1062', 'lv-lv'),
                new n.WidgetOptionSetMapping('1086', 'ms-my'),
                new n.WidgetOptionSetMapping('1044', 'nb-no'),
                new n.WidgetOptionSetMapping('1043', 'nl-nl'),
                new n.WidgetOptionSetMapping('1045', 'pl-pl'),
                new n.WidgetOptionSetMapping('1046', 'pt-br'),
                new n.WidgetOptionSetMapping('2070', 'pt-pt'),
                new n.WidgetOptionSetMapping('1048', 'ro-ro'),
                new n.WidgetOptionSetMapping('1049', 'ru-ru'),
                new n.WidgetOptionSetMapping('1051', 'sk-sk'),
                new n.WidgetOptionSetMapping('1060', 'sl-si'),
                new n.WidgetOptionSetMapping('3098', 'sr-cyrl-cs'),
                new n.WidgetOptionSetMapping('2074', 'sr-latn-cs'),
                new n.WidgetOptionSetMapping('1053', 'sv-se'),
                new n.WidgetOptionSetMapping('1054', 'th-th'),
                new n.WidgetOptionSetMapping('1055', 'tr-tr'),
                new n.WidgetOptionSetMapping('1058', 'uk-ua'),
                new n.WidgetOptionSetMapping('1066', 'vi-vn'),
                new n.WidgetOptionSetMapping('2052', 'zh-cn'),
                new n.WidgetOptionSetMapping('3076', 'zh-hk'),
                new n.WidgetOptionSetMapping('1028', 'zh-tw'),
                new n.WidgetOptionSetMapping('192236011', 'BottomLeft'),
                new n.WidgetOptionSetMapping('192236010', 'BottomRight')
              ]),
              (t.CallingOptionSetMapping = [
                new n.WidgetCallingOptionSetMapping('192350000', 'NoCalling'),
                new n.WidgetCallingOptionSetMapping('192350001', 'VideoAndVoiceCalling'),
                new n.WidgetCallingOptionSetMapping('192350002', 'VoiceOnly')
              ]),
              (t.MessageTypes =
                ((f = (function () {
                  function n() {}
                  return n;
                })()),
                (f.USER = 'UserMessage'),
                (f.SWIFT = 'SwiftCard'),
                (f.SYSTEM = 'SystemMessage'),
                (f.WELCOME = 'Welcome'),
                (f.TRANSLATE = 'Translate'),
                (f.IMAGE = 'LwcImage'),
                (f.FILE = 'LwcFile'),
                (f.ADAPTIVECARD = 'card'),
                f)),
              (t.VisibilityEventTypes =
                ((s = (function () {
                  function n() {}
                  return n;
                })()),
                (s.Minimize = 'collapse'),
                (s.Close = 'hide'),
                (s.Maximize = 'expand'),
                (s.Show = 'show'),
                s)),
              (t.KeyCodes =
                ((r = (function () {
                  function n() {}
                  return n;
                })()),
                (r.KEY_TAB = 9),
                (r.KEY_ESC = 27),
                (r.KEY_ENTER = 13),
                (r.KEY_SPACE = 32),
                (r.KEY_ARROW_LEFT = 37),
                (r.KEY_ARROW_RIGHT = 39),
                (r.KEY_SLASH = 191),
                (r.KEY_A = 65),
                (r.KEY_S = 83),
                (r.KEY_D = 68),
                (r.KEY_U = 85),
                (r.KEY_C = 67),
                (r.KEY_M = 77),
                (r.KEY_O = 79),
                (r.KEY_F = 70),
                r)),
              (t.ChatButtonInitStyle =
                ((u = (function () {
                  function n() {}
                  return n;
                })()),
                (u.leftString = 'left'),
                (u.rightString = 'right'),
                (u.position = 'fixed'),
                (u.bottomPosition = '0px'),
                (u.leftPosition = '0px'),
                (u.rightPosition = '0px'),
                (u.bottomLeftPosition = 'BottomLeft'),
                (u.bottomRightPosition = 'BottomRight'),
                (u.cursor = 'pointer'),
                u)),
              (t.HTMLConstants =
                ((i = (function () {
                  function n() {}
                  return n;
                })()),
                (i.div = 'div'),
                (i.body = 'body'),
                (i.debugText = 'oclcw-debug-text'),
                (i.debugButton = 'oclcw-debug-button'),
                (i.DOMContentLoaded = 'DOMContentLoaded'),
                (i.CustomEvent = 'CustomEvent'),
                (i.arialiveRegion = 'oclcw-arialive-region'),
                (i.visuallyHidden = 'oclcw-visually-hidden'),
                (i.ariaLive = 'aria-live'),
                (i.assertive = 'assertive'),
                (i.role = 'role'),
                (i.alert = 'alert'),
                (i.error = 'error'),
                (i.chat = 'chat'),
                (i.none = 'none'),
                (i.block = 'block'),
                (i.star = 'star'),
                i)),
              (t.IFrameConstants =
                ((e = (function () {
                  function n() {}
                  return n;
                })()),
                (e.defaultWidth = 360),
                (e.defaultHeight = 560),
                (e.sidePosition = 20),
                (e.bottomPosition = 20),
                (e.frameEdgeBuffer = 5),
                e)),
              (t.AttachmentIconStyle =
                ((o = (function () {
                  function n() {}
                  return n;
                })()),
                (o.iconSize = 12),
                (o.defaultPadding = '0 0 0 10px'),
                (o.imagePadding = '2px 0 2px 10px'),
                (o.RTLDefaultPadding = '0 10px 0 0'),
                (o.RTLImagePadding = '2px 10px 2px 0'),
                o)),
              (t.supportedAdaptiveCardContentTypes = [
                'application/vnd.microsoft.card.adaptive',
                'application/vnd.microsoft.card.audio',
                'application/vnd.microsoft.card.hero',
                'application/vnd.microsoft.card.receipt',
                'application/vnd.microsoft.card.thumbnail',
                'application/vnd.microsoft.card.signin'
              ]),
              (t.internetConnectionTestUrl = 'public/connecttest.txt'),
              (t.internetConnectionTestUrlText = 'Omnichannel Connect Test'),
              t
            );
            var f, s, r, u, i, e, o;
          })(),
          t,
          i,
          r;
        n.Constants = u;
        t = (function () {
          function n() {}
          return (
            (n.DefaultButtonsMarginTop = '21px'),
            (n.ErrorConditionButtonsMarginTop = '1px'),
            (n.EnabledSendButtonBackgroundColor = '#0078D4'),
            (n.EnabledSendButtonTextColor = '#FFFFFF'),
            (n.DisabledSendButtonBackgroundColor = '#F3F2F1'),
            (n.DisabledSendButtonTextColor = '#A19F9D'),
            (n.ErrorConditionDefaultColor = '#A4262C'),
            (n.DefaultTextAreaBorderColor = '#8A8886'),
            (n.ChatTranscriptDownloadFile = 'ChatTranscripts.html'),
            (n.ChatTranscriptsBodyColor = '#F5F5F5'),
            (n.TranscriptMessageEmojiMessageType = 'http://schema.skype.com/emoji'),
            (n.EmailRegex =
              '(?:[a-zA-Z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&\'*+/=?^_`{|}~-]+)*|"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])'),
            (n.DummyDomains =
              '^[0 - 9p{ L }][0 - 9p{ L }-.]{ 1, 61 }[0 - 9p{ L }].[0 - 9p{ L }][p{ L } -]* [0 - 9p{ L }] + $'),
            (n.RegExForBaseUrl = /.*\/\/[^\/]+\//),
            (n.Giu = 'giu'),
            n
          );
        })();
        n.TranscriptConstants = t;
        i = (function () {
          function n() {}
          return (n.UnknownFileType = 'application/octet-stream'), n;
        })();
        n.MimeTypes = i;
        r = (function () {
          function n() {}
          return (n.LTR = 'ltr'), (n.RTL = 'rtl'), n;
        })();
        n.TextDirection = r;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.selectedLogLevels = function (t) {
              var i = [];
              return (
                t.forEach(function (t) {
                  i.push(n.LogLevel[t.toUpperCase()]);
                }),
                i
              );
            }),
            (t.newGuid = function () {
              for (var r, u = n.Constants.GuidPattern, t = '', i = 0; i < u.length; i++) {
                r = Math.floor(Math.random() * Date.now());
                switch (u[i]) {
                  case 'x':
                    t += r.toString(16).substring(0, 4);
                    break;
                  case 'm':
                    t += r.toString(16).substring(0, 3);
                    break;
                  case 'y':
                    t += ((r & 3) | 8).toString(16);
                    break;
                  default:
                    t += u[i];
                }
              }
              return t;
            }),
            (t.isNullOrEmptyString = function (n) {
              return t.isNullOrUndefined(n) || n === '';
            }),
            (t.isNullOrUndefinedOrEmptyArray = function (n) {
              return t.isNullOrUndefined(n) || n.length === 0;
            }),
            (t.isNullOrUndefined = function (n) {
              return n === null || n === undefined;
            }),
            (t.isPrimitiveString = function (n) {
              return typeof n == 'string';
            }),
            (t.getCurrentUrl = function () {
              return window.location.href;
            }),
            (t.getCurrentHost = function () {
              return window.location.hostname;
            }),
            (t.getUtcDateString = function (n, t, i) {
              var r = new Date(n.getTime() + n.getTimezoneOffset() * 6e4);
              return t ? (i ? r.toLocaleDateString(t, i) : r.toLocaleDateString(t)) : r.toLocaleDateString();
            }),
            (t.getBaseUrl = function (n) {
              var i = /.*\/\/[^\/]+\//.exec(n);
              if (!t.isNullOrUndefined(i)) return i[0];
            }),
            (t.isRelativeUrl = function (n) {
              return !(!t.isNullOrEmptyString(n) && n.indexOf('://') >= 0);
            }),
            (t.getDirectoryPathFromUrl = function (n) {
              var t = '',
                i = n.lastIndexOf('/');
              return i >= 0 && (t = n.substring(0, i + 1)), t;
            }),
            (t.capitalizeString = function (n) {
              if (!t.isNullOrUndefined(n) && n !== '')
                return n.replace(/^\w/, function (n) {
                  return n.toUpperCase();
                });
            }),
            (t.isLoaderLoaded = function () {
              return t.isNullOrUndefined(
                window[n.Constants.Microsoft][n.Constants.Omnichannel][n.Constants.LiveChatWidget][n.Constants.Loader]
              )
                ? !1
                : !0;
            }),
            (t.timer = function () {
              var n = new Date().getTime();
              return {
                get milliSecondsElapsed() {
                  return new Date().getTime() - n;
                }
              };
            }),
            (t.toJSONWithGetters = function (n) {
              var r = {},
                t,
                i;
              for (t in n)
                (i = n[t]),
                  i && typeof i == 'object' ? (r[t] = JSON.parse(JSON.stringify(n[t]))) : i !== undefined && (r[t] = i);
              return r;
            }),
            (t.canStoreDataInLocalStorage = function () {
              var t = n.Constants.LocalStorageTestKey;
              try {
                return localStorage.setItem(t, ''), localStorage.removeItem(t), !0;
              } catch (i) {
                return !1;
              }
            }),
            (t.transformLiveChatWidgetLocation = function (t) {
              var i = new n.LiveChatWidgetLocation();
              return (i.name = t.msdyn_name), (i.location = t.msdyn_domainvalue), i;
            }),
            (t.transformLiveChatWidgetLocations = function (n) {
              var r, i;
              if (!t.isNullOrUndefined(n))
                for (r = new Array(n.length), i = 0; i < n.length; i++) r[i] = t.transformLiveChatWidgetLocation(n[i]);
              return r;
            }),
            (t.getDebugModeFromUrl = function () {
              var u = window.location.search.substring(1),
                i,
                n,
                r;
              if (!t.isNullOrUndefined(u))
                for (i = u.split('&'), n = 0; n < i.length; n++)
                  if (((r = i[n].split('=')), r[0].toLowerCase() === 'debug')) return r[1].toLowerCase() === 'true';
            }),
            (t.getDebugModeFromScript = function () {
              var i = document.querySelector('script#' + n.Constants.LiveChatScriptId),
                t = i.getAttribute(n.Constants.DebugModeAttributeName);
              if (t && t.trim().length !== 0) return t.trim().toLowerCase() === 'true';
            }),
            (t.getDebugButton = function () {
              var t = document.getElementsByClassName(n.Constants.HTMLConstants.debugButton);
              if (t && t[0]) return t[0];
            }),
            (t.getAuthTokenMethodFromString = function (i, r) {
              return (
                r === void 0 && (r = !1),
                __awaiter(this, void 0, void 0, function () {
                  var u, f, o, e, h, c, s, l;
                  return __generator(this, function (a) {
                    switch (a.label) {
                      case 0:
                        if (!i) return [3, 3];
                        for (u = window, f = i.split('.'), o = 0; o < f.length - 1; o++)
                          if (((u = u[f[o]]), t.isNullOrUndefined(u))) break;
                        return u && ((e = u[f[f.length - 1]]), e)
                          ? [2, e]
                          : r && window.parent
                          ? ((c = new Promise(function (n, t) {
                              h = n;
                              setTimeout(function () {
                                return t('Failed to find method in parent window');
                              }, 1e4);
                            }).catch(function (n) {
                              return console.warn(n);
                            })),
                            (s = function (t) {
                              t.data &&
                                t.data.messageName == n.IframeMessages.authTokenResponse &&
                                ((e = function (n) {
                                  n(t.data.authToken);
                                }),
                                h());
                            }),
                            window.addEventListener('message', s, !1),
                            (l = { messageName: n.IframeMessages.authTokenRequest, functionFullName: i }),
                            window.parent.postMessage(l, '*'),
                            [4, c])
                          : [3, 2];
                      case 1:
                        a.sent();
                        window.removeEventListener('message', s, !1);
                        a.label = 2;
                      case 2:
                        return [2, e];
                      case 3:
                        return [2];
                    }
                  });
                })
              );
            }),
            (t.createCustomEvent = function (i, r) {
              var f = t.isNullOrUndefined(r) ? undefined : { detail: r },
                u = null;
              try {
                u = new CustomEvent(i, f);
              } catch (e) {
                u = document.createEvent(n.Constants.HTMLConstants.CustomEvent);
                u.initCustomEvent(i, !0, !0, f);
              }
              return u;
            }),
            (t.raiseCustomEvent = function (n, i) {
              var r = t.createCustomEvent(n, i);
              window.parent && window.parent.postMessage({ messageName: n, payload: i }, '*');
              try {
                window.dispatchEvent(r);
              } catch (u) {
                console.error('Failed to raise custom event: ', u);
              }
            }),
            (t.getCssResources = function () {
              return [{ path: n.ScriptPaths.LiveChatWidgetAllStylePath, resourceType: n.ResourceType.StyleSheet }];
            }),
            (t.getLibResources = function () {
              return [{ path: n.ScriptPaths.LiveChatWidgetLibsPath, resourceType: n.ResourceType.Script }];
            }),
            (t.setAriaLiveAlert = function (i) {
              var r = document.getElementById(n.Constants.HTMLConstants.arialiveRegion);
              r ||
                ((r = document.createElement('div')),
                (r.id = n.Constants.HTMLConstants.arialiveRegion),
                (r.className = n.Constants.HTMLConstants.visuallyHidden),
                r.setAttribute(n.Constants.HTMLConstants.ariaLive, n.Constants.HTMLConstants.assertive),
                r.setAttribute(n.Constants.HTMLConstants.role, n.Constants.HTMLConstants.alert),
                document.body.appendChild(r));
              t.isNullOrEmptyString(i) && (i = '');
              r.innerText = i;
            }),
            (t.getLocaleDirection = function (t) {
              return n.LocaleConstants.RTL_LOCALES.indexOf(t) === -1 ? n.TextDirection.LTR : n.TextDirection.RTL;
            }),
            (t.isMaskingforCustomer = function (n) {
              return t.isNullOrUndefined(n) ||
                Object.keys(n).length == 0 ||
                t.isNullOrUndefined(n.dataMaskingRules) ||
                Object.keys(n.dataMaskingRules).length == 0
                ? !1
                : !t.isNullOrUndefined(n.setting) && !t.isNullOrUndefined(n.setting.msdyn_maskforcustomer)
                ? n.setting.msdyn_maskforcustomer
                : !0;
            }),
            t
          );
        })();
        n.Util = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.scriptPathWithValidExtension = function (t) {
              var i = t;
              return (
                !t.endsWith(n.Constants.ScriptMinifiedExtension) &&
                  t.endsWith(n.Constants.ScriptUnminifiedExtension) &&
                  (i =
                    t.substring(0, t.length - n.Constants.ScriptUnminifiedExtension.length) +
                    n.Constants.ScriptMinifiedExtension),
                i
              );
            }),
            (t.cssPathWithValidExtension = function (t) {
              var i = t;
              return (
                !t.endsWith(n.Constants.CssMinifiedExtension) &&
                  t.endsWith(n.Constants.CssUnminifiedExtension) &&
                  (i =
                    t.substring(0, t.length - n.Constants.CssUnminifiedExtension.length) +
                    n.Constants.CssMinifiedExtension),
                i
              );
            }),
            (t.LocalizationFilePath = function (n) {
              return t.addScriptRoot(t.LocalizationJsFolder + n + t.JavascriptSuffix);
            }),
            Object.defineProperty(t, 'ScriptRootPath', {
              set: function (n) {
                t.scriptRootPath = n.trim();
                t.styleRootPath = t.scriptRootPath.replace('scripts/', 'styles/');
                t.configRootPath = t.scriptRootPath.replace('scripts/', 'configs/');
                t.libRootPath = t.scriptRootPath.replace('scripts/', 'lib/');
                t.imagesRootPath = t.scriptRootPath.replace('scripts/', 'images/');
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'LiveChatWidgetConfigPath', {
              get: function () {
                return t.addConfigRoot(
                  n.Bootstrapper.environmentVersion.toLowerCase() + n.Constants.JsonUnminifiedExtension
                );
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'LiveChatWidgetClientSdkPath', {
              get: function () {
                return t.addScriptRoot(t.scriptPathWithValidExtension(t.LiveChatWidgetClientSdkScript));
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'LiveChatWidgetAllStylePath', {
              get: function () {
                return this.addStyleRoot(t.cssPathWithValidExtension(t.LiveChatWidgetAllStyle));
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'JQueryLibraryPath', {
              get: function () {
                return this.addLibRoot(t.JqueryLibraryFile);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'CallingSDKPath', {
              get: function () {
                return this.addLibRoot(t.CallingSDKFile);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'SpoolSDKPath', {
              get: function () {
                return this.addLibRoot(t.SpoolSDKFile);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'BluebirdLibraryPath', {
              get: function () {
                return this.addLibRoot(t.BluebirdLibraryFile);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'Purify', {
              get: function () {
                return this.addLibRoot(t.PurifyLibraryFile);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'LiveChatWidgetLibsPath', {
              get: function () {
                return this.addLibRoot(t.LiveChatWidgetLibsFile);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'OCSDKPath', {
              get: function () {
                return this.OCSDKPathTemplate;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'SimpleUpdateIn', {
              get: function () {
                return this.SimpleUpdateInPath;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'WebChatPath', {
              get: function () {
                return this.WebChatPathTemplate;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'WebChatDailyPath', {
              get: function () {
                return this.WebChatPathDailyBuild;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'WebChatLocalPath', {
              get: function () {
                return this.WebChatPathLocalBuild;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'WebChatIC3AdapterPath', {
              get: function () {
                return this.WebChatIC3AdapterTemplate;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'IC3ClientPath', {
              get: function () {
                return this.IC3ClientTemplate;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'LoadingImagePath', {
              get: function () {
                return this.addImagesRoot(t.LoadingImageFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'ErrorImagePath', {
              get: function () {
                return this.addImagesRoot(t.ErrorImageFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'CloseButtonPath', {
              get: function () {
                return this.addImagesRoot(t.CloseButtonFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'MinimizeChatButtonPath', {
              get: function () {
                return this.addImagesRoot(t.MinimizeChatButtonFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'CallRejectButtonPath', {
              get: function () {
                return this.addImagesRoot(t.CallRejectButtonFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'CallAcceptButtonPath', {
              get: function () {
                return this.addImagesRoot(t.CallAcceptButtonFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'VideoCallAcceptButtonPath', {
              get: function () {
                return this.addImagesRoot(t.VideoCallAcceptButtonFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'VoiceOnButtonPath', {
              get: function () {
                return this.addImagesRoot(t.VoiceOnButtonFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'VoiceOffButtonPath', {
              get: function () {
                return this.addImagesRoot(t.VoiceOffButtonFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'VideoCallOnButtonPath', {
              get: function () {
                return this.addImagesRoot(t.VideoCallOnButtonFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'VideoCallOffButtonPath', {
              get: function () {
                return this.addImagesRoot(t.VideoCallOffButtonFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'TranscriptDownloadIconPath', {
              get: function () {
                return this.addImagesRoot(t.TranscriptDownloadIconFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'ErrorNotificationPath', {
              get: function () {
                return this.addImagesRoot(t.ErrorNotificationFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'TranscriptEmailIconPath', {
              get: function () {
                return this.addImagesRoot(t.TranscriptEmailIconFileName);
              },
              enumerable: !0,
              configurable: !0
            }),
            (t.getInternetConnectivityTestFile = function () {
              return t.scriptRootPath + '../' + n.Constants.internetConnectionTestUrl;
            }),
            (t.addScriptRoot = function (n) {
              if (t.scriptRootPath) return t.scriptRootPath + n;
            }),
            (t.addStyleRoot = function (n) {
              if (t.styleRootPath) return t.styleRootPath + n;
            }),
            (t.addConfigRoot = function (n) {
              if (t.configRootPath) return t.configRootPath + n;
            }),
            (t.addLibRoot = function (n) {
              if (t.libRootPath) return t.libRootPath + n;
            }),
            (t.addImagesRoot = function (n) {
              if (t.imagesRootPath) return t.imagesRootPath + n;
            }),
            (t.LiveChatWidgetClientSdkScript = 'LiveChatClientSdk.js'),
            (t.JqueryLibraryFile = 'jquery-3.4.1.min.js'),
            (t.BluebirdLibraryFile = 'bluebird-3.5.0.min.js'),
            (t.PurifyLibraryFile = 'purify.min.js'),
            (t.CallingSDKFile = 'Calling.js'),
            (t.SpoolSDKFile = 'spool-sdk/sdk.bundle.js'),
            (t.LoadingImageFileName = 'loading.gif'),
            (t.ErrorImageFileName = 'error.svg'),
            (t.CloseButtonFileName = 'closeButton.svg'),
            (t.MinimizeChatButtonFileName = 'minimizeChatButton.svg'),
            (t.CallRejectButtonFileName = 'callrejectbutton.svg'),
            (t.CallAcceptButtonFileName = 'callacceptbutton.svg'),
            (t.VideoCallAcceptButtonFileName = 'videocallacceptbutton.svg'),
            (t.VoiceOnButtonFileName = 'voiceon.svg'),
            (t.VoiceOffButtonFileName = 'voiceoff.svg'),
            (t.VideoCallOnButtonFileName = 'videoon.svg'),
            (t.VideoCallOffButtonFileName = 'videooff.svg'),
            (t.TranscriptDownloadIconFileName = 'transcriptDownloadIcon.svg'),
            (t.TranscriptEmailIconFileName = 'transcriptEmailIcon.svg'),
            (t.ErrorNotificationFileName = 'errorNotification.svg'),
            (t.LiveChatWidgetAllStyle = 'LiveChatWidgetAll.min.css'),
            (t.LiveChatWidgetLibsFile = 'LiveChatWidgetLibs.min.js'),
            (t.LocalizationJsFolder = 'locale/'),
            (t.JavascriptSuffix = '.js'),
            (t.OCSDKPathTemplate = 'https://ocsdk-prod.azureedge.net/release/{VERSION}/SDK.min.js'),
            (t.WebChatPathTemplate = 'https://cdn.botframework.com/botframework-webchat/{VERSION}/webchat-es5.js'),
            (t.WebChatPathDailyBuild =
              'https://github.com/microsoft/BotFramework-WebChat/releases/download/daily/webchat.js'),
            (t.WebChatPathLocalBuild = 'https://cdn.botframework.com/botframework-webchat/4.8.0/webchat-es5.js'),
            (t.WebChatIC3AdapterTemplate =
              // HACK
              // 'https://webchatic3.blob.core.windows.net/webchat-ic3adapter/{VERSION}/botframework-webchat-adapter-ic3.production.min.js'),
              '/dist/chat-adapter.js'),
            (t.IC3ClientTemplate =
              'https://comms.omnichannelengagementhub.com/release/{VERSION}/Scripts/SDK/SDK.min.js'),
            (t.SimpleUpdateInPath = 'https://unpkg.com/simple-update-in@2.1.1/dist/simple-update-in.production.min.js'),
            t
          );
        })();
        n.ScriptPaths = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = (function () {
          function i() {
            this.meta = 'meta';
            this.viewport = 'viewport';
            this.ScaleFordevice = 'width=device-width, initial-scale=1';
            this.defaultLCID = '1033';
            this.polyfillJavascriptMethods();
            this.initializeLCWRuntimeId();
            this.initializeGlobalVariables();
            this.initializeBootStrappingPromise();
            this.initializeScriptPath();
            this.loadInitLibraries();
            this.AddMetaData();
          }
          return (
            Object.defineProperty(i, 'LiveChatConfiguration', {
              get: function () {
                return (
                  this.lcConfig === null &&
                    t.TelemetryClient.error({
                      Event: t.TelemetryEvent.LiveChatConfigNotFound,
                      CloudType: i.environmentVersion,
                      ExceptionDetails: null
                    }),
                  this.lcConfig
                );
              },
              enumerable: !0,
              configurable: !0
            }),
            (i.prototype.AddMetaData = function () {
              var n = document.createElement(t.Constants.Meta);
              n.name = t.Constants.Viewport;
              n.content = t.Constants.ScaleFordevice;
              document.head.appendChild(n);
            }),
            Object.defineProperty(i, 'LiveChatContext', {
              get: function () {
                return (
                  this.lcContext === null &&
                    (this.lcConfig === null &&
                      t.TelemetryClient.error({
                        Event: t.TelemetryEvent.LiveChatConfigNotFound,
                        CloudType: i.environmentVersion,
                        ExceptionDetails: null
                      }),
                    (this.lcContext = new t.LiveChatContext()),
                    (this.lcContext.locale = this.lcConfig.chatWidgetLocale),
                    (this.lcContext.widgetId = this.widgetId)),
                  this.lcContext
                );
              },
              enumerable: !0,
              configurable: !0
            }),
            (i.prototype.polyfillJavascriptMethods = function () {
              String.prototype.startsWith ||
                (String.prototype.startsWith = function (n, t) {
                  return this.substr(t || 0, n.length) === n;
                });
              String.prototype.endsWith ||
                (String.prototype.endsWith = function (n, t) {
                  return (
                    (t === undefined || t === null || t > this.length) && (t = this.length),
                    this.substring(t - n.length, t) === n
                  );
                });
            }),
            (i.prototype.initializeLCWRuntimeId = function () {
              i.lcwRuntimeId = t.Util.newGuid();
            }),
            (i.prototype.initializeGlobalVariables = function () {
              var r = document.querySelector('script#' + t.Constants.LiveChatScriptId),
                n = r.getAttribute(t.Constants.EnvironmentVersionAttributeName);
              (n && n.trim().length !== 0) || (n = t.EnvironmentVersion.prod);
              i.environmentVersion = n.trim().toLowerCase();
            }),
            (i.prototype.initializeScriptPath = function () {
              var i = document.querySelector('script#' + t.Constants.LiveChatScriptId),
                n = i.getAttribute('src');
              n = n.substring(0, n.lastIndexOf('/') + 1);
              t.Util.isRelativeUrl(n) && (n = t.Util.getDirectoryPathFromUrl(t.Util.getCurrentUrl()) + n);
              t.ScriptPaths.ScriptRootPath = n;
              window.Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window ||
                (t.ScriptPaths.ScriptRootPath = n.replace('script', 'WebChatControl/script'));
            }),
            (i.prototype.shouldLoadBluebird = function () {
              return window.Promise === undefined;
            }),
            (i.prototype.shouldLoadJQuery = function () {
              return window.jQuery === undefined;
            }),
            (i.prototype.initializeBootStrappingPromise = function () {
              this.shouldLoadBluebird()
                ? (i.bootStrappingPromise = null)
                : t.Util.isNullOrUndefined(i.bootStrappingPromise) &&
                  (i.bootStrappingPromise = new Promise(function (n, t) {
                    i.bootStrappingPromiseResolver = n;
                    i.bootStrappingPromiseRejecter = t;
                  }));
            }),
            (i.prototype.initialize = function (n) {
              var l = this,
                r,
                o,
                s,
                h,
                c,
                u,
                f,
                e;
              $j = n === !0 ? jQuery.noConflict(!0) : jQuery;
              r = document.querySelector('script#' + t.Constants.LiveChatScriptId);
              t.Util.isNullOrUndefined(r)
                ? t.TelemetryClient.error({
                    Event: t.TelemetryEvent.BootscriptFormatInvalid,
                    CloudType: i.environmentVersion,
                    ExceptionDetails: null
                  })
                : ((o = r.getAttribute(t.Constants.AppIdAttributeName)),
                  (o && o.trim().length !== 0) ||
                    t.TelemetryClient.error({
                      Event: t.TelemetryEvent.BootscriptFormatInvalid,
                      CloudType: i.environmentVersion,
                      ExceptionDetails: { ErrorDetails: 'AppId Invalid' }
                    }),
                  (i.widgetId = o),
                  (s = r.getAttribute(t.Constants.OrgIdAttributeName)),
                  (s && s.trim().length !== 0) ||
                    t.TelemetryClient.error({
                      Event: t.TelemetryEvent.BootscriptFormatInvalid,
                      CloudType: i.environmentVersion,
                      ExceptionDetails: { ErrorDetails: 'OrgId Invalid' }
                    }),
                  (i.orgId = s),
                  (h = r.getAttribute(t.Constants.OrgUrlAttributeName)),
                  (h && h.trim().length !== 0) ||
                    t.TelemetryClient.error({
                      Event: t.TelemetryEvent.BootscriptFormatInvalid,
                      CloudType: i.environmentVersion,
                      ExceptionDetails: { ErrorDetails: 'OrgURL not found' }
                    }),
                  (i.orgUrl = h),
                  (c = r.getAttribute(t.Constants.HostNameAttributeName)),
                  (c && c.trim().length !== 0) ||
                    t.TelemetryClient.error({
                      Event: t.TelemetryEvent.BootscriptFormatInvalid,
                      CloudType: i.environmentVersion,
                      ExceptionDetails: { ErrorDetails: 'hostName not found' }
                    }),
                  (i.hostName = c),
                  (u = r.getAttribute(t.Constants.EnableTelemetryAttributeName)),
                  (u && u.trim().length !== 0) || (u = 'false'),
                  (i.enableTelemetry = u.trim().toLowerCase() === 'true'),
                  (f = r.getAttribute(t.Constants.LiveChatWidgetHideChatButton)),
                  (f && f.trim().length !== 0) || (f = 'false'),
                  (i.lcwHideChatButton = f.trim().toLowerCase() === 'true'),
                  (e = r.getAttribute(t.Constants.RenderOnMobileDevice)),
                  (e && e.trim().length !== 0) || (e = 'false'),
                  (i.renderOnMobileDevice = e.trim().toLowerCase() === 'true'),
                  t.ConfigurationManager.initialize()
                    .then(function () {
                      return l.loadLibraries();
                    })
                    .catch(function (n) {
                      i.bootStrappingPromiseRejecter();
                      t.TelemetryClient.error({
                        Event: t.TelemetryEvent.InvalidConfiguration,
                        CloudType: i.environmentVersion,
                        ExceptionDetails: n
                      });
                    }));
            }),
            (i.prototype.loadInitLibraries = function () {
              var n = [];
              n = n.concat(t.Util.getCssResources());
              n = n.concat([
                {
                  path: t.ScriptPaths.BluebirdLibraryPath,
                  preload: this.shouldLoadBluebird,
                  resourceType: t.ResourceType.Script,
                  callback: this.initializeBootStrappingPromise.bind(this)
                },
                {
                  path: t.ScriptPaths.JQueryLibraryPath,
                  preload: this.shouldLoadJQuery,
                  callback: this.initialize.bind(this),
                  resourceType: t.ResourceType.Script
                }
              ]);
              t.ResourceLoader.Load(n);
            }),
            (i.prototype.loadLibraries = function () {
              var n = [],
                i = this.getWebChatPath(t.ConfigurationManager.WebChatSdkVersion);
              n = n.concat([
                { path: i, resourceType: t.ResourceType.Script },
                {
                  path: t.ScriptPaths.WebChatIC3AdapterPath.replace(
                    '{VERSION}',
                    t.ConfigurationManager.WebChatIC3AdapterVersion
                  ),
                  resourceType: t.ResourceType.Script
                },
                { path: t.ScriptPaths.SimpleUpdateIn, resourceType: t.ResourceType.Script },
                { path: t.ScriptPaths.Purify, resourceType: t.ResourceType.Script },
                {
                  path: t.ScriptPaths.OCSDKPath.replace('{VERSION}', t.ConfigurationManager.OmnichannelSdkVersion),
                  resourceType: t.ResourceType.Script
                }
              ]);
              t.ResourceLoader.Load(n);
              window.addEventListener('oc:sdk:load', this.onOCSdkLoad.bind(this));
            }),
            (i.prototype.getWebChatPath = function (n) {
              var i = window.navigator.userAgent,
                r = i.indexOf('Trident') > -1;
              if (r) return t.ScriptPaths.WebChatLocalPath;
              switch (n) {
                case t.Constants.WebChatDailyBuildFlag:
                  return t.ScriptPaths.WebChatDailyPath;
                case t.Constants.WebChatLocalBuildFlag:
                  return t.ScriptPaths.WebChatLocalPath;
                default:
                  return t.ScriptPaths.WebChatPath.replace('{VERSION}', n);
              }
            }),
            (i.prototype.onOCSdkLoad = function () {
              var n = this,
                r = { orgUrl: i.orgUrl, orgId: i.orgId, widgetId: i.widgetId, channelId: t.Constants.ChannelId };
              t.OmnichannelProxy.getInstance()
                .initialize(r)
                .then(function () {
                  return t.ConfigurationHelper.getInstance().getLiveChatConfig();
                })
                .then(function (n) {
                  return t.ConfigurationHelper.getInstance().validateLiveChatConfig(n);
                })
                .then(function (n) {
                  return t.ConfigurationHelper.getInstance().validateWidgetLocations(n);
                })
                .then(function (n) {
                  return t.ConfigurationHelper.getInstance().saveLiveChatConfig(n);
                })
                .then(function () {
                  return n.loadLocalizationFiles(i.lcConfig.chatWidgetLocaleLCID);
                })
                .then(function () {
                  return i.bootStrappingPromiseResolver();
                });
            }),
            (i.prototype.loadLocalizationFiles = function (i) {
              var r = this,
                u = { path: t.ScriptPaths.LocalizationFilePath(this.defaultLCID), resourceType: t.ResourceType.Script },
                f = { path: t.ScriptPaths.LocalizationFilePath(i), resourceType: t.ResourceType.Script };
              return i !== this.defaultLCID
                ? Promise.all([
                    new Promise(function (n) {
                      t.ResourceLoader.LoadResource(u, function () {
                        n();
                      });
                    }),
                    new Promise(function (n) {
                      t.ResourceLoader.LoadResource(f, function () {
                        n();
                      });
                    })
                  ]).then(function () {
                    var t = n.Omnichannel.LiveChatWidget;
                    t.Locale = Object.assign({}, t['Locale_' + r.defaultLCID], t['Locale_' + i]);
                  })
                : new Promise(function (i) {
                    t.ResourceLoader.LoadResource(u, function () {
                      var t = n.Omnichannel.LiveChatWidget;
                      t.Locale = Object.assign({}, t['Locale_' + r.defaultLCID]);
                      i();
                    });
                  });
            }),
            (i.environmentVersion = t.EnvironmentVersion.prod),
            (i.lcConfig = null),
            (i.bootStrappingPromise = null),
            (i.lcwLoadToChatButtonShowTimer = t.Util.timer()),
            (i.debugInfo = new t.DebugInformation()),
            (i.lcContext = null),
            i
          );
        })();
        t.Bootstrapper = i;
      })((i = t.LiveChatWidget || (t.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {}));
window.isMock ||
  (function () {
    new Microsoft.Omnichannel.LiveChatWidget.Bootstrapper();
  })('docReady', window),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var i, t, r;
        (function (n) {
          n.CONFIG_VALIDATION = 'ConfigValidationEvents';
          n.LOAD = 'LoadEvents';
          n.ACTIONS = 'ActionEvents';
          n.IC3_CLIENT = 'IC3ClientEvents';
          n.OCSDK = 'OCSDKEvents';
          n.WEBCHAT = 'WebChatEvents';
          n.UNDEFINED = 'Undefined';
        })((i = n.ScenarioType || (n.ScenarioType = {}))),
          (function (n) {
            n.BootscriptFormatInvalid = 'BootscriptFormatInvalid';
            n.ResourceLoaded = 'ResourceLoaded';
            n.ResourceLoadFailed = 'ResourceLoadFailed';
            n.InvalidConfiguration = 'InvalidConfiguration';
            n.GetWidgetConfigStarted = 'GetWidgetConfigStarted';
            n.GetWidgetConfigSuccess = 'GetWidgetConfigSuccess';
            n.GetWidgetConfigFailure = 'GetWidgetConfigFailure';
            n.LiveChatConfigNotFound = 'LiveChatConfigNotFound';
            n.WebChatLoaded = 'WebChatLoaded';
            n.PrechatWidgetLoaded = 'PrechatWidgetLoaded';
            n.PostchatWidgetLoaded = 'PostchatWidgetLoaded';
            n.PrechatSubmitted = 'PrechatSubmitted';
            n.PostchatSubmitted = 'PostchatSubmitted';
            n.LCWChatButtonClicked = 'LCWChatButtonClicked';
            n.LCWChatButtonShow = 'LCWChatButtonShow';
            n.InitStarted = 'InitStarted';
            n.InitSuccess = 'InitSuccess';
            n.InitFailure = 'InitFailure';
            n.WidgetLoadComplete = 'WidgetLoadComplete';
            n.WidgetLoadFailed = 'WidgetLoadFailed';
            n.InvalidDomain = 'InvalidDomain';
            n.ValidDomain = 'ValidDomain';
            n.InvalidAuthClientMethod = 'InvalidAuthClientMethod';
            n.AuthClientProviderException = 'AuthClientProviderException';
            n.AuthClientMethodException = 'AuthClientMethodException';
            n.ContextProviderException = 'ContextProviderException';
            n.StringNotFound = 'StringNotFound';
            n.GetContextProviderSDKCall = 'GetContextProviderSDKCall';
            n.SetContextProviderSDKCall = 'SetContextProviderSDKCall';
            n.RemoveContextProviderSDKCall = 'RemoveContextProviderSDKCall';
            n.GetAuthTokenProviderSDKCall = 'GetAuthTokenProviderSDKCall';
            n.SetAuthTokenProviderSDKCall = 'SetAuthTokenProviderSDKCall';
            n.RemoveAuthTokenProviderSDKCall = 'RemoveAuthTokenProviderSDKCall';
            n.StartChatSDKCall = 'StartChatCall';
            n.DataMaskingRuleRegistered = 'DataMaskingRuleRegistered';
            n.LocationDetectionFlagNotFound = 'LocationDetectionFlagNotFound';
            n.LocationDetectionSuccess = 'LocationDetectionSuccess';
            n.LocationDetectionFailed = 'LocationDetectionFailed';
            n.InvalidAdaptiveCardFormat = 'InvalidAdaptiveCardFormat';
            n.StartProactiveChatSDKCall = 'StartProactiveChatSDKCall';
            n.ProactiveChatNotEnabled = 'ProactiveChatNotEnabled';
            n.ProactiveChatOffered = 'ProactiveChatOffered';
            n.ProactiveChatAccepted = 'ProactiveChatAccepted';
            n.ProactiveChatRejected = 'ProactiveChatRejected';
            n.IncomingProactiveChatScreenLoaded = 'IncomingProactiveChatScreenLoaded';
            n.ProactiveChatInvitationTimedOut = 'ProactiveChatInvitationTimedOut';
            n.ChatAlreadyTriggered = 'ChatAlreadyTriggered';
            n.IC3ClientEvent = 'IC3ClientEvent';
            n.JoinConversationSuccess = 'JoinConversationSuccess';
            n.OCSDKEvent = 'OCSDKEvent';
            n.OCSDKInitializationSuccess = 'OCSDKInitializationSuccess';
            n.OCSDKInitializationFailure = 'OCSDKInitializationFailure';
            n.GetSystemConfigStarted = 'GetSystemConfigStarted';
            n.GetSystemConfigSuccess = 'GetSystemConfigSuccess';
            n.GetSystemConfigFailure = 'GetSystemConfigFailure';
            n.FetchChatTokenStarted = 'FetchChatTokenStarted';
            n.FetchChatTokenSuccess = 'FetchChatTokenSuccess';
            n.FetchChatTokenFailure = 'FetchChatTokenFailure';
            n.SessionInitStarted = 'SessionInitStarted';
            n.SessionInitSuccess = 'SessionInitSuccess';
            n.SessionInitFailure = 'SessionInitFailure';
            n.SessionCloseSuccess = 'SessionCloseSuccess';
            n.SessionCloseFailure = 'SessionCloseFailure';
            n.SessionCloseStarted = 'SessionCloseStarted';
            n.SubmitPostChatSuccess = 'SubmitPostChatSuccess';
            n.SubmitPostChatFailure = 'SubmitPostChatFailure';
            n.SubmitPostChatStarted = 'SubmitPostChatStarted';
            n.FetchChatTranscriptStarted = 'FetchChatTranscriptStarted';
            n.FetchChatTranscriptSuccess = 'FetchChatTranscriptSuccess';
            n.FetchChatTranscriptFailure = 'FetchChatTranscriptFailure';
            n.EmailChatTranscriptStarted = 'EmailChatTranscriptStarted';
            n.EmailChatTranscriptSuccess = 'EmailChatTranscriptSuccess';
            n.EmailChatTranscriptFailure = 'EmailChatTranscriptFailure';
            n.SecondaryChannelEventStarted = 'SecondaryChannelEventStarted';
            n.SecondaryChannelEventSuccess = 'SecondaryChannelEventSuccess';
            n.SecondaryChannelEventFailure = 'SecondaryChannelEventFailure';
            n.VideoCallAccept = 'VideoCallAccept';
            n.VoiceCallAccept = 'VoiceCallAccept';
            n.VideoCallReject = 'VideoCallReject';
            n.VoiceCallReject = 'VoiceCallReject';
            n.ToggleMute = 'ToggleMute';
            n.ToggleCamera = 'ToggleCamera';
            n.EndCall = 'EndCall';
            n.CallingSDKInitSuccess = 'CallingSDKInitSuccess';
            n.CallingSDKInitFailed = 'CallingSDKInitFailed';
            n.CallingSDKLoadSuccess = 'CallingSDKLoadSuccess';
            n.CallingSDKLoadFailed = 'CallingSDKLoadFailed';
            n.ProcessingHTMLTextMiddlewareFailed = 'ProcessingHTMLTextMiddlewareFailed';
          })((t = n.TelemetryEvent || (n.TelemetryEvent = {})));
        r = (function () {
          function n() {}
          return (
            (n.map = function (n) {
              switch (n) {
                case t.InvalidConfiguration:
                case t.GetWidgetConfigStarted:
                case t.GetWidgetConfigSuccess:
                case t.GetWidgetConfigFailure:
                case t.LiveChatConfigNotFound:
                case t.AuthClientMethodException:
                case t.StringNotFound:
                case t.LocationDetectionFlagNotFound:
                case t.BootscriptFormatInvalid:
                case t.InvalidDomain:
                case t.ValidDomain:
                case t.InvalidAuthClientMethod:
                case t.InvalidAdaptiveCardFormat:
                case t.GetContextProviderSDKCall:
                case t.GetSystemConfigSuccess:
                case t.GetSystemConfigFailure:
                case t.SetContextProviderSDKCall:
                case t.ContextProviderException:
                case t.RemoveContextProviderSDKCall:
                case t.GetAuthTokenProviderSDKCall:
                case t.SetAuthTokenProviderSDKCall:
                case t.AuthClientProviderException:
                case t.RemoveAuthTokenProviderSDKCall:
                case t.StartChatSDKCall:
                case t.ProactiveChatNotEnabled:
                case t.StartProactiveChatSDKCall:
                  return i.CONFIG_VALIDATION;
                case t.ResourceLoaded:
                case t.ResourceLoadFailed:
                case t.WebChatLoaded:
                case t.PrechatWidgetLoaded:
                case t.PostchatWidgetLoaded:
                case t.InitStarted:
                case t.InitSuccess:
                case t.InitFailure:
                case t.WidgetLoadComplete:
                case t.WidgetLoadFailed:
                case t.IncomingProactiveChatScreenLoaded:
                case t.OCSDKInitializationSuccess:
                case t.OCSDKInitializationFailure:
                case t.LCWChatButtonShow:
                  return i.LOAD;
                case t.PrechatSubmitted:
                case t.PostchatSubmitted:
                case t.LCWChatButtonClicked:
                case t.DataMaskingRuleRegistered:
                case t.LocationDetectionSuccess:
                case t.LocationDetectionFailed:
                case t.ProactiveChatOffered:
                case t.ProactiveChatAccepted:
                case t.ProactiveChatRejected:
                case t.ProactiveChatInvitationTimedOut:
                case t.ChatAlreadyTriggered:
                case t.SubmitPostChatSuccess:
                case t.SubmitPostChatFailure:
                case t.ProcessingHTMLTextMiddlewareFailed:
                  return i.ACTIONS;
                default:
                  return i.CONFIG_VALIDATION;
              }
            }),
            (n.mapEventToScenario = function (t) {
              return n.map(t);
            }),
            n
          );
        })();
        n.TelemetryConstants = r;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t, i;
        (function (n) {
          n.INFO = 'INFO';
          n.DEBUG = 'DEBUG';
          n.WARNING = 'WARN';
          n.ERROR = 'ERROR';
        })((t = n.LogLevel || (n.LogLevel = {})));
        i = (function () {
          function i() {}
          return (
            Object.defineProperty(i, 'consoleLogLevels', {
              get: function () {
                return i._consoleEnable;
              },
              set: function (n) {
                i._consoleEnable = n;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(i, 'telemetryLogLevels', {
              get: function () {
                return i._telemeteryEnable;
              },
              set: function (n) {
                i._telemeteryEnable = n;
              },
              enumerable: !0,
              configurable: !0
            }),
            (i.info = function (r, u) {
              u === void 0 && (u = n.ScenarioType.UNDEFINED);
              i.logInternal(t.INFO, n.TelemetryHelper.parseInput(r, u));
            }),
            (i.debug = function (r, u) {
              u === void 0 && (u = n.ScenarioType.UNDEFINED);
              i.logInternal(t.DEBUG, n.TelemetryHelper.parseInput(r, u));
            }),
            (i.warning = function (r, u) {
              u === void 0 && (u = n.ScenarioType.UNDEFINED);
              i.logInternal(t.WARNING, n.TelemetryHelper.parseInput(r, u));
            }),
            (i.error = function (r, u) {
              u === void 0 && (u = n.ScenarioType.UNDEFINED);
              i.logInternal(t.ERROR, n.TelemetryHelper.parseInput(r, u));
            }),
            (i.consoleLog = function (i, r) {
              var u = r && Object.keys(r).length > 0 ? r : '';
              try {
                if (n.Bootstrapper.environmentVersion != n.EnvironmentVersion.prod)
                  switch (i) {
                    case t.INFO:
                      console.info(n.Constants.LiveChatWidget, u);
                      break;
                    case t.DEBUG:
                      console.debug(n.Constants.LiveChatWidget, u);
                      break;
                    case t.WARNING:
                      console.warn(n.Constants.LiveChatWidget, u);
                      break;
                    case t.ERROR:
                      console.error(n.Constants.LiveChatWidget, u);
                      break;
                    default:
                      console.debug(n.Constants.LiveChatWidget, u);
                  }
              } catch (f) {
                console.error('An unexpected error occurred in the Telemetry client: ' + f);
              }
            }),
            (i.logInternal = function (t, r) {
              i.consoleLogLevels && i.consoleLogLevels.indexOf(t) !== -1 && i.consoleLog(t, r.payload);
              var u = n.TelemetryHelper.buildTelemetryEvent(t, r);
              i.telemetryLogLevels &&
                i.telemetryLogLevels.indexOf(t) !== -1 &&
                n.TelemetryManager.sendTelemetry(r.scenarioType, u);
            }),
            i
          );
        })();
        n.TelemetryClient = i;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.getChatId = function () {
              if (n.Util.isLoaderLoaded()) {
                var t =
                  window[n.Constants.Microsoft][n.Constants.Omnichannel][n.Constants.LiveChatWidget][n.Constants.Loader]
                    .currentConversation;
                if (!n.Util.isNullOrUndefined(t)) return t.chatId;
              }
              return '';
            }),
            (t.getConversationId = function () {
              if (n.Util.isLoaderLoaded()) {
                var t =
                  window[n.Constants.Microsoft][n.Constants.Omnichannel][n.Constants.LiveChatWidget][n.Constants.Loader]
                    .currentConversation;
                if (!n.Util.isNullOrUndefined(t)) return t.conversationId;
              }
              return '';
            }),
            (t.getCurrentRequestId = function () {
              return n.Util.isLoaderLoaded()
                ? window[n.Constants.Microsoft][n.Constants.Omnichannel][n.Constants.LiveChatWidget][n.Constants.Loader]
                    .currentRequestId
                : '';
            }),
            (t.buildTelemetryEvent = function (i, r) {
              switch (r.scenarioType) {
                case n.ScenarioType.LOAD:
                  return t.conformToLoadContract(i, r);
                case n.ScenarioType.IC3_CLIENT:
                  return t.conformToIC3ClientContract(i, r);
                case n.ScenarioType.WEBCHAT:
                  return t.conformToWebChatContract(i, r);
                case n.ScenarioType.OCSDK:
                  return t.conformToOCSDKContract(i, r);
                case n.ScenarioType.ACTIONS:
                  return t.conformToActionsContract(i, r);
                default:
                case n.ScenarioType.CONFIG_VALIDATION:
                  return t.conformToConfigValidationContract(i, r);
              }
            }),
            (t.populateBasicProperties = function (i) {
              return {
                WidgetId: n.Bootstrapper.widgetId,
                ChatId: t.getChatId(),
                ChannelId: n.Constants.ChannelId,
                ConversationId: t.getConversationId(),
                OrganizationId: n.Bootstrapper.orgId,
                LCWRuntimeId: n.Bootstrapper.lcwRuntimeId,
                CurrentRequestId: t.getCurrentRequestId(),
                LogLevel: n.LogLevel[i]
              };
            }),
            (t.populate = function (n, i, r) {
              var f = t.populateBasicProperties(n, i),
                u = f;
              return r(u), u;
            }),
            (t.conformToActionsContract = function (n, i) {
              var r = i.payload;
              return t.populate(n, r, function (n) {
                n.Event = r.Event;
                n.ActionType = r.ActionType;
                n.ElapsedTimeInMilliseconds = r.ElapsedTimeInMilliseconds;
                n.ExceptionDetails = r.ExceptionDetails;
              });
            }),
            (t.conformToWebChatContract = function (n, i) {
              var r = i.payload;
              return t.populate(n, r, function (n) {
                n.Event = r.Event;
                n.EventInfo = r.data;
                n.Dimensions = r.dimensions;
                n.Duration = r.duration;
                n.ExceptionDetails = r.error;
              });
            }),
            (t.conformToConfigValidationContract = function (i, r) {
              var u = r.payload;
              return t.populate(i, u, function (t) {
                t.Event = u.Event;
                t.RequestId = u.RequestId;
                t.LCWVersion = n.Bootstrapper.environmentVersion;
                t.CloudType = u.CloudType;
                t.Domain = u.Domain;
                t.ElapsedTimeInMilliseconds = u.ElapsedTimeInMilliseconds;
                t.ExceptionDetails = u.ExceptionDetails;
                t.Language = n.Bootstrapper.lcConfig ? n.Bootstrapper.lcConfig.chatWidgetLocaleLCID || '' : '';
              });
            }),
            (t.conformToLoadContract = function (n, i) {
              var r = i.payload;
              return t.populate(n, r, function (n) {
                n.Event = r.Event;
                n.ResourcePath = r.ResourcePath;
                n.WidgetState = r.WidgetState;
                n.ChatState = r.ChatState;
                n.ChatType = r.ChatType;
                n.ElapsedTimeInMilliseconds = r.ElapsedTimeInMilliseconds;
                n.ExceptionDetails = r.ExceptionDetails;
              });
            }),
            (t.conformToIC3ClientContract = function (i, r) {
              var u = r.payload;
              return t.populate(i, u, function (t) {
                t.Event = u.Event;
                t.IC3ClientVersion = n.ConfigurationManager.IC3ClientVersion;
                t.SubscriptionId = u.SubscriptionId;
                t.EndpointUrl = u.EndpointUrl;
                t.ErrorCode = u.ErrorCode;
                t.ElapsedTimeInMilliseconds = u.ElapsedTimeInMilliseconds;
                t.ExceptionDetails = u.ExceptionDetails;
                t.ShouldBubbleToHost = u.ShouldBubbleToHost;
              });
            }),
            (t.conformToOCSDKContract = function (i, r) {
              var u = r.payload;
              return t.populate(i, u, function (t) {
                t.RequestId = u.RequestId;
                t.Event = u.Event;
                t.OCSDKVersion = n.ConfigurationManager.OmnichannelSdkVersion;
                t.TransactionId = u.TransactionId;
                t.ElapsedTimeInMilliseconds = u.ElapsedTimeInMilliseconds;
                t.ExceptionDetails = u.ExceptionDetails;
              });
            }),
            (t.parseInput = function (t, i) {
              return {
                scenarioType: i == n.ScenarioType.UNDEFINED ? n.TelemetryConstants.mapEventToScenario(t.Event) : i,
                payload: t
              };
            }),
            t
          );
        })();
        n.TelemetryHelper = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            Object.defineProperty(t, 'logger', {
              get: function () {
                if (
                  n.Util.isNullOrUndefined(t._logger) &&
                  !n.Util.isNullOrEmptyString(n.ConfigurationManager.AriaTelemetryKey) &&
                  n.Bootstrapper.enableTelemetry
                ) {
                  var i = { disableCookiesUsage: !0 };
                  n.Util.isNullOrEmptyString(n.ConfigurationManager.CollectorUriForTelemetry) ||
                    (i.collectorUri = n.ConfigurationManager.CollectorUriForTelemetry);
                  t._logger = AWTLogManager.initialize(n.ConfigurationManager.AriaTelemetryKey, i);
                }
                return t._logger;
              },
              enumerable: !0,
              configurable: !0
            }),
            (t.sendTelemetry = function (i, r) {
              var u, f;
              if (t.logger && i != n.ScenarioType.UNDEFINED) {
                u = new AWTEventProperties();
                u.setName(i);
                for (f in r) u.setProperty(f, r[f]);
                u.setPropertyWithPii(
                  n.ConfigurationManager.AriaTelemetryApplicationName,
                  n.Constants.LiveChatWidget,
                  AWTPiiKind.GenericData
                );
                t.logger.logEvent(u);
              }
            }),
            t
          );
        })();
        n.TelemetryManager = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function n() {}
          return (n.RTL_LOCALES = ['1025', '1037']), n;
        })();
        n.LocaleConstants = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {}));
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
(function (n) {
  var t;
  (function (n) {
    var t;
    (function (n) {
      var t = (function () {
        function t() {}
        return (
          (t.prototype.logClientSdkTelemetryEvent = function (t, i) {
            switch (t) {
              case n.LogLevel.DEBUG:
                n.TelemetryClient.debug(i, n.ScenarioType.IC3_CLIENT);
                break;
              case n.LogLevel.WARNING:
                n.TelemetryClient.warning(i, n.ScenarioType.IC3_CLIENT);
                break;
              case n.LogLevel.ERROR:
                n.TelemetryClient.error(i, n.ScenarioType.IC3_CLIENT);
                break;
              case n.LogLevel.INFO:
              default:
                n.TelemetryClient.info(i, n.ScenarioType.IC3_CLIENT);
            }
          }),
          t
        );
      })();
      n.IC3ClientSdkLogger = t;
    })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
  })((t = n.Omnichannel || (n.Omnichannel = {})));
})(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.shouldShowWelcomeScreen = function () {
              return n.ConfigurationManager.FeaturesConfig.ShowWelcomeScreen;
            }),
            (t.shouldShowPrechatScreen = function () {
              return n.ConfigurationManager.FeaturesConfig.ShowPrechatScreen;
            }),
            (t.shouldEnableFileAttachment = function () {
              return n.ConfigurationManager.FeaturesConfig.ShowFileAttachmentButton;
            }),
            (t.shouldEnableCallingAsEscalateChannel = function () {
              return n.ConfigurationManager.FeaturesConfig.CallingAsEscalateChannel;
            }),
            t
          );
        })();
        n.FeaturesManager = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.initialize = function () {
              var i = new Promise(function (i) {
                var r = n.ContextSpecificDataStore.GetData(
                    n.DataContextType.EnvironmentContext,
                    n.WidgetDataKeys.SystemConfigurationData
                  ),
                  u;
                if (t.UseCachedConfig && !n.Util.isNullOrUndefined(r)) {
                  t._configuration = r;
                  i();
                  return;
                }
                u = n.Util.timer();
                $j.getJSON(n.ScriptPaths.LiveChatWidgetConfigPath, function (r) {
                  t._configuration = r;
                  n.ContextSpecificDataStore.PersistData(
                    n.DataContextType.EnvironmentContext,
                    n.WidgetDataKeys.SystemConfigurationData,
                    r,
                    n.Constants.SystemConfigExpiryTimeForStorage
                  );
                  n.TelemetryClient.info({
                    Event: n.TelemetryEvent.GetSystemConfigSuccess,
                    ElapsedTimeInMilliseconds: u.milliSecondsElapsed
                  });
                  i();
                });
              });
              return (
                (n.TelemetryClient.consoleLogLevels = n.Util.selectedLogLevels(t.ConsoleLogLevels)),
                (n.TelemetryClient.telemetryLogLevels = n.Util.selectedLogLevels(t.TelemetryLogLevels)),
                i
              );
            }),
            Object.defineProperty(t, 'configuration', {
              get: function () {
                return this._configuration || this.defaultConfiguration;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'FeaturesConfig', {
              get: function () {
                return t.configuration.ocfeaturesState;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'AriaTelemetryKey', {
              get: function () {
                return t.configuration.ariaTelemetryKey;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'CollectorUriForTelemetry', {
              get: function () {
                return t.configuration.collectorUriForTelemetry;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'AriaTelemetryApplicationName', {
              get: function () {
                return t.configuration.ariaTelemetryApplicationName;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'TelemetryLogLevels', {
              get: function () {
                return t.configuration.telemetryLogLevels;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'ConsoleLogLevels', {
              get: function () {
                return t.configuration.consoleLogLevels;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'InitTimeout', {
              get: function () {
                return t.configuration.initTimeout;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'InitRetryCount', {
              get: function () {
                return t.configuration.initRetryCount;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'InitTimeBetweenRetry', {
              get: function () {
                return t.configuration.initTimeBetweenRetry;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'GetChatTokenTimeout', {
              get: function () {
                return t.configuration.getChatTokenTimeout;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'GetChatTokenRetryCount', {
              get: function () {
                return t.configuration.getChatTokenRetryCount;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'GetChatTokenTimeBetweenRetry', {
              get: function () {
                return t.configuration.getChatTokenTimeBetweenRetry;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'GetChatTranscriptTimeout', {
              get: function () {
                return t.configuration.getChatTranscriptTimeout;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'GetChatTranscriptRetryCount', {
              get: function () {
                return t.configuration.getChatTranscriptRetryCount;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'GetChatTranscriptTimeBetweenRetry', {
              get: function () {
                return t.configuration.getChatTokenTimeBetweenRetry;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'BufferInvalidationTimeForToken', {
              get: function () {
                return t.configuration.bufferInvalidationTimeForToken;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'TokenRefreshTime', {
              get: function () {
                return t.configuration.tokenRefreshTime;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'ConfigExpiryTime', {
              get: function () {
                return t.configuration.configExpiryTime;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'OmnichannelSdkVersion', {
              get: function () {
                return t.configuration.omnichannelSdkVersion;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'WebChatSdkVersion', {
              get: function () {
                return t.configuration.webChatSdkVersion;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'WebChatIC3AdapterVersion', {
              get: function () {
                return t.configuration.webChatIC3AdapterVersion;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'IC3ClientVersion', {
              get: function () {
                return t.configuration.ic3ClientVersion;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'UseCachedConfig', {
              get: function () {
                return t.configuration.useCachedConfig;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'IsDebugMode', {
              get: function () {
                return t.configuration.enableDebug;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'IsTypingIndicatorEnabled', {
              get: function () {
                return t.configuration.enableTypingIndicator;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'BootstrapperPromiseStateCheckInterval', {
              get: function () {
                return t.configuration.bootstrapperPromiseStateCheckInterval;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'LoaderPromiseStateCheckInterval', {
              get: function () {
                return t.configuration.loaderPromiseStateCheckInterval;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'MaxGetChatTokenRetriesOnFailure', {
              get: function () {
                return t.configuration.maxGetChatTokenRetriesOnFailure;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'MaxGetChatTranscriptRetriesOnFailure', {
              get: function () {
                return t.configuration.maxGetChatTranscriptRetriesOnFailure;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'GetChatTokenTimeBetweenRetriesOnFailure', {
              get: function () {
                return t.configuration.getChatTokenTimeBetweenRetriesOnFailure;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'ShouldOverrideWebChatStyles', {
              get: function () {
                return t.configuration.shouldOverrideWebChatStyles;
              },
              enumerable: !0,
              configurable: !0
            }),
            Object.defineProperty(t, 'WebChatStyles', {
              get: function () {
                return t.configuration.webChatStyles;
              },
              enumerable: !0,
              configurable: !0
            }),
            (t.defaultConfiguration = {
              ariaTelemetryKey: null,
              collectorUriForTelemetry: null,
              ariaTelemetryApplicationName: 'OmniChannelProd_Web',
              consoleLogLevels: ['INFO', 'ERROR'],
              telemetryLogLevels: ['INFO', 'ERROR'],
              ocfeaturesState: {
                ShowWelcomeScreen: !0,
                ShowPrechatScreen: !0,
                ShowFileAttachmentButton: !0,
                CallingAsEscalateChannel: !0
              },
              swcVersion: '0.95.31',
              initTimeout: 1e4,
              initRetryCount: 35,
              initTimeBetweenRetry: 1500,
              getChatTokenTimeout: 6e4,
              getChatTokenRetryCount: 35,
              getChatTokenTimeBetweenRetry: 1500,
              getChatTranscriptTimeout: 1e4,
              getChatTranscriptRetryCount: 5,
              getChatTranscriptTimeBetweenRetry: 1500,
              bufferInvalidationTimeForToken: 120,
              tokenRefreshTime: 36e5,
              configExpiryTime: 9e5,
              skypeWebControlUrl: 'https://swc.cdn.skype.com/v/0.136.52/sdk.min.js',
              omnichannelSdkVersion: '2020.03.05.1',
              webChatSdkVersion: '4.8.0',
              webChatIC3AdapterVersion: '0.1.0-master.e151488',
              ic3ClientVersion: '2020.03.13.1',
              useWebChat: !1,
              useCachedConfig: !1,
              swcPlatformId: '937',
              swcDisableAutostart: 'true',
              enableDebug: !1,
              enableTypingIndicator: !1,
              bootstrapperPromiseStateCheckInterval: 50,
              loaderPromiseStateCheckInterval: 50,
              maxGetChatTokenRetriesOnFailure: 3,
              maxGetChatTranscriptRetriesOnFailure: 1,
              getChatTokenTimeBetweenRetriesOnFailure: 1e4,
              shouldProvideCssUrlToSwc: !0,
              shouldOverrideWebChatStyles: !1,
              webChatStyles: {
                rootHeight: '84.8%',
                backgroundColor: 'White',
                bubbleBackground: 'White',
                bubbleBorderRadius: 8,
                bubbleBorderWidth: 0,
                bubbleFromUserBackground: '#F1F1F4',
                bubbleFromUserBorderRadius: 8,
                bubbleFromUserBorderWidth: 1,
                bubbleFromUserTextColor: 'Black',
                bubbleImageHeight: 240,
                bubbleMaxWidth: 480,
                bubbleMinHeight: 40,
                bubbleMinWidth: 250,
                receivedMesageTextColor: 'White',
                bubbleTextColor: 'Black',
                sendBoxTextWrap: !0,
                sendBoxMaxHeight: 96,
                sendBoxBackground: '#F1F1F4',
                hideUploadButton: !1,
                fontSizeSmall: '60%'
              }
            }),
            t
          );
        })();
        n.ConfigurationManager = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = (function () {
          function i() {}
          return (
            (i.getInstance = function () {
              return this._instance || (this._instance = new i()), this._instance;
            }),
            (i.prototype.getLiveChatConfig = function () {
              var i = this;
              return new Promise(function (r, u) {
                var e = t.ContextSpecificDataStore.GetData(
                    t.DataContextType.WidgetContext | t.DataContextType.OrganizationContext,
                    t.WidgetDataKeys.ConfigData
                  ),
                  f,
                  o;
                if (t.ConfigurationManager.UseCachedConfig && !t.Util.isNullOrUndefined(e)) {
                  r(e);
                  return;
                }
                f = n.Omnichannel.LiveChatWidget.Util.newGuid();
                t.Bootstrapper.debugInfo.addConfigRequestId(f);
                o = t.Util.timer();
                t.OmnichannelProxy.getInstance()
                  .getChatConfiguration(f)
                  .then(function (n) {
                    var u = i.transformConfig(n);
                    t.ContextSpecificDataStore.PersistData(
                      t.DataContextType.WidgetContext | t.DataContextType.OrganizationContext,
                      t.WidgetDataKeys.ConfigData,
                      u,
                      t.ConfigurationManager.ConfigExpiryTime
                    );
                    t.TelemetryClient.info({
                      Event: t.TelemetryEvent.GetSystemConfigSuccess,
                      RequestId: f,
                      Domain: window.location.host,
                      ElapsedTimeInMilliseconds: o.milliSecondsElapsed
                    });
                    r(u);
                  })
                  .catch(function (n) {
                    t.TelemetryClient.error({
                      Event: t.TelemetryEvent.GetSystemConfigFailure,
                      CloudType: t.Bootstrapper.environmentVersion,
                      Domain: window.location.host,
                      ExceptionDetails: n,
                      RequestId: f
                    });
                    u(n);
                  });
              });
            }),
            (i.prototype.validateLiveChatConfig = function (n) {
              return new Promise(function (i, r) {
                t.Util.isNullOrUndefined(n) ? r(new Error('Live Chat Config is null')) : i(n);
              });
            }),
            (i.prototype.validateWidgetLocations = function (n) {
              var i = this;
              return new Promise(function (r, u) {
                var e = t.Bootstrapper.hostName ? t.Bootstrapper.hostName : window.location.host,
                  f;
                !t.Util.isNullOrUndefinedOrEmptyArray(n.validLocations) &&
                t.Util.isNullOrUndefined(i.getValidLocationForCurrentDomain(n.validLocations, e))
                  ? ((f = new Error('No valid locations matched current domain')),
                    t.TelemetryClient.error({
                      Event: t.TelemetryEvent.InvalidDomain,
                      CloudType: t.Bootstrapper.environmentVersion,
                      ExceptionDetails: f,
                      Domain: window.location.host
                    }),
                    u(f))
                  : t.TelemetryClient.info({
                      Event: t.TelemetryEvent.ValidDomain,
                      CloudType: t.Bootstrapper.environmentVersion,
                      Domain: window.location.host
                    });
                r(n);
              });
            }),
            (i.prototype.saveLiveChatConfig = function (n) {
              t.Bootstrapper.lcConfig = n;
            }),
            (i.prototype.getValidLocationForCurrentDomain = function (n, i) {
              var r, u, f;
              if (t.Util.isNullOrUndefined(n) || t.Util.isNullOrEmptyString(i)) return null;
              for (r = 0; r < n.length; r++) if (((u = n[r]), (f = new RegExp(u.location)), i.match(f))) return u;
              return null;
            }),
            (i.prototype.transformConfig = function (n) {
              var i = new t.LiveChatConfig();
              return (
                (i.chatButtonIconUrl = n.LiveWSAndLiveChatEngJoin.msdyn_avatarurl),
                (i.bubbleColor = this.getValue(
                  t.Constants.OptionSetMapping,
                  n.LiveWSAndLiveChatEngJoin.msdyn_widgetthemecolor
                )),
                (i.chatButtonColor = this.getValue(
                  t.Constants.OptionSetMapping,
                  n.LiveWSAndLiveChatEngJoin.msdyn_widgetthemecolor
                )),
                (i.chatButtonTitle = n.LiveWSAndLiveChatEngJoin.msdyn_widgettitle),
                (i.isDownloadTranscriptEnabled = this.getDownloadTranscriptFlag(
                  n.LiveWSAndLiveChatEngJoin.msdyn_enablechattranscriptdownload
                )),
                (i.isEmailTranscriptEnabled = this.getEmailTranscriptFlag(
                  n.LiveWSAndLiveChatEngJoin.msdyn_enablechattranscriptemail
                )),
                (i.autoDetectLanguage = this.getAutoDetectLocaleFlag(
                  n.LiveWSAndLiveChatEngJoin.msdyn_autodetectlanguage
                )),
                (i.defaultLocale = t.Constants.DefaultLocale),
                i.autoDetectLanguage
                  ? ((i.chatWidgetLocale =
                      t.Constants.supportedLocales.indexOf(document.documentElement.lang.toLowerCase()) > -1
                        ? document.documentElement.lang.toLowerCase()
                        : t.Constants.supportedLocales.indexOf(navigator.language.toLowerCase()) == -1
                        ? i.defaultLocale
                        : navigator.language.toLowerCase()),
                    (i.chatWidgetLocaleLCID = i.chatWidgetLocale
                      ? this.getValueReverse(t.Constants.OptionSetMapping, i.chatWidgetLocale.toLowerCase())
                      : t.Constants.DefaultLocaleLCID))
                  : ((i.chatWidgetLocaleLCID =
                      n.ChatWidgetLanguage && n.ChatWidgetLanguage.msdyn_localeid
                        ? n.ChatWidgetLanguage.msdyn_localeid
                        : t.Constants.DefaultLocaleLCID),
                    (i.chatWidgetLocale =
                      n.ChatWidgetLanguage && n.ChatWidgetLanguage.msdyn_localeid
                        ? this.getValue(t.Constants.OptionSetMapping, n.ChatWidgetLanguage.msdyn_localeid)
                        : i.defaultLocale),
                    t.Util.isNullOrUndefined(i.chatWidgetLocale) && (i.chatWidgetLocale = i.defaultLocale)),
                (i.chatButtonSubtitle = n.LiveWSAndLiveChatEngJoin.msdyn_widgetsubtitle),
                (i.chatButtonPosition = this.getValue(
                  t.Constants.OptionSetMapping,
                  n.LiveWSAndLiveChatEngJoin.msdyn_widgetposition
                )),
                (i.chatTitleColor = this.getValue(
                  t.Constants.OptionSetMapping,
                  n.LiveWSAndLiveChatEngJoin.msdyn_widgetthemecolor
                )),
                (i.hideWidget = !this.getWidgetVisibility(n.LiveWSAndLiveChatEngJoin.ShowWidget)),
                (i.outsideOperatingHoursTitle = this.getOutsideOperatingHoursTitle(
                  n.LiveChatConfigOperatingHoursSettings
                )),
                (i.outsideOperatingHoursSubtitle = this.getOutsideOperatingHoursSubtitle(
                  n.LiveChatConfigOperatingHoursSettings
                )),
                (i.chatAvatarUrl = n.LiveWSAndLiveChatEngJoin.msdyn_avatarurl),
                (i.isPreChatEnabled =
                  n.LiveWSAndLiveChatEngJoin.msdyn_prechatenabled === 'true' ||
                  n.LiveWSAndLiveChatEngJoin.msdyn_prechatenabled === !0),
                (i.isPostChatEnabled =
                  n.LiveWSAndLiveChatEngJoin.msdyn_postchatenabled === 'true' ||
                  n.LiveWSAndLiveChatEngJoin.msdyn_postchatenabled === !0),
                (i.validLocations = t.Util.transformLiveChatWidgetLocations(
                  n.LiveWSAndLiveChatEngJoin.LiveChatEngAndLiveChatLocJoin
                )),
                (i.requestVisitorLocation = this.getLocationDetectionFlag(
                  n.LiveWSAndLiveChatEngJoin.msdyn_requestvisitorlocation
                )),
                n.LiveChatConfigAuthSettings &&
                  (i.authClientFunction = n.LiveChatConfigAuthSettings.msdyn_javascriptclientfunction),
                i.isPreChatEnabled &&
                  n.LiveWSAndLiveChatEngJoin.PreChatSurvey &&
                  n.LiveWSAndLiveChatEngJoin.PreChatSurvey.trim().length > 0 &&
                  (i.preChatSurvey = JSON.parse(n.LiveWSAndLiveChatEngJoin.PreChatSurvey)),
                i.isPostChatEnabled &&
                  n.LiveWSAndLiveChatEngJoin.PostChatSurvey &&
                  n.LiveWSAndLiveChatEngJoin.PostChatSurvey.trim().length > 0 &&
                  (i.postChatSurvey = JSON.parse(n.LiveWSAndLiveChatEngJoin.PostChatSurvey)),
                (i.isAudioNotificationEnabled = !1),
                (i.disableEmoticon = !0),
                (i.canUploadFile = t.FeaturesManager.shouldEnableFileAttachment()
                  ? this.getFileAttachmentsFlag(n.LiveWSAndLiveChatEngJoin.msdyn_enablefileattachmentsforcustomers)
                  : !1),
                t.FeaturesManager.shouldEnableCallingAsEscalateChannel() &&
                  (i.callingOptions = this.getCallingValue(
                    t.Constants.CallingOptionSetMapping,
                    n.LiveWSAndLiveChatEngJoin.msdyn_callingoptions
                  )),
                (i.enableCalling = t.FeaturesManager.shouldEnableCallingAsEscalateChannel()
                  ? n.LiveWSAndLiveChatEngJoin.msdyn_callingoptions ===
                      t.CallingOptionsOptionSetNumber.VideoAndVoiceCalling ||
                    n.LiveWSAndLiveChatEngJoin.msdyn_callingoptions === t.CallingOptionsOptionSetNumber.VoiceOnly
                  : !1),
                (i.fileExtensions = n.allowedFileExtensions),
                (i.fileSize = n.maxUploadFileSize),
                n.DataMaskingInfo && (i.maskingInfo = n.DataMaskingInfo),
                n.maskingRules &&
                  (i.maskingInfo ||
                    (i.maskingInfo = {
                      dataMaskingRules: {},
                      setting: { msdyn_maskforagent: null, msdyn_maskforcustomer: null }
                    }),
                  Array.isArray(n.maskingRules) &&
                    n.maskingRules.forEach(function (n) {
                      i.maskingInfo.dataMaskingRules[n.ruleId] = n.regex;
                    })),
                (i.isProactiveChatEnabled = !1),
                t.Util.isNullOrUndefined(n.LiveWSAndLiveChatEngJoin.msdyn_proactivechatenabled) ||
                  ((n.LiveWSAndLiveChatEngJoin.msdyn_proactivechatenabled === !0 ||
                    n.LiveWSAndLiveChatEngJoin.msdyn_proactivechatenabled === 'true') &&
                    (i.isProactiveChatEnabled = !0)),
                i
              );
            }),
            (i.prototype.getValue = function (n, t) {
              for (var i = 0; i < n.length; i++)
                if (n[i].OptionSetSelectedValue === t) return n[i].OptionSetConfigValue;
              return null;
            }),
            (i.prototype.getCallingValue = function (n, t) {
              for (var i = 0; i < n.length; i++)
                if (n[i].CallingOptionSetSelectedValue === t) return n[i].CallingOptionSetConfigValue;
              return null;
            }),
            (i.prototype.getValueReverse = function (n, t) {
              for (var i = 0; i < n.length; i++)
                if (n[i].OptionSetConfigValue === t) return n[i].OptionSetSelectedValue;
              return null;
            }),
            (i.prototype.getOutsideOperatingHoursTitle = function (n) {
              return n && !t.Util.isNullOrEmptyString(n.msdyn_offlinetitle) ? n.msdyn_offlinetitle : null;
            }),
            (i.prototype.getOutsideOperatingHoursSubtitle = function (n) {
              return n && !t.Util.isNullOrEmptyString(n.msdyn_offlinesubtitle) ? n.msdyn_offlinesubtitle : null;
            }),
            (i.prototype.transformMaskingRules = function (n) {
              var i = [];
              return (
                t.Util.isNullOrUndefined(n) ||
                  Object.keys(n).forEach(function (t) {
                    i.push({ ruleId: t, regex: n[t] });
                  }),
                i
              );
            }),
            (i.prototype.transformMaskingInfo = function (n) {
              var r = n.setting,
                i;
              return !t.Util.isNullOrUndefined(r) && ((i = !1), (i = r.msdyn_maskforcustomer), !i)
                ? null
                : this.transformMaskingRules(n.dataMaskingRules);
            }),
            (i.prototype.getWidgetVisibility = function (n) {
              return t.Util.isNullOrUndefined(n) || n.trim().toLowerCase() !== 'false';
            }),
            (i.prototype.getFileAttachmentsFlag = function (n) {
              return !t.Util.isNullOrUndefined(n) && n.toLowerCase().trim() === 'true';
            }),
            (i.prototype.getAutoDetectLocaleFlag = function (n) {
              return !t.Util.isNullOrUndefined(n) && n.toLowerCase().trim() === 'true';
            }),
            (i.prototype.getDownloadTranscriptFlag = function (n) {
              return !t.Util.isNullOrUndefined(n) && n.toLowerCase().trim() === 'true';
            }),
            (i.prototype.getEmailTranscriptFlag = function (n) {
              return !t.Util.isNullOrUndefined(n) && n.toLowerCase().trim() === 'true';
            }),
            (i.prototype.getLocationDetectionFlag = function (n) {
              return t.Util.isNullOrUndefined(n)
                ? (t.TelemetryClient.info({
                    Event: t.TelemetryEvent.LocationDetectionFlagNotFound,
                    CloudType: t.Bootstrapper.environmentVersion,
                    Domain: window.location.host,
                    ExceptionDetails: { ErrorDetails: 'requestlocationdetection config parameter missing' }
                  }),
                  !1)
                : n.toLowerCase().trim() === 'true';
            }),
            i
          );
        })();
        t.ConfigurationHelper = i;
      })((i = t.LiveChatWidget || (t.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {}));
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
(function (n) {
  var t;
  (function (n) {
    var t;
    (function (n) {
      var t = (function () {
        function t() {}
        return (
          (t.prototype.logClientSdkTelemetryEvent = function (t, i) {
            switch (t) {
              case n.LogLevel.DEBUG:
                n.TelemetryClient.debug(i, n.ScenarioType.OCSDK);
                break;
              case n.LogLevel.WARNING:
                n.TelemetryClient.warning(i, n.ScenarioType.OCSDK);
                break;
              case n.LogLevel.ERROR:
                n.TelemetryClient.error(i, n.ScenarioType.OCSDK);
                break;
              case n.LogLevel.INFO:
              default:
                n.TelemetryClient.info(i, n.ScenarioType.OCSDK);
            }
          }),
          t
        );
      })();
      n.OmnichannelSDKLogger = t;
    })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
  })((t = n.Omnichannel || (n.Omnichannel = {})));
})(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = (function () {
          function i() {
            this.defaultError = new Error('Omnichannel proxy not initialized');
          }
          return (
            (i.getInstance = function () {
              return this._instance || (this._instance = new i()), this._instance;
            }),
            (i.prototype.initialize = function (i, r) {
              try {
                return (
                  (this.proxy = n.CRM.Omnichannel.SDK.SDKProvider.getSDK(i, r, new t.OmnichannelSDKLogger())),
                  Promise.resolve()
                );
              } catch (u) {
                return Promise.reject('proxy init failed');
              }
            }),
            (i.prototype.getChatConfiguration = function (n) {
              var t = this;
              return new Promise(function (i, r) {
                t.proxy
                  ? t.proxy
                      .getChatConfig(n)
                      .then(function (n) {
                        i(n);
                      })
                      .catch(function (n) {
                        r(n);
                      })
                  : r(t.defaultError);
              });
            }),
            (i.prototype.getChatToken = function (n) {
              var t = this;
              return new Promise(function (i, r) {
                t.proxy
                  ? t.proxy
                      .getChatToken(n)
                      .then(function (n) {
                        t.chatConfig = n;
                        i(t.chatConfig);
                      })
                      .catch(function (n) {
                        r(n);
                      })
                  : r(t.defaultError);
              });
            }),
            (i.prototype.sessionInit = function (n, i) {
              var r = this;
              return new Promise(function (u, f) {
                r.proxy
                  ? r.proxy
                      .sessionInit(n, i)
                      .then(function () {
                        u();
                      })
                      .catch(function (n) {
                        n.status === t.OmnichannelErrorCodes.WidgetUseOutsideOperatingHour
                          ? (t.Bootstrapper.LiveChatConfiguration.hideWidget = !0)
                          : f(n);
                      })
                  : f(r.defaultError);
              });
            }),
            (i.prototype.sessionClose = function (n) {
              var t = this;
              return new Promise(function (i, r) {
                t.proxy
                  ? t.proxy
                      .sessionClose(n)
                      .then(function () {
                        i();
                      })
                      .catch(function (n) {
                        r(n);
                      })
                  : r(t.defaultError);
              });
            }),
            (i.prototype.submitPostChatResponse = function (n, t) {
              var i = this;
              return new Promise(function (r, u) {
                i.proxy
                  ? i.proxy
                      .submitPostChatResponse(n, t)
                      .then(function () {
                        r();
                      })
                      .catch(function (n) {
                        u(n);
                      })
                  : u(i.defaultError);
              });
            }),
            (i.prototype.getChatTranscripts = function (n, t, i) {
              var r = this;
              return new Promise(function (u, f) {
                r.proxy
                  ? r.proxy
                      .getChatTranscripts(n, t, i)
                      .then(function (n) {
                        u(n);
                      })
                      .catch(function (n) {
                        f(n);
                      })
                  : f(r.defaultError);
              });
            }),
            (i.prototype.emailTranscript = function (n, t, i) {
              var r = this;
              return new Promise(function (u, f) {
                r.proxy
                  ? r.proxy
                      .emailTranscript(n, t, i)
                      .then(function () {
                        u();
                      })
                      .catch(function (n) {
                        f(n);
                      })
                  : f(r.defaultError);
              });
            }),
            (i.prototype.makeSecondaryChannelEventRequest = function (n, t, i) {
              var r = this;
              return new Promise(function (u, f) {
                r.proxy
                  ? r.proxy
                      .makeSecondaryChannelEventRequest(n, t, i)
                      .then(function () {
                        u();
                      })
                      .catch(function (n) {
                        f(n);
                      })
                  : f(r.defaultError);
              });
            }),
            i
          );
        })();
        t.OmnichannelProxy = i;
      })((i = t.LiveChatWidget || (t.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {}));
/* LiveChatInitializer.min.js:end */

/* LiveChatLoader.min.js:start */
('use strict');
var __extends =
    (this && this.__extends) ||
    (function () {
      var n =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (n, t) {
            n.__proto__ = t;
          }) ||
        function (n, t) {
          for (var i in t) t.hasOwnProperty(i) && (n[i] = t[i]);
        };
      return function (t, i) {
        function r() {
          this.constructor = t;
        }
        n(t, i);
        t.prototype = i === null ? Object.create(i) : ((r.prototype = i.prototype), new r());
      };
    })(),
  __awaiter =
    (this && this.__awaiter) ||
    function (n, t, i, r) {
      return new (i || (i = Promise))(function (u, f) {
        function o(n) {
          try {
            e(r.next(n));
          } catch (t) {
            f(t);
          }
        }
        function s(n) {
          try {
            e(r['throw'](n));
          } catch (t) {
            f(t);
          }
        }
        function e(n) {
          n.done
            ? u(n.value)
            : new i(function (t) {
                t(n.value);
              }).then(o, s);
        }
        e((r = r.apply(n, t || [])).next());
      });
    },
  __generator =
    (this && this.__generator) ||
    function (n, t) {
      function o(n) {
        return function (t) {
          return s([n, t]);
        };
      }
      function s(e) {
        if (f) throw new TypeError('Generator is already executing.');
        while (r)
          try {
            if (((f = 1), u && (i = u[e[0] & 2 ? 'return' : e[0] ? 'throw' : 'next']) && !(i = i.call(u, e[1])).done))
              return i;
            ((u = 0), i) && (e = [0, i.value]);
            switch (e[0]) {
              case 0:
              case 1:
                i = e;
                break;
              case 4:
                return r.label++, { value: e[1], done: !1 };
              case 5:
                r.label++;
                u = e[1];
                e = [0];
                continue;
              case 7:
                e = r.ops.pop();
                r.trys.pop();
                continue;
              default:
                if (!((i = r.trys), (i = i.length > 0 && i[i.length - 1])) && (e[0] === 6 || e[0] === 2)) {
                  r = 0;
                  continue;
                }
                if (e[0] === 3 && (!i || (e[1] > i[0] && e[1] < i[3]))) {
                  r.label = e[1];
                  break;
                }
                if (e[0] === 6 && r.label < i[1]) {
                  r.label = i[1];
                  i = e;
                  break;
                }
                if (i && r.label < i[2]) {
                  r.label = i[2];
                  r.ops.push(e);
                  break;
                }
                i[2] && r.ops.pop();
                r.trys.pop();
                continue;
            }
            e = t.call(n, r);
          } catch (o) {
            e = [6, o];
            u = 0;
          } finally {
            f = i = 0;
          }
        if (e[0] & 5) throw e[1];
        return { value: e[0] ? e[1] : void 0, done: !0 };
      }
      var r = {
          label: 0,
          sent: function () {
            if (i[0] & 1) throw i[1];
            return i[1];
          },
          trys: [],
          ops: []
        },
        f,
        u,
        i,
        e;
      return (
        (e = { next: o(0), throw: o(1), return: o(2) }),
        typeof Symbol == 'function' &&
          (e[Symbol.iterator] = function () {
            return this;
          }),
        e
      );
    },
  __assign =
    (this && this.__assign) ||
    Object.assign ||
    function (n) {
      for (var t, r, i = 1, u = arguments.length; i < u; i++) {
        t = arguments[i];
        for (r in t) Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    },
  Microsoft;
(function (n) {
  var t;
  (function (n) {
    var t;
    (function (n) {
      var t = (function () {
        function t() {}
        return (
          (t.getDownloadTranscriptAction = function () {
            return {
              src: n.ScriptPaths.TranscriptDownloadIconPath,
              title: n.Loader.Locale.DOWNLOAD_TRANSCRIPT_TOOLTIP_MESSAGE,
              alt: n.Loader.Locale.ALT_IMAGE_TRANSCRIPT_DOWNLOAD_ICON,
              name: n.DefaultActions.DownloadTranscript,
              id: n.HtmlIdNames.downloadTranscriptButton,
              onclick: this.triggerDownload.bind(this)
            };
          }),
          (t.triggerDownload = function () {
            var t = this,
              i = n.Loader.currentConversation.chatId,
              r = n.Loader.currentConversation.token.skypeToken,
              u = n.Util.newGuid();
            n.OmnichannelProxy.getInstance()
              .getChatTranscripts(u, i, r)
              .then(function (i) {
                var r;
                if (
                  (typeof i === n.Constants.String && (i = JSON.parse(i)),
                  n.Util.isNullOrUndefined(i[n.Constants.ChatMessagesJson]))
                )
                  n.NotificationHandler.notifyError(
                    n.NotificationScenarios.DownloadTranscriptError,
                    n.Loader.Locale.DOWNLOAD_TRANSCRIPT_FAILED_ERROR_MESSAGE
                  );
                else {
                  var f = btoa(encodeURIComponent(t.beautifyChatTranscripts(i[n.Constants.ChatMessagesJson]))),
                    e = decodeURIComponent(atob(f)),
                    u = new Blob([e], { type: 'text/html;charset=utf-8' });
                  navigator.appVersion.toString().indexOf(n.Constants.DotNet) > 0
                    ? window.navigator.msSaveBlob(u, n.TranscriptConstants.ChatTranscriptDownloadFile)
                    : ((r = document.createElement('a')),
                      document.body.appendChild(r),
                      r.setAttribute(n.HtmlAttributeNames.download, n.TranscriptConstants.ChatTranscriptDownloadFile),
                      r.setAttribute(n.HtmlAttributeNames.href, URL.createObjectURL(u)),
                      r.click());
                }
              })
              .catch(function () {
                n.NotificationHandler.notifyError(
                  n.NotificationScenarios.DownloadTranscriptError,
                  n.Loader.Locale.DOWNLOAD_TRANSCRIPT_FAILED_ERROR_MESSAGE
                );
              });
          }),
          (t.beautifyChatTranscripts = function (i) {
            var s = JSON.parse(i).reverse(),
              l = n.Loader.currentConversation.conversationStartTime,
              h = "<body bgcolor='" + n.TranscriptConstants.ChatTranscriptsBodyColor + "'>",
              f = '</div>',
              c = "<div class='transcripts' style='width:80%;margin-left:10%;'>",
              e = '',
              r = 1,
              u = '',
              o = 0;
            return (
              s.forEach(function (i) {
                var l = '6px',
                  p = '40px',
                  s = 'User',
                  w = 'U',
                  b = !1,
                  k = n.Constants.DefaultFileAttachmentName,
                  h = n.Constants.CustomerDialogColor,
                  a = n.Constants.CustomerFontColor,
                  v,
                  y,
                  d,
                  g;
                (i.tags && i.tags.toLowerCase().indexOf(n.Constants.SystemMessageTag) !== -1) ||
                  (i.isControlMessage && i.isControlMessage === !0) ||
                  (i.contentType && i.contentType.toLowerCase() === n.Constants.AdaptiveCardType) ||
                  (i.deliveryMode && i.deliveryMode.toLowerCase() === n.Constants.InternalMode) ||
                  (i.from !== undefined &&
                    i.from !== null &&
                    (i.from.application !== null
                      ? ((s = i.from.application.displayName),
                        (h = n.Constants.AgentDialogColor),
                        (a = n.Constants.AgentFontColor),
                        (b = !0))
                      : i.from.guest !== null
                      ? ((s = i.from.guest.displayName), (h = n.Constants.CustomerDialogColor))
                      : i.from.user !== null && ((s = i.from.user.displayName), (h = n.Constants.CustomerFontColor)),
                    (s = t.processDisplayName(s)),
                    (w = t.constructIconName(s)),
                    i.attachments !== null &&
                      i.attachments.length > 0 &&
                      i.attachments[0].name !== null &&
                      ((k = i.attachments[0].name),
                      (i.content = n.Loader.Locale.DEFAULT_ATTACHMENT_MESSAGE + ' ' + k))),
                  (v = t.processCreatedDateTime(i.createdDateTime, o)),
                  (y = ''),
                  s !== u &&
                    ((p = '0px'),
                    (v = '<b>' + s + ' </b> ' + t.processCreatedDateTime(i.createdDateTime, o)),
                    (y =
                      "<div class='circle' style='display:inline-block;float:left;margin-right:5px;width:35px;height:35px;border-radius:20px;color:black;line-height:35px;text-align:center;background:" +
                      h +
                      ";'>                                    <font tabindex ='" +
                      r +
                      "' color =" +
                      a +
                      " style='font-family:Segoe UI,SegoeUI,Helvetica Neue,Helvetica,Arial,sans-serif;'>                                        " +
                      w +
                      '                                    </font>                                    </div>'),
                    r++),
                  s !== u && (u === '' && (l = '0px'), u !== '' && (l = '20px')),
                  (d =
                    "<div style='margin-right:-2px;margin-top:" +
                    l +
                    ";margin-bottom:-2px;margin-left:42px;top:-2px;position:relative;'>                                            <font tabindex ='" +
                    r +
                    "' size = '1px' color='#000000' style='font-family:Segoe UI,SegoeUI,Helvetica Neue,Helvetica,Arial,sans-serif;font-weight:500;'>                                                " +
                    v +
                    '                                            </font>                                        </div>'),
                  r++,
                  (g =
                    "<div class='dialogbox' style='font-family:Segoe UI,SegoeUI,Helvetica Neue,Helvetica,Arial,sans-serif;word-break:break-word;min-height:20px;max-width:80%;display:inline-block;margin-left:" +
                    p +
                    ';padding: 10px; background-color:' +
                    h +
                    "; border-radius: 0px 12px 12px 12px; left: 3px; top: 2px; '>"),
                  (e =
                    e +
                    c +
                    y +
                    d +
                    g +
                    "<font tabindex= '" +
                    r++ +
                    "' color =" +
                    a +
                    '>' +
                    t.processContent(i.content, b) +
                    '</font>' +
                    f +
                    f),
                  (u = s),
                  o++);
              }),
              "<!DOCTYPE html><html><meta charset='UTF-8'>" +
                h +
                "<div class='allTranscripts' style='max-width:60%;min-width:30%;margin-left:20%;background-color:#FFFFFF;'>" +
                e +
                f +
                '</body></html>'
            );
          }),
          (t.processDisplayName = function (n) {
            var t = n.match('.+:.+');
            return (
              n.indexOf('teamsvisitor') >= 0 && t !== null && t !== undefined && t.length > 0 && (n = 'Customer'), n
            );
          }),
          (t.constructIconName = function (n) {
            var i = 'C',
              t = n.split(' ');
            return t.length > 1 ? (i = t[0][0] + t[1][0]) : t.length == 1 && (i = t[0][0]), i;
          }),
          (t.processCreatedDateTime = function (t, i) {
            var f = new Date(t),
              e = f.toLocaleTimeString(n.Bootstrapper.LiveChatConfiguration.chatWidgetLocale, {
                timeZoneName: 'short',
                timeStyle: 'short'
              }),
              r = e.split(' '),
              u = '';
            return (r !== null && r.length > 1 && (u = r[0] + ' ' + r[1]), i == 0)
              ? f.toLocaleDateString('en-us') + ' ' + u
              : u;
          }),
          (t.processContent = function (t, i) {
            if (t.toString().toLowerCase().indexOf(n.TranscriptConstants.TranscriptMessageEmojiMessageType) >= 0) {
              var r = t.match('<img src="http.*://.+/objects/.+/views.+">');
              r !== null &&
                r !== undefined &&
                r.length > 0 &&
                t.toString().toLowerCase().indexOf(r[0]) >= 0 &&
                (t = t.replace(r[0], ''));
            }
            return (
              !i &&
                t.toString().toLowerCase().indexOf('a href') >= 0 &&
                t.toString().toLowerCase().indexOf('target') >= 0 &&
                (t =
                  t.slice(0, t.toString().indexOf('target')) +
                  " style='color:white' " +
                  t.slice(t.toString().indexOf('target'))),
              t
            );
          }),
          t
        );
      })();
      n.DownloadTranscriptAction = t;
    })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
  })((t = n.Omnichannel || (n.Omnichannel = {})));
})(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.getEmailTranscriptAction = function (t) {
              return {
                src: n.ScriptPaths.TranscriptEmailIconPath,
                title: n.Loader.Locale.EMAIL_TRANSCRIPT_BUTTON_TITLE,
                alt: n.Loader.Locale.ALT_IMAGE_TRANSCRIPT_EMAIL_ICON,
                name: n.DefaultActions.EmailTranscript,
                id: n.HtmlIdNames.emailTranscriptButton,
                onclick: t ? t.bind(this) : this.fallbackHandler.bind(this)
              };
            }),
            (t.fallbackHandler = function () {}),
            t
          );
        })();
        n.EmailTranscriptAction = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            return t.call(this) || this;
          }
          return (
            __extends(i, t),
            (i.prototype.getActionBarIcons = function (n) {
              var t = this;
              return n.map(function (n) {
                return t.getActionIcon(n);
              });
            }),
            (i.prototype.getActionIcon = function (t) {
              var i = n.BrowserInfo.isEdge();
              return React.createElement(
                'div',
                {
                  className: n.HtmlClassNames.actionBar + '-' + t.name + '-' + n.HtmlClassNames.actionBarIconContainer,
                  role: i ? null : n.HtmlAttributeNames.button,
                  onClick: t.onclick.bind(this),
                  onKeyDown: this.keyHandler.bind(this, t),
                  title: t.title,
                  'aria-label': t.title
                },
                React.createElement(
                  'button',
                  {
                    id: t.id,
                    type: i ? n.HtmlAttributeNames.button : null,
                    className: n.HtmlClassNames.actionBar + '-' + t.name + '-' + n.HtmlClassNames.actionBarIconButton
                  },
                  React.createElement('img', {
                    src: t.src,
                    alt: t.alt,
                    className: n.HtmlClassNames.actionBar + '-' + t.name + '-' + n.HtmlClassNames.actionBarIconImage,
                    'aria-label': t.title
                  })
                )
              );
            }),
            (i.prototype.keyHandler = function (t, i) {
              (t.keyCode === n.Constants.KeyCodes.KEY_ENTER || t.keyCode === n.Constants.KeyCodes.KEY_SPACE) &&
                i.onclick();
            }),
            (i.prototype.render = function () {
              return React.createElement(
                'div',
                {
                  className: n.HtmlClassNames.actionBar,
                  id: n.HtmlIdNames.actionBar,
                  role: n.HtmlAttributeNames.region
                },
                React.createElement(
                  'div',
                  { className: n.HtmlClassNames.actionBarIconsContainer, id: n.HtmlIdNames.actionBarIconsContainer },
                  this.getActionBarIcons(this.props.enabledActions)
                )
              );
            }),
            i
          );
        })(React.Component);
        n.ActionBar = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function n() {}
          return (n.EmailTranscript = 'EmailTranscript'), (n.DownloadTranscript = 'DownloadTranscript'), n;
        })();
        n.DefaultActions = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            var i = t.call(this) || this;
            return (
              (i.emailRegexp = null),
              (i.emailRequestBody = new n.EmailRequestBody()),
              (i.state = { showInvalidEmailAlert: !1, emailInputValue: '', disableSendButton: !0 }),
              i
            );
          }
          return (
            __extends(i, t),
            (i.prototype.render = function () {
              return React.createElement(
                'div',
                {
                  className: n.HtmlClassNames.emailTranscriptDialogContainer,
                  id: n.HtmlIdNames.emailTranscriptDialogContainer,
                  onKeyDown: this.onEscapeKeyDown.bind(this)
                },
                React.createElement(
                  'div',
                  { className: n.HtmlClassNames.emailTranscriptDialog },
                  React.createElement(
                    'div',
                    { className: n.HtmlClassNames.emailTranscriptDialogContentContainer },
                    React.createElement(
                      'h1',
                      { className: n.HtmlClassNames.emailTranscriptDialogTitle },
                      n.Loader.Locale.EMAIL_TRANSCRIPT_DIALOG_TITLE
                    ),
                    React.createElement(
                      'p',
                      { className: n.HtmlClassNames.emailTranscriptDialogTextContent },
                      n.Loader.Locale.EMAIL_TRANSCRIPT_DIALOG_DESCRIPTION
                    ),
                    React.createElement(
                      'div',
                      { className: n.HtmlClassNames.emailTranscriptDialogTextFieldContainer },
                      React.createElement('input', {
                        className: n.HtmlClassNames.emailTranscriptDialogTextField,
                        id: n.HtmlIdNames.emailTranscriptDialogTextField,
                        'aria-label': n.Loader.Locale.EMAIL_TRANSCRIPT_DIALOG_INPUT_LABEL,
                        value: this.state.emailInputValue,
                        onChange: this.onInputChange.bind(this),
                        onKeyDown: this.inputKeyDownHandler.bind(this),
                        style: {
                          border: this.state.showInvalidEmailAlert
                            ? n.HtmlCssConstants.invalidEmailBorder + n.TranscriptConstants.ErrorConditionDefaultColor
                            : ''
                        }
                      }),
                      this.state.showInvalidEmailAlert &&
                        React.createElement(
                          'div',
                          {
                            className: n.HtmlClassNames.emailTranscriptDialogInvalidEmail,
                            role: n.Constants.HTMLConstants.alert,
                            tabIndex: -1
                          },
                          n.Loader.Locale.EMAIL_ADDRESS_NOT_VALID_ERROR_MESSAGE
                        )
                    )
                  ),
                  React.createElement(
                    'div',
                    { className: n.HtmlClassNames.emailTranscriptDialogButtons },
                    React.createElement(
                      'button',
                      {
                        type: n.HtmlAttributeNames.button,
                        className: n.HtmlClassNames.emailTranscriptDialogActionButtonSend,
                        title: n.Loader.Locale.EMAIL_TRANSCRIPT_DIALOG_SEND_REQUEST_BUTTON,
                        'aria-label': n.Loader.Locale.EMAIL_TRANSCRIPT_DIALOG_SEND_REQUEST_BUTTON,
                        disabled: this.state.disableSendButton,
                        style: {
                          marginTop: this.state.showInvalidEmailAlert
                            ? n.TranscriptConstants.ErrorConditionButtonsMarginTop
                            : '',
                          backgroundColor: this.state.disableSendButton
                            ? n.TranscriptConstants.DisabledSendButtonBackgroundColor
                            : n.TranscriptConstants.EnabledSendButtonBackgroundColor,
                          color: this.state.disableSendButton
                            ? n.TranscriptConstants.DisabledSendButtonTextColor
                            : n.TranscriptConstants.EnabledSendButtonTextColor
                        },
                        onClick: this.sendEmailRequestButtonEvents.bind(
                          this,
                          n.Util.newGuid(),
                          n.Loader.currentConversation.chatId,
                          this.state.emailInputValue
                        )
                      },
                      n.Loader.Locale.EMAIL_TRANSCRIPT_DIALOG_SEND_REQUEST_BUTTON
                    ),
                    React.createElement(
                      'button',
                      {
                        type: n.HtmlAttributeNames.button,
                        className: n.HtmlClassNames.emailTranscriptDialogActionButtonCancel,
                        title: n.Loader.Locale.EMAIL_TRANSCRIPT_DIALOG_CANCEL_REQUEST_BUTTON,
                        'aria-label': n.Loader.Locale.EMAIL_TRANSCRIPT_DIALOG_CANCEL_REQUEST_BUTTON,
                        onClick: this.hideEmailRequest.bind(this),
                        style: {
                          marginTop: this.state.showInvalidEmailAlert
                            ? n.TranscriptConstants.ErrorConditionButtonsMarginTop
                            : ''
                        }
                      },
                      n.Loader.Locale.EMAIL_TRANSCRIPT_DIALOG_CANCEL_REQUEST_BUTTON
                    )
                  )
                )
              );
            }),
            (i.prototype.componentDidMount = function () {
              var t, i;
              if (
                (n.Utility.preventFocusToMoveOutOfElement(n.HtmlIdNames.emailTranscriptDialogContainer),
                n.Utility.focusOnElement(n.HtmlIdNames.emailTranscriptDialogTextField),
                n.Util.isNullOrEmptyString(this.state.emailInputValue))
              ) {
                t = n.Loader.initContext.preChatResponse;
                for (i in t) this.getEmailRegex().test(t[i]) && this.setState({ emailInputValue: t[i] });
              }
            }),
            (i.prototype.inputKeyDownHandler = function (t) {
              var i = t.keyCode;
              i === 13 &&
                this.sendEmailRequestButtonEvents(
                  n.Util.newGuid(),
                  n.Loader.currentConversation.chatId,
                  this.state.emailInputValue
                );
            }),
            (i.prototype.onEscapeKeyDown = function (t) {
              t.keyCode === n.Constants.KeyCodes.KEY_ESC && this.hideEmailRequest();
            }),
            (i.prototype.onInputChange = function (n) {
              this.setState({
                emailInputValue: n.target.value,
                disableSendButton: !n.target.value || n.target.value === ''
              });
              this.showInvalidEmailAlert(!1);
            }),
            (i.prototype.hideEmailRequest = function () {
              this.props.onDialogHide();
              this.setState({ emailInputValue: '' });
              n.Utility.focusOnElement(n.HtmlIdNames.emailTranscriptButton);
            }),
            (i.prototype.showInvalidEmailAlert = function (n) {
              this.setState({ showInvalidEmailAlert: n });
            }),
            (i.prototype.sendEmailRequestButtonEvents = function (t, i, r) {
              this.getEmailRegex().test(r)
                ? this.sendEmailRequest(
                    n.Util.newGuid(),
                    n.Loader.currentConversation.chatId,
                    this.state.emailInputValue
                  )
                : this.showInvalidEmailAlert(!0);
            }),
            (i.prototype.getEmailRegex = function () {
              return (
                this.emailRegexp || (this.emailRegexp = new RegExp(n.TranscriptConstants.EmailRegex)), this.emailRegexp
              );
            }),
            (i.prototype.sendEmailRequest = function (t, i, r) {
              var e, o, u, f;
              return (
                this.hideEmailRequest(),
                n.Bootstrapper.debugInfo.addSendEmailTranscriptRequestId(t),
                (e = n.Loader.currentConversation.conversationStartTime),
                (o = {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: 'numeric',
                  minute: 'numeric',
                  second: 'numeric',
                  hour12: !0
                }),
                (this.emailRequestBody.ChatId = i),
                (this.emailRequestBody.EmailAddress = r),
                (this.emailRequestBody.DefaultAttachmentMessage = n.Loader.Locale.DEFAULT_ATTACHMENT_MESSAGE),
                (this.emailRequestBody.CustomerLocale = n.Bootstrapper.LiveChatConfiguration.chatWidgetLocale),
                (u = n.Loader.currentConversation.token.skypeToken),
                (f = n.OmnichannelProxy.getInstance()
                  .emailTranscript(t, u, this.emailRequestBody)
                  .catch(function () {
                    n.NotificationHandler.notifyError(
                      n.NotificationScenarios.EmailTranscriptError,
                      n.Loader.Locale.SEND_EMAIL_TRANSCRIPT_REQUEST_FAIL_ERROR_MESSAGE
                    );
                  })),
                f
              );
            }),
            i
          );
        })(React.Component);
        n.EmailRequestDialog = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = (function (i) {
          function r() {
            var n = i.call(this) || this;
            return (
              (n.state = {
                showVideoCallPopup: !1,
                showCallPopup: !1,
                showVoiceCallDialog: !1,
                showVideoCallDialog: !1,
                shouldNotShowVideoCallButton: !1,
                isRemoteVideoEnabled: !1,
                isLocalVideoEnabled: !1,
                isMicrophoneMuted: !1,
                handleCloseConfirmation: n.handleCloseConfirmation.bind(n),
                heightSet: n.setCallingContainerHeightBasedOnCalling.bind(n)
              }),
              n
            );
          }
          return (
            __extends(r, i),
            (r.prototype.componentDidMount = function () {
              this.props.liveChatConfig !== null &&
                (this.props.liveChatConfig.callingOptions === t.CallingOptions.VideoAndVoiceCalling ||
                  this.props.liveChatConfig.callingOptions === t.CallingOptions.VoiceOnly) &&
                this.loadCallingLibraries();
            }),
            (r.prototype.loadCallingLibraries = function () {
              var n = [];
              n = n.concat([
                {
                  path: t.ScriptPaths.SpoolSDKPath,
                  callback: this.load.bind(this),
                  resourceType: t.ResourceType.Script
                }
              ]);
              t.ResourceLoader.Load(n);
            }),
            (r.prototype.setCallPopupState = function () {
              t.FeaturesManager.shouldEnableCallingAsEscalateChannel() &&
                (this.props.liveChatConfig.callingOptions === t.CallingOptions.VoiceOnly
                  ? this.setState({
                      showCallPopup: !0,
                      showVideoCallPopup: !1,
                      heightSet: this.setCallingContainerHeightBasedOnCalling(!1, !1, !0, !1)
                    })
                  : this.props.liveChatConfig.callingOptions === t.CallingOptions.VideoAndVoiceCalling
                  ? this.setState({
                      showCallPopup: !1,
                      showVideoCallPopup: !0,
                      heightSet: this.setCallingContainerHeightBasedOnCalling(!1, !1, !1, !0)
                    })
                  : this.setState({
                      showCallPopup: !1,
                      showVideoCallPopup: !1,
                      heightSet: this.setCallingContainerHeightBasedOnCalling(!1, !1, !1, !1)
                    }),
                this.props.setWebChatHeightBasedOnCalling());
            }),
            (r.prototype.setLocalAndRemoteVideo = function () {
              if (
                t.FeaturesManager.shouldEnableCallingAsEscalateChannel() &&
                this.props.liveChatConfig.callingOptions === t.CallingOptions.VideoAndVoiceCalling
              ) {
                var u = n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isRemoteVideoEnabled({
                    callId: t.Loader.currentConversation.chatId
                  }),
                  f = n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isLocalVideoEnabled({
                    callId: t.Loader.currentConversation.chatId
                  }),
                  e = n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isMicrophoneMuted({
                    callId: t.Loader.currentConversation.chatId
                  }),
                  i = !1,
                  r = !1;
                u === !1 && f === !1 ? ((i = !0), (r = !1)) : ((i = !1), (r = !0));
                this.refreshVoiceVideoCallDialog(!1, !1, i, r, e, u, f);
              } else if (
                t.FeaturesManager.shouldEnableCallingAsEscalateChannel() &&
                this.props.liveChatConfig.callingOptions === t.CallingOptions.VoiceOnly
              ) {
                var u = !1,
                  f = !1,
                  e = n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isMicrophoneMuted({
                    callId: t.Loader.currentConversation.chatId
                  }),
                  i = !0,
                  r = !1;
                this.refreshVoiceVideoCallDialog(!1, !1, i, r, e, u, f);
              }
            }),
            (r.prototype.closeCallingDialog = function () {
              t.FeaturesManager.shouldEnableCallingAsEscalateChannel() &&
                this.refreshVoiceVideoCallDialog(!1, !1, !1, !1, !1, !1, !1);
            }),
            (r.prototype.clickVoiceCallAccept = function () {
              var i = this,
                r;
              console.log('Voice call accepted');
              r = t.SecondaryChannelEvents.Accept;
              t.Util.isNullOrUndefined(t.Loader.currentConversation.chatId) ||
              this.props.liveChatConfig.callingOptions !== t.CallingOptions.VoiceOnly
                ? t.Util.isNullOrUndefined(t.Loader.currentConversation.chatId) ||
                  this.props.liveChatConfig.callingOptions !== t.CallingOptions.VideoAndVoiceCalling ||
                  n.OmniChannel.SDK.VoiceVideoCalling.getInstance()
                    .acceptCall({ callId: t.Loader.currentConversation.chatId, withVideo: !1 })
                    .then(function () {
                      i.setState({
                        showCallPopup: !1,
                        showVideoCallPopup: !1,
                        showVoiceCallDialog: !0,
                        showVideoCallDialog: !1,
                        shouldNotShowVideoCallButton: !1,
                        isRemoteVideoEnabled: !1,
                        isLocalVideoEnabled: !1,
                        isMicrophoneMuted: n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isMicrophoneMuted({
                          callId: t.Loader.currentConversation.chatId
                        }),
                        heightSet: i.setCallingContainerHeightBasedOnCalling(!0, !1, !1, !1)
                      });
                      i.props.setWebChatHeightBasedOnCalling();
                      t.Loader.handleSecondaryChannelEvent(t.SecondaryChannelType.Voice, r);
                    })
                : n.OmniChannel.SDK.VoiceVideoCalling.getInstance()
                    .acceptCall({ callId: t.Loader.currentConversation.chatId, withVideo: !1 })
                    .then(function () {
                      i.setState({
                        showCallPopup: !1,
                        showVideoCallPopup: !1,
                        showVoiceCallDialog: !0,
                        showVideoCallDialog: !1,
                        isRemoteVideoEnabled: !1,
                        isLocalVideoEnabled: !1,
                        shouldNotShowVideoCallButton: !0,
                        isMicrophoneMuted: n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isMicrophoneMuted({
                          callId: t.Loader.currentConversation.chatId
                        }),
                        heightSet: i.setCallingContainerHeightBasedOnCalling(!0, !1, !1, !1)
                      });
                      t.Loader.handleSecondaryChannelEvent(t.SecondaryChannelType.Voice, r);
                    });
            }),
            (r.prototype.clickCallReject = function () {
              var i = this,
                r = t.SecondaryChannelEvents.Reject;
              t.Util.isNullOrUndefined(t.Loader.currentConversation.chatId) ||
                n.OmniChannel.SDK.VoiceVideoCalling.getInstance()
                  .rejectCall({ callId: t.Loader.currentConversation.chatId })
                  .then(
                    function () {
                      i.refreshVoiceVideoCallDialog(!1, !1, !1, !1, !1, !1, !1);
                      n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isRemoteVideoEnabled({
                        callId: t.Loader.currentConversation.chatId
                      })
                        ? (console.log('Video call rejected'),
                          t.Loader.handleSecondaryChannelEvent(t.SecondaryChannelType.Video, r))
                        : (console.log('Voice call rejected'),
                          t.Loader.handleSecondaryChannelEvent(t.SecondaryChannelType.Voice, r));
                    },
                    function () {
                      i.refreshVoiceVideoCallDialog(!1, !1, !1, !1, !1, !1, !1);
                    }
                  );
            }),
            (r.prototype.clickVideoCallAccept = function () {
              var i = this,
                r;
              console.log('Video call accepted');
              r = t.SecondaryChannelEvents.Accept;
              t.Util.isNullOrUndefined(t.Loader.currentConversation.chatId) ||
                n.OmniChannel.SDK.VoiceVideoCalling.getInstance()
                  .acceptCall({ callId: t.Loader.currentConversation.chatId, withVideo: !0 })
                  .then(function () {
                    i.setState({
                      showCallPopup: !1,
                      showVideoCallPopup: !1,
                      showVoiceCallDialog: !1,
                      showVideoCallDialog: !0,
                      isRemoteVideoEnabled: n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isRemoteVideoEnabled({
                        callId: t.Loader.currentConversation.chatId
                      }),
                      isLocalVideoEnabled: n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isLocalVideoEnabled({
                        callId: t.Loader.currentConversation.chatId
                      }),
                      isMicrophoneMuted: n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isMicrophoneMuted({
                        callId: t.Loader.currentConversation.chatId
                      }),
                      heightSet: i.setCallingContainerHeightBasedOnCalling(!1, !0, !1, !1)
                    });
                    i.props.setWebChatHeightBasedOnCalling();
                    t.Loader.handleSecondaryChannelEvent(t.SecondaryChannelType.Video, r);
                  });
            }),
            (r.prototype.clickStopVoiceVideoCall = function () {
              var i = this;
              console.log('End call');
              t.Util.isNullOrUndefined(t.Loader.currentConversation.chatId) ||
                n.OmniChannel.SDK.VoiceVideoCalling.getInstance()
                  .stopCall({ callId: t.Loader.currentConversation.chatId })
                  .then(
                    function () {
                      i.refreshVoiceVideoCallDialog(!1, !1, !1, !1, !1, !1, !1);
                    },
                    function () {
                      i.refreshVoiceVideoCallDialog(!1, !1, !1, !1, !1, !1, !1);
                    }
                  );
            }),
            (r.prototype.onToggleLocalVideoButtonClick = function () {
              var i = this;
              console.log('Toggle video camera');
              t.Util.isNullOrUndefined(t.Loader.currentConversation.chatId) ||
                n.OmniChannel.SDK.VoiceVideoCalling.getInstance()
                  .toggleLocalVideo({ callId: t.Loader.currentConversation.chatId })
                  .then(
                    function () {
                      var f = n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isRemoteVideoEnabled({
                          callId: t.Loader.currentConversation.chatId
                        }),
                        e = n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isLocalVideoEnabled({
                          callId: t.Loader.currentConversation.chatId
                        }),
                        o = n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isMicrophoneMuted({
                          callId: t.Loader.currentConversation.chatId
                        }),
                        r = !1,
                        u = !1;
                      f === !1 && e === !1 ? ((r = !0), (u = !1)) : ((r = !1), (u = !0));
                      i.refreshVoiceVideoCallDialog(!1, !1, r, u, o, f, e);
                    },
                    function () {
                      i.refreshVoiceVideoCallDialog(!1, !1, !1, !1, !1, !1, !1);
                    }
                  );
            }),
            (r.prototype.onToggleMuteButtonClick = function () {
              var i = this;
              console.log('Toggle mute');
              t.Util.isNullOrUndefined(t.Loader.currentConversation.chatId) ||
                n.OmniChannel.SDK.VoiceVideoCalling.getInstance()
                  .toggleMute({ callId: t.Loader.currentConversation.chatId })
                  .then(
                    function () {
                      var f = n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isRemoteVideoEnabled({
                          callId: t.Loader.currentConversation.chatId
                        }),
                        e = n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isLocalVideoEnabled({
                          callId: t.Loader.currentConversation.chatId
                        }),
                        o = n.OmniChannel.SDK.VoiceVideoCalling.getInstance().isMicrophoneMuted({
                          callId: t.Loader.currentConversation.chatId
                        }),
                        r = !1,
                        u = !1;
                      f === !1 && e === !1 ? ((r = !0), (u = !1)) : ((r = !1), (u = !0));
                      i.refreshVoiceVideoCallDialog(!1, !1, r, u, o, f, e);
                    },
                    function () {
                      i.refreshVoiceVideoCallDialog(!1, !1, !1, !1, !1, !1, !1);
                    }
                  );
            }),
            (r.prototype.refreshVoiceVideoCallDialog = function (n, t, i, r, u, f, e) {
              this.setState({
                showVideoCallPopup: n,
                showCallPopup: t,
                showVoiceCallDialog: i,
                showVideoCallDialog: r,
                isMicrophoneMuted: u,
                isRemoteVideoEnabled: f,
                isLocalVideoEnabled: e,
                heightSet: this.setCallingContainerHeightBasedOnCalling(i, r, t, n)
              });
              this.props.setWebChatHeightBasedOnCalling();
            }),
            (r.prototype.handleCloseConfirmation = function () {
              t.Util.isNullOrUndefined(t.Loader.currentConversation.chatId) ||
                (this.state.showCallPopup === !0 || this.state.showVideoCallPopup === !0
                  ? this.clickCallReject()
                  : (this.state.showVoiceCallDialog === !0 || this.state.showVideoCallDialog === !0) &&
                    this.clickStopVoiceVideoCall());
            }),
            (r.prototype.render = function () {
              return React.createElement(
                'div',
                { id: t.HtmlIdNames.callingContainer, className: t.HtmlClassNames.callingContainer },
                (this.state.showVoiceCallDialog ||
                  this.state.showVideoCallDialog ||
                  this.state.showCallPopup ||
                  this.state.showVideoCallPopup) &&
                  React.createElement(t.CurrentCall, {
                    locale: this.props.locale,
                    acceptWithVideo: this.state.showVideoCallDialog,
                    isVoiceOnly: this.state.shouldNotShowVideoCallButton,
                    isRemoteVideoEnabled: this.state.isRemoteVideoEnabled,
                    isLocalVideoEnabled: this.state.isLocalVideoEnabled,
                    isMicrophoneMuted: this.state.isMicrophoneMuted,
                    onVoiceVideoCallStopClick: this.clickStopVoiceVideoCall.bind(this),
                    onToggleLocalVideoClick: this.onToggleLocalVideoButtonClick.bind(this),
                    onToggleMuteClick: this.onToggleMuteButtonClick.bind(this),
                    videoCallingEnabled: this.state.showVideoCallPopup,
                    onCallReject: this.clickCallReject.bind(this),
                    onVoiceCallAccept: this.clickVoiceCallAccept.bind(this),
                    onVideoCallAccept: this.clickVideoCallAccept.bind(this),
                    isIncomingCallPopup: this.state.showCallPopup || this.state.showVideoCallPopup
                  })
              );
            }),
            (r.prototype.isCallingSDKLoaded = function () {
              return n.OmniChannel && n.OmniChannel.SDK && n.OmniChannel.SDK.VoiceVideoCalling ? !0 : !1;
            }),
            (r.prototype.load = function () {
              var i = this;
              t.FeaturesManager.shouldEnableCallingAsEscalateChannel() &&
                this.isCallingSDKLoaded() &&
                (t.FeaturesManager.shouldEnableCallingAsEscalateChannel()
                  ? n.OmniChannel.SDK.VoiceVideoCalling.getInstance()
                      .load()
                      .then(
                        function () {
                          n.OmniChannel.SDK.VoiceVideoCalling.getInstance()
                            .initialize({
                              skypeid: t.Loader.currentConversation.token.visitorId,
                              accesstoken: t.Loader.currentConversation.token.skypeToken,
                              environment: t.Bootstrapper.environmentVersion,
                              selfVideoHTMLElementId: 'selfVideo',
                              remoteVideoHTMLElementId: 'remoteVideo'
                            })
                            .then(
                              function () {
                                console.log('Voice/Video calling SDK init success');
                                i.registerEventHandlers();
                              },
                              function () {
                                console.log('Voice/Video calling SDK init failed');
                              }
                            );
                        },
                        function () {
                          console.log('Voice/Video calling SDK load failed');
                        }
                      )
                  : console.log('Voice/Video calling SDK load failed'));
            }),
            (r.prototype.registerEventHandlers = function () {
              var i = this;
              n.OmniChannel.SDK.VoiceVideoCalling.getInstance().registerEvent('callAdded', function (n) {
                var r = n.callId;
                t.Loader.currentConversation.chatId === r && i.setCallPopupState();
              });
              n.OmniChannel.SDK.VoiceVideoCalling.getInstance().registerEvent('localVideoStreamAdded', function (n) {
                var r = n.callId;
                t.Loader.currentConversation.chatId === r && i.setLocalAndRemoteVideo();
              });
              n.OmniChannel.SDK.VoiceVideoCalling.getInstance().registerEvent('localVideoStreamRemoved', function (n) {
                var r = n.callId;
                t.Loader.currentConversation.chatId === r && i.setLocalAndRemoteVideo();
              });
              n.OmniChannel.SDK.VoiceVideoCalling.getInstance().registerEvent('remoteVideoStreamAdded', function (n) {
                var r = n.callId;
                t.Loader.currentConversation.chatId === r && i.setLocalAndRemoteVideo();
              });
              n.OmniChannel.SDK.VoiceVideoCalling.getInstance().registerEvent('remoteVideoStreamRemoved', function (n) {
                var r = n.callId;
                t.Loader.currentConversation.chatId === r && i.setLocalAndRemoteVideo();
              });
              n.OmniChannel.SDK.VoiceVideoCalling.getInstance().registerEvent('callDisconnected', function (n) {
                var r = n.callId;
                t.Loader.currentConversation.chatId === r &&
                  (i.closeCallingDialog(),
                  t.Loader.handleSecondaryChannelEvent(t.SecondaryChannelType.Voice, t.SecondaryChannelEvents.End));
              });
            }),
            (r.prototype.setCallingContainerHeightBasedOnCalling = function (n, i, r, u) {
              var f = document.getElementById(t.HtmlIdNames.callingContainer);
              n === !0 || r === !0 || u === !0
                ? f.setAttribute(t.HtmlCssConstants.style, t.HtmlCssConstants.voiceCallOrIncomingPopupHeight)
                : i === !0
                ? f.setAttribute(t.HtmlCssConstants.style, t.HtmlCssConstants.videoCallDialogHeight)
                : f.setAttribute(t.HtmlCssConstants.style, t.HtmlCssConstants.NoCallDialogHeight);
            }),
            r
          );
        })(React.Component);
        t.CallingContainer = i;
      })((i = t.LiveChatWidget || (t.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            return t.call(this) || this;
          }
          return (
            __extends(i, t),
            (i.prototype.componentDidMount = function () {
              var t = document.getElementById(n.HtmlIdNames.chatButtonContainer);
              t
                ? n.FrameHandler.resizeFrame(window, n.IFrameValues.startChatButton)
                : console.error('Failed to find element: ', n.HtmlIdNames.chatButtonContainer);
            }),
            (i.prototype.render = function () {
              return React.createElement(
                'div',
                {
                  id: n.HtmlIdNames.chatButtonContainer,
                  className: n.HtmlClassNames.chat,
                  style: this.getButtonInitStyle(),
                  role: n.HtmlAttributeNames.button,
                  onKeyDown: this.keyHandler.bind(this),
                  onClick: this.props.onclick.bind(this, !1)
                },
                React.createElement('div', {
                  className: n.HtmlClassNames.notificationIcon,
                  id: n.HtmlIdNames.notificationIcon
                }),
                React.createElement(
                  'div',
                  { id: n.HtmlIdNames.loadingScreen, className: n.HtmlClassNames.loadingScreen, tabindex: -1 },
                  React.createElement(
                    'div',
                    { className: n.HtmlClassNames.loadingMessage },
                    this.props.locale.LOADING_TEXT
                  )
                ),
                React.createElement(
                  'div',
                  { className: n.HtmlClassNames.chatButton, id: n.HtmlIdNames.chatButton, role: 'button', tabindex: 0 },
                  React.createElement(
                    'div',
                    { className: n.HtmlClassNames.chatIconContainer, style: this.getIconContainerInitStyle() },
                    React.createElement('img', {
                      className: n.HtmlClassNames.chatIcon,
                      alt: this.props.locale.CHAT_BUTTON_ICON_ALT,
                      src: this.props.liveChatConfig.chatButtonIconUrl
                    })
                  ),
                  React.createElement(
                    'div',
                    { className: n.HtmlClassNames.chatIconTitle },
                    React.createElement(
                      'div',
                      { className: n.HtmlClassNames.oclcwt1, 'aria-label': this.props.liveChatConfig.chatButtonTitle },
                      this.props.liveChatConfig.chatButtonTitle
                    ),
                    React.createElement(
                      'div',
                      {
                        className: n.HtmlClassNames.oclcwt2,
                        'aria-label': this.props.liveChatConfig.chatButtonSubtitle
                      },
                      this.props.liveChatConfig.chatButtonSubtitle
                    )
                  )
                )
              );
            }),
            (i.prototype.keyHandler = function (t) {
              (t.keyCode == n.Constants.KeyCodes.KEY_ENTER || t.keyCode == n.Constants.KeyCodes.KEY_SPACE) &&
                this.props.onclick();
            }),
            (i.prototype.getButtonInitStyle = function () {
              var t = {
                position: n.Constants.ChatButtonInitStyle.position,
                bottom: n.Constants.ChatButtonInitStyle.bottomPosition,
                cursor: n.Constants.ChatButtonInitStyle.cursor
              };
              return (
                this.props.liveChatConfig.chatButtonPosition === n.Constants.ChatButtonInitStyle.bottomLeftPosition
                  ? (t[n.Constants.ChatButtonInitStyle.leftString] = n.Constants.ChatButtonInitStyle.leftPosition)
                  : (t[n.Constants.ChatButtonInitStyle.rightString] = n.Constants.ChatButtonInitStyle.rightPosition),
                t
              );
            }),
            (i.prototype.getIconContainerInitStyle = function () {
              return { backgroundColor: this.props.liveChatConfig.chatButtonColor };
            }),
            i
          );
        })(React.Component);
        n.ChatButton = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = (function (i) {
          function r() {
            var n = i.call(this) || this;
            return (
              (n.state = {
                isNotified: !0,
                currentWidgetLoadingState: t.WidgetLoadingState.Complete,
                currentWidgetState: t.WidgetState.Closed,
                currentSurveyWidgetState: t.WidgetState.Closed,
                surveyType: t.SurveyType.Prechat,
                showChat: !1,
                shouldShowChatButton: !1,
                shouldShowLoadingScreen: !1,
                shouldShowChatPlaceholder: !1,
                shouldShowPrechatSurvey: !1,
                shouldShowPostchatSurvey: !1,
                shouldShowProactiveChatInvite: !1,
                welcomePageDisplayStyle: {
                  loadingComponentVisibility: !0,
                  welcomeTextComponentVisibility: !0,
                  alertTextComponentVisibility: !1,
                  minimizeButtonVisibility: !t.Bootstrapper.renderOnMobileDevice,
                  closeButtonVisibility: !1,
                  alertHeaderText: '',
                  alertSubheaderText: ''
                },
                startProactiveChat: n.startProactiveChat.bind(n),
                handleChatButtonClick: n.handleChatButtonClick.bind(n)
              }),
              n
            );
          }
          return (
            __extends(r, i),
            (r.prototype.componentDidMount = function () {
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (n) {
                  switch (n.label) {
                    case 0:
                      return (
                        (this.prechatController = new t.PrechatController(this.props.liveChatConfig)),
                        (this.postchatController = new t.PostchatController(this.props.liveChatConfig)),
                        this.registerOnUnloadCallback(),
                        t.Util.setAriaLiveAlert(t.Loader.Locale.LIVE_CHAT_AVAILABLE),
                        t.TelemetryClient.info({
                          Event: t.TelemetryEvent.LCWChatButtonShow,
                          ElapsedTimeInMilliseconds: t.Bootstrapper.lcwLoadToChatButtonShowTimer.milliSecondsElapsed
                        }),
                        [4, this.restoreWidgetStateIfAvailable()]
                      );
                    case 1:
                      return n.sent(), [2];
                  }
                });
              });
            }),
            (r.prototype.componentDidUpdate = function (n, i) {
              this.state.shouldShowChatPlaceholder &&
                (t.FrameHandler.setToDefaultSize(window),
                i.shouldShowChatPlaceholder || t.WebChatSendBoxUtils.setFocus());
            }),
            (r.prototype.render = function () {
              return React.createElement(
                'div',
                { id: t.HtmlIdNames.chat },
                !t.Bootstrapper.lcwHideChatButton &&
                  this.state.shouldShowChatButton &&
                  React.createElement(t.ChatButton, {
                    liveChatConfig: this.props.liveChatConfig,
                    locale: this.props.locale,
                    onclick: this.handleChatButtonClick.bind(this)
                  }),
                this.state.currentSurveyWidgetState !== t.WidgetState.Closed &&
                  React.createElement(t.SurveyPlaceholder, {
                    liveChatConfig: this.props.liveChatConfig,
                    locale: this.props.locale,
                    showComponents: this.showComponents.bind(this),
                    loadWidget: this.loadWidget.bind(this),
                    closeConversation: this.closeConversation.bind(this),
                    surveyType: this.state.surveyType,
                    shouldShowSurvey: this.state.shouldShowPrechatSurvey || this.state.shouldShowPostchatSurvey,
                    changeCurrentSurveyWidgetState: this.changeCurrentSurveyWidgetState.bind(this)
                  }),
                this.state.showChat &&
                  React.createElement(
                    'div',
                    {
                      id: t.HtmlIdNames.chatPlaceholderWrapper,
                      style: { display: this.state.shouldShowChatPlaceholder ? 'block' : 'none' }
                    },
                    React.createElement(t.ChatPlaceholder, {
                      liveChatConfig: this.props.liveChatConfig,
                      locale: this.props.locale,
                      changeTitle: this.changeTitle.bind(this),
                      changeCurrentWidgetState: this.changeCurrentWidgetState.bind(this),
                      showComponents: this.showComponents.bind(this),
                      closeSession: this.closeSession.bind(this),
                      showHeader: !t.Bootstrapper.renderOnMobileDevice
                    })
                  ),
                this.state.shouldShowLoadingScreen &&
                  React.createElement(t.WelcomePage, {
                    liveChatConfig: this.props.liveChatConfig,
                    locale: this.props.locale,
                    onMinimize: this.onWelcomePageMinimize.bind(this),
                    onClose: this.onWelcomePageClose.bind(this),
                    welcomePageDisplayStyle: this.state.welcomePageDisplayStyle
                  }),
                this.state.shouldShowProactiveChatInvite &&
                  React.createElement(t.ProactiveChatPage, {
                    liveChatConfig: this.props.liveChatConfig,
                    locale: this.props.locale,
                    showComponents: this.showComponents.bind(this),
                    handleChatButtonClick: this.handleChatButtonClick.bind(this)
                  })
              );
            }),
            (r.prototype.registerOnUnloadCallback = function () {
              window.addEventListener('unload', this.cacheWidgetState.bind(this));
            }),
            (r.prototype.cacheWidgetState = function () {
              t.Loader.currentConversation.widgetStateBeforeUnload = this.state.currentWidgetState;
              t.Loader.currentConversation.surveyWidgetStateBeforeUnload = this.state.currentSurveyWidgetState;
              t.ContextSpecificDataStore.UpsertData(
                t.DataContextType.UserContext | t.DataContextType.WidgetContext | t.DataContextType.OrganizationContext,
                t.WidgetDataKeys.ConversationData,
                t.Loader.currentConversation
              );
            }),
            (r.prototype.handleChatButtonClick = function (n) {
              if ((n === void 0 && (n = !1), this.state.currentWidgetLoadingState === t.WidgetLoadingState.Complete)) {
                t.TelemetryClient.info({ Event: t.TelemetryEvent.LCWChatButtonClicked });
                var i = t.Util.timer();
                this.showComponents(t.Components.None);
                this.state.currentWidgetState === t.WidgetState.Minimized
                  ? this.handleMaximize()
                  : this.prechatController.shouldRenderPrechat()
                  ? (this.showComponents(t.Components.PrechatSurvey),
                    this.changeCurrentSurveyWidgetState(t.WidgetState.Maximized),
                    this.setSurveyType(t.SurveyType.Prechat),
                    t.FrameHandler.setToDefaultSize(window),
                    t.LogHelper.logPrechatWidgetLoadTime(i.milliSecondsElapsed))
                  : this.postchatController.shouldRenderPostchat()
                  ? (this.showComponents(t.Components.PostchatSurvey),
                    this.changeCurrentSurveyWidgetState(t.WidgetState.Maximized),
                    this.setSurveyType(t.SurveyType.Postchat),
                    t.FrameHandler.setToDefaultSize(window),
                    t.LogHelper.logPostchatWidgetLoadTime(i.milliSecondsElapsed))
                  : n
                  ? this.loadWidgetWithCache().then(function () {
                      return t.LogHelper.logChatWidgetLoadTime(i.milliSecondsElapsed);
                    })
                  : this.loadWidget().then(function () {
                      return t.LogHelper.logChatWidgetLoadTime(i.milliSecondsElapsed);
                    });
              } else this.startWidgetLoading();
            }),
            (r.prototype.loadWidget = function () {
              var n = this;
              return this.startWidgetLoading()
                .then(function () {
                  return t.Loader.fetchChatToken(!1);
                })
                .then(function () {
                  return n.resumeChat();
                })
                .then(function () {
                  return t.Loader.startSessionInit();
                })
                .then(function () {
                  return n.completeWidgetLoading(!1);
                })
                .catch(function (t) {
                  n.handleSessionInitError(t);
                  n.completeWidgetLoading(!0, t);
                  throw t;
                });
            }),
            (r.prototype.loadWidgetWithCache = function () {
              var n = this;
              return this.startWidgetLoading()
                .then(function () {
                  return n.resumeChat();
                })
                .then(function () {
                  return n.completeWidgetLoading(!1);
                })
                .catch(function (t) {
                  n.completeWidgetLoading(!0, t);
                  throw t;
                });
            }),
            (r.prototype.handleSessionInitError = function () {
              t.Loader.currentConversation.sessionInitErrorCode ===
              t.OmnichannelErrorCodes.WidgetUseOutsideOperatingHour
                ? (this.showComponents(t.Components.LoadingScreen),
                  this.setState({
                    welcomePageDisplayStyle: {
                      loadingComponentVisibility: !1,
                      welcomeTextComponentVisibility: !1,
                      alertTextComponentVisibility: !0,
                      minimizeButtonVisibility: !1,
                      closeButtonVisibility: !0,
                      alertHeaderText: t.AlertMessages.getAlertHeaderMessage(
                        t.Loader.currentConversation.sessionInitErrorCode
                      ),
                      alertSubheaderText: t.AlertMessages.getAlertSubHeaderMessage(
                        t.Loader.currentConversation.sessionInitErrorCode
                      )
                    }
                  }))
                : this.showComponents(t.Components.ChatButton);
            }),
            (r.prototype.restoreWidgetStateIfAvailable = function () {
              return __awaiter(this, void 0, void 0, function () {
                var n, i, r;
                return __generator(this, function (u) {
                  switch (u.label) {
                    case 0:
                      return !t.Loader.liveChatConfig.hideWidget
                        ? ((n = t.ContextSpecificDataStore.GetData(
                            t.DataContextType.UserContext |
                              t.DataContextType.WidgetContext |
                              t.DataContextType.OrganizationContext,
                            t.WidgetDataKeys.ConversationData
                          )),
                          !!t.Util.isNullOrUndefined(n))
                          ? [3, 5]
                          : ((i = n.widgetStateBeforeUnload),
                            (r = n.surveyWidgetStateBeforeUnload),
                            !(i !== t.WidgetState.Closed || r === t.WidgetState.Maximized))
                          ? [3, 3]
                          : ((t.Loader.currentConversation = n),
                            (t.Loader.currentRequestId = n.currentRequestId),
                            [4, this.changeCurrentWidgetState(t.WidgetState.Closed)])
                        : [3, 6];
                    case 1:
                      return u.sent(), [4, this.changeCurrentSurveyWidgetState(t.WidgetState.Closed)];
                    case 2:
                      return u.sent(), this.handleChatButtonClick(!0), [3, 4];
                    case 3:
                      this.showComponents(t.Components.ChatButton);
                      u.label = 4;
                    case 4:
                      return [3, 6];
                    case 5:
                      this.showComponents(t.Components.ChatButton);
                      u.label = 6;
                    case 6:
                      return [2];
                  }
                });
              });
            }),
            (r.prototype.resumeChat = function () {
              var n = this;
              return new Promise(function (t, i) {
                n.changeShowChatState(!0);
                n.loadWebChat()
                  .then(function () {
                    return t();
                  })
                  .catch(function (n) {
                    return i(n);
                  });
              });
            }),
            (r.prototype.completeWidgetLoading = function (n, i) {
              n
                ? (t.Loader.currentConversation.sessionInitErrorCode !==
                    t.OmnichannelErrorCodes.WidgetUseOutsideOperatingHour && this.showComponents(t.Components.None),
                  t.TelemetryClient.error({ Event: t.TelemetryEvent.WidgetLoadFailed, ExceptionDetails: i }))
                : (this.changeCurrentWidgetState(t.WidgetState.Maximized),
                  this.changeCurrentSurveyWidgetState(t.WidgetState.Closed),
                  (t.Loader.currentConversation.isPostChatResponseSubmitted = !1),
                  (t.Loader.currentConversation.isChatComplete = !1),
                  t.Bootstrapper.debugInfo.setWidgetState(this.state.currentWidgetState),
                  this.showComponents(t.Components.ChatPlaceholder),
                  t.TelemetryClient.info({ Event: t.TelemetryEvent.WidgetLoadComplete }));
              this.changeCurrentWidgetLoadingState(t.WidgetLoadingState.Complete);
            }),
            (r.prototype.loadWebChat = function () {
              return (
                (this.webChatProxy = new t.WebChat(this.props.liveChatConfig)),
                this.webChatProxy.createWebChat(),
                Promise.resolve()
              );
            }),
            (r.prototype.startWidgetLoading = function () {
              return (
                this.changeCurrentWidgetLoadingState(t.WidgetLoadingState.Pending),
                this.state.currentWidgetState === t.WidgetState.Closed &&
                  this.showComponents(t.Components.LoadingScreen),
                Promise.resolve()
              );
            }),
            (r.prototype.handleMaximize = function () {
              this.changeTitle(0);
              this.completeWidgetLoading(!1);
            }),
            (r.prototype.closeConversation = function () {
              t.FeaturesManager.shouldEnableCallingAsEscalateChannel() &&
                this.props.liveChatConfig !== null &&
                (this.props.liveChatConfig.callingOptions === t.CallingOptions.VideoAndVoiceCalling ||
                  this.props.liveChatConfig.callingOptions === t.CallingOptions.VoiceOnly) &&
                n.OmniChannel.SDK.VoiceVideoCalling.getInstance().dispose();
              this.resetCurrentLCWState();
              this.changeShowChatState(!1);
              t.Utility.emptyWebChatRoot();
              this.changeCurrentSurveyWidgetState(t.WidgetState.Closed);
              this.prechatController.resetPreChat();
              this.resetWelcomeView();
              t.ProactiveChatController.resetProctiveChatContext();
              t.ContextService.resetInitContext();
              t.Loader.currentConversation.isChatComplete = !0;
            }),
            (r.prototype.resetCurrentLCWState = function () {
              t.Loader.currentConversation = new t.Conversation();
              t.Loader.currentRequestId = undefined;
            }),
            (r.prototype.closeSession = function () {
              if (
                (t.Loader.IC3Adapter.end(), !t.Util.isNullOrUndefined(t.Loader.currentConversation.currentRequestId))
              ) {
                var n = t.Loader.currentConversation;
                n.isChatComplete = !0;
                t.Loader.sendSessionCloseEvent(n);
                this.postchatController.canRenderPostChat()
                  ? this.showComponents(t.Components.PostchatSurvey)
                  : (this.closeConversation(), this.showComponents(t.Components.ChatButton));
              }
            }),
            (r.prototype.changeTitle = function (n) {
              n > 0
                ? this.state.isNotified
                  ? (document.title = '(' + n + ')' + (document.title ? document.title.replace(/^\(\d*\)/, '') : ''))
                  : ((document.title = '(' + n + ')' + (document.title ? document.title : '')),
                    (this.state.isNotified = !0))
                : this.state.isNotified &&
                  ((document.title = document.title ? document.title.replace(/^\(\d*\)/, '') : ''),
                  (this.state.isNotified = !1));
            }),
            (r.prototype.changeShowChatState = function (n) {
              this.setState({ showChat: n });
            }),
            (r.prototype.changeCurrentWidgetState = function (n) {
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (t) {
                  switch (t.label) {
                    case 0:
                      return [4, this.setState({ currentWidgetState: n })];
                    case 1:
                      return t.sent(), [2];
                  }
                });
              });
            }),
            (r.prototype.changeCurrentWidgetLoadingState = function (n) {
              this.setState({ currentWidgetLoadingState: n });
            }),
            (r.prototype.setSurveyType = function (n) {
              this.setState({ surveyType: n });
            }),
            (r.prototype.showComponents = function (n) {
              this.setState({
                shouldShowChatButton: n === t.Components.ChatButton,
                shouldShowChatPlaceholder: n === t.Components.ChatPlaceholder,
                shouldShowLoadingScreen: n === t.Components.LoadingScreen,
                shouldShowPrechatSurvey: n === t.Components.PrechatSurvey,
                shouldShowPostchatSurvey: n === t.Components.PostchatSurvey,
                shouldShowProactiveChatInvite: n === t.Components.ProactiveChatInvite
              });
            }),
            (r.prototype.changeCurrentSurveyWidgetState = function (n) {
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (t) {
                  switch (t.label) {
                    case 0:
                      return [4, this.setState({ currentSurveyWidgetState: n })];
                    case 1:
                      return t.sent(), [2];
                  }
                });
              });
            }),
            (r.prototype.onWelcomePageMinimize = function () {
              this.shouldShowChatButtonOnMinimize() && this.showComponents(t.Components.ChatButton);
            }),
            (r.prototype.onWelcomePageClose = function () {
              this.changeCurrentWidgetState(t.WidgetState.Closed);
              this.closeConversation();
            }),
            (r.prototype.shouldShowChatButtonOnMinimize = function () {
              return !this.state.welcomePageDisplayStyle.alertTextComponentVisibility;
            }),
            (r.prototype.resetWelcomeView = function () {
              this.setState({
                welcomePageDisplayStyle: {
                  loadingComponentVisibility: !0,
                  welcomeTextComponentVisibility: !0,
                  alertTextComponentVisibility: !1,
                  minimizeButtonVisibility: !t.Bootstrapper.renderOnMobileDevice,
                  closeButtonVisibility: !1,
                  alertHeaderText: '',
                  alertSubheaderText: ''
                }
              });
            }),
            (r.prototype.startProactiveChat = function (n, i) {
              if (
                this.state.currentWidgetLoadingState === t.WidgetLoadingState.Complete &&
                this.state.currentWidgetState === t.WidgetState.Closed
              ) {
                var r = t.Util.timer();
                t.Loader.isPreChatEnabledForProactiveChat = n;
                t.ProactiveChatController.validateAndSetProactiveChatNotificationConfig(
                  i,
                  this.props.locale.PROACTIVE_CHAT_WELCOME_MESSAGE
                );
                this.showComponents(t.Components.ProactiveChatInvite);
                t.ProactiveChatController.createTimeoutForInvite(this.showComponents.bind(this));
                t.LogHelper.logIncomingProactiveChatLoadTime(r.milliSecondsElapsed);
              } else t.TelemetryClient.info({ Event: t.TelemetryEvent.ChatAlreadyTriggered });
            }),
            r
          );
        })(React.Component);
        t.ChatContainer = i;
      })((i = t.LiveChatWidget || (t.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i(n) {
            var i = t.call(this, n) || this;
            return (
              (i.enabledActions = []),
              (i.state = {
                showEmailRequestDialog: !1,
                showCloseConfirmation: !1,
                closeConfirmationInput: {},
                heightSet: !0
              }),
              (i.enabledActions = i.getEnabledActions()),
              i
            );
          }
          return (
            __extends(i, t),
            (i.prototype.render = function () {
              return React.createElement(
                'div',
                { id: n.HtmlIdNames.chatPlaceHolder, className: n.HtmlClassNames.webChatPlaceholder },
                React.createElement(
                  'div',
                  {
                    id: n.HtmlIdNames.chatDimLayer,
                    className: n.HtmlClassNames.webChatDimLayer,
                    style: {
                      display:
                        this.state.showEmailRequestDialog || this.state.showCloseConfirmation
                          ? n.Constants.HTMLConstants.block
                          : n.Constants.HTMLConstants.none
                    }
                  },
                  this.state.showEmailRequestDialog &&
                    React.createElement(n.EmailRequestDialog, { onDialogHide: this.hideEmailDialog.bind(this) }),
                  this.state.showCloseConfirmation &&
                    React.createElement(n.CloseConfirmation, {
                      closeConfirmationInput: this.state.closeConfirmationInput
                    })
                ),
                this.props.showHeader &&
                  React.createElement(n.Header, {
                    liveChatConfig: this.props.liveChatConfig,
                    locale: this.props.locale,
                    onMinimize: this.handleChatMinimize.bind(this),
                    onClose: this.handleChatClose.bind(this),
                    showIconAndTitle: !0,
                    showMinimizeButton: !0,
                    showCloseButton: !0
                  }),
                React.createElement(n.CallingContainer, {
                  ref: n.Constants.CloseCalling,
                  liveChatConfig: n.Loader.liveChatConfig,
                  locale: n.Loader.Locale,
                  setWebChatHeightBasedOnCalling: this.setWebChatHeightBasedOnCalling.bind(this)
                }),
                this.state.heightSet &&
                  React.createElement(n.WebChatRoot, {
                    actionBarActive: this.enabledActions.length > 0,
                    headerActive: this.props.showHeader
                  }),
                React.createElement(n.WebChatEventListener, null),
                this.enabledActions.length > 0 &&
                  React.createElement(n.ActionBar, { enabledActions: this.enabledActions })
              );
            }),
            (i.prototype.showEmailDialog = function () {
              this.setState({ showEmailRequestDialog: !0 });
              var t = document.getElementById(n.HtmlIdNames.emailTranscriptDialogTextField);
              t != null && t.focus();
            }),
            (i.prototype.hideEmailDialog = function () {
              this.setState({ showEmailRequestDialog: !1 });
            }),
            (i.prototype.getEnabledActions = function () {
              var t = [];
              return (
                this.props.liveChatConfig &&
                  (this.props.liveChatConfig.isDownloadTranscriptEnabled &&
                    t.push(n.DownloadTranscriptAction.getDownloadTranscriptAction()),
                  this.props.liveChatConfig.isEmailTranscriptEnabled &&
                    t.push(n.EmailTranscriptAction.getEmailTranscriptAction(this.showEmailDialog.bind(this)))),
                t
              );
            }),
            (i.prototype.handleChatClose = function () {
              n.Util.isNullOrUndefined(n.Loader.currentConversation.chatId) ||
                (this.props.changeTitle(0),
                this.confirmConversationClose(),
                this.refs.closeCalling.state.handleCloseConfirmation());
            }),
            (i.prototype.handleChatMinimize = function () {
              return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (t) {
                  switch (t.label) {
                    case 0:
                      return (
                        n.Util.isNullOrUndefined(n.Loader.currentConversation.chatId) ||
                          (this.props.changeTitle(0), this.props.showComponents(n.Components.ChatButton)),
                        [4, this.props.changeCurrentWidgetState(n.WidgetState.Minimized)]
                      );
                    case 1:
                      return (
                        t.sent(),
                        n.Bootstrapper.debugInfo.setWidgetState(n.WidgetState.Minimized),
                        n.Utility.focusOnElement(n.HtmlIdNames.chatButton),
                        [2]
                      );
                  }
                });
              });
            }),
            (i.prototype.confirmConversationClose = function () {
              for (
                var t = this.props.locale.CLOSE_CONFIRMATION_DIALOG_TITLE,
                  i = this.props.locale.CLOSE_CONFIRMATION_DIALOG_DESCRIPTION,
                  r,
                  u,
                  f = 0;
                f < this.enabledActions.length;
                f++
              )
                this.enabledActions[f].name == n.DefaultActions.DownloadTranscript
                  ? (u = !0)
                  : this.enabledActions[f].name == n.DefaultActions.EmailTranscript && (r = !0);
              r &&
                u &&
                ((t = this.props.locale.CLOSE_CONFIRMATION_DIALOG_TITLE_FOR_EMAIL_AND_DOWNLOAD_TRANSCRIPT_ENABLED),
                (i = this.props.locale
                  .CLOSE_CONFIRMATION_DIALOG_DESCRIPTION_FOR_EMAIL_AND_DOWNLOAD_TRANSCRIPT_ENABLED));
              r &&
                !u &&
                ((t = this.props.locale.CLOSE_CONFIRMATION_DIALOG_TITLE_FOR_EMAIL_TRANSCRIPT_ENABLED),
                (i = this.props.locale.CLOSE_CONFIRMATION_DIALOG_DESCRIPTION_FOR_EMAIL_TRANSCRIPT_ENABLED));
              !r &&
                u &&
                ((t = this.props.locale.CLOSE_CONFIRMATION_DIALOG_TITLE_FOR_DOWNLOAD_TRANSCRIPT_ENABLED),
                (i = this.props.locale.CLOSE_CONFIRMATION_DIALOG_DESCRIPTION_FOR_DOWNLOAD_TRANSCRIPT_ENABLED));
              this.setState({
                showCloseConfirmation: !0,
                closeConfirmationInput: {
                  title: t,
                  description: i,
                  confirmationButtonText: this.props.locale.CLOSE_CONFIRMATION_DIALOG_CONFIRMTITLE,
                  cancelButtonText: this.props.locale.CLOSE_CONFIRMATION_DIALOG_CANCELTITLE,
                  onConfirm: this.onCloseConfirmed.bind(this),
                  onCancel: this.onCloseCanceled.bind(this)
                }
              });
            }),
            (i.prototype.onCloseConfirmed = function () {
              this.setState({ showCloseConfirmation: !1 });
              this.props.showComponents(n.Components.ChatButton);
              this.props.changeCurrentWidgetState(n.WidgetState.Closed);
              n.Bootstrapper.debugInfo.setWidgetState(n.WidgetState.Closed);
              this.props.closeSession();
            }),
            (i.prototype.onCloseCanceled = function () {
              this.setState({ showCloseConfirmation: !1 });
              n.WebChatSendBoxUtils.setFocus();
            }),
            (i.prototype.setWebChatHeightBasedOnCalling = function () {
              var f = document.getElementsByClassName(
                  n.HtmlClassNames.webChat +
                    ' ' +
                    n.HtmlClassNames.actionBarInactive +
                    '-' +
                    n.HtmlClassNames.headerActive
                ),
                e = document.getElementsByClassName(
                  n.HtmlClassNames.webChat +
                    ' ' +
                    n.HtmlClassNames.actionBarInactive +
                    '-' +
                    n.HtmlClassNames.headerInactive
                ),
                o = document.getElementsByClassName(
                  n.HtmlClassNames.webChat +
                    ' ' +
                    n.HtmlClassNames.actionBarActive +
                    '-' +
                    n.HtmlClassNames.headerActive
                ),
                s = document.getElementsByClassName(
                  n.HtmlClassNames.webChat +
                    ' ' +
                    n.HtmlClassNames.actionBarActive +
                    '-' +
                    n.HtmlClassNames.headerInactive
                ),
                u = 0,
                a = document.getElementById(n.HtmlIdNames.chatPlaceHolder),
                i,
                h,
                r,
                c,
                l,
                t;
              a && (u = a.clientHeight);
              i = 0;
              h = document.getElementById(n.HtmlIdNames.callingContainer);
              h && (i = h.clientHeight);
              r = 0;
              c = document.getElementById(n.HtmlIdNames.webChatHeader);
              c && (r = c.clientHeight);
              l = n.HtmlCssConstants.activeActionBarHeight;
              f && f[0]
                ? ((t = f[0]), (t.style.height = (u - i - r).toString() + 'px'))
                : e && e[0]
                ? ((t = e[0]), (t.style.height = (u - i - r).toString() + 'px'))
                : o && o[0]
                ? ((t = o[0]), (t.style.height = (u - i - r - l).toString() + 'px'))
                : s && s[0] && ((t = s[0]), (t.style.height = (u - i - r - l).toString() + 'px'));
              this.setState({ heightSet: !0 });
            }),
            i
          );
        })(React.Component);
        n.ChatPlaceholder = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t;
        (function (n) {
          n[(n.None = 0)] = 'None';
          n[(n.ChatButton = 1)] = 'ChatButton';
          n[(n.LoadingScreen = 2)] = 'LoadingScreen';
          n[(n.ChatPlaceholder = 3)] = 'ChatPlaceholder';
          n[(n.PrechatSurvey = 4)] = 'PrechatSurvey';
          n[(n.PostchatSurvey = 5)] = 'PostchatSurvey';
          n[(n.ProactiveChatInvite = 6)] = 'ProactiveChatInvite';
        })((t = n.Components || (n.Components = {})));
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {}));
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
(function (n) {
  var t;
  (function (n) {
    var t;
    (function (n) {
      var t = (function (t) {
        function i() {
          return t.call(this) || this;
        }
        return (
          __extends(i, t),
          (i.prototype.render = function () {
            var r =
                this.props.isRemoteVideoEnabled === !0 ||
                this.props.isLocalVideoEnabled === !0 ||
                this.props.acceptWithVideo === !0
                  ? n.HtmlCallingCssConstants.withVideo
                  : n.HtmlCallingCssConstants.withoutVideo,
              u =
                this.props.isRemoteVideoEnabled === !0 ||
                this.props.isLocalVideoEnabled === !0 ||
                this.props.acceptWithVideo === !0
                  ? n.HtmlCallingCssConstants.withVideo
                  : n.HtmlCallingCssConstants.withoutVideo,
              f =
                this.props.isRemoteVideoEnabled === !0
                  ? n.HtmlCallingCssConstants.show
                  : n.HtmlCallingCssConstants.hide,
              t,
              i;
            return (
              (t =
                this.props.isLocalVideoEnabled === !0
                  ? this.props.isRemoteVideoEnabled === !0
                    ? n.HtmlCallingCssConstants.minimize
                    : n.HtmlCallingCssConstants.maximize
                  : n.HtmlCallingCssConstants.hide),
              (i =
                this.props.isRemoteVideoEnabled === !0 ||
                this.props.isLocalVideoEnabled === !0 ||
                this.props.acceptWithVideo === !0
                  ? n.HtmlCallingCssConstants.withVideo
                  : n.HtmlCallingCssConstants.withoutVideo),
              React.createElement(
                'div',
                { id: n.HtmlIdNames.callContainer, className: n.HtmlClassNames.callContainer },
                React.createElement(
                  'div',
                  { id: n.HtmlIdNames.currentCallBody, className: n.HtmlClassNames.noMargin + r },
                  React.createElement('div', {
                    id: n.HtmlIdNames.remoteVideo,
                    className: n.HtmlClassNames.noMargin + f
                  }),
                  React.createElement('div', { id: n.HtmlIdNames.selfVideo, className: n.HtmlClassNames.noMargin + t }),
                  this.props.isIncomingCallPopup &&
                    React.createElement(
                      'div',
                      {
                        id: n.HtmlIdNames.incomingCallPopup,
                        className: n.HtmlClassNames.incomingCallPopup,
                        role: n.HtmlAttributeNames.region
                      },
                      React.createElement(
                        'div',
                        { className: n.HtmlClassNames.incomingCallMessage, id: n.HtmlIdNames.incomingCallMessage },
                        this.props.locale.INCOMING_CALL_MESSAGE
                      ),
                      React.createElement(
                        'div',
                        { className: n.HtmlClassNames.incomingCallButtonGroup },
                        React.createElement(
                          'div',
                          { className: n.HtmlClassNames.redCircle },
                          React.createElement('div', {
                            id: n.HtmlIdNames.callRejectButton,
                            className: n.HtmlClassNames.callRejectButton,
                            tabIndex: 0,
                            style: { backgroundImage: 'url(' + n.ScriptPaths.CallRejectButtonPath + ')' },
                            role: n.HtmlAttributeNames.button,
                            onClick: this.props.onCallReject.bind(this),
                            onKeyDown: this.keyHandlerRejectCall.bind(this),
                            'aria-label': this.props.locale.REJECT_CALL,
                            title: this.props.locale.REJECT_CALL
                          })
                        ),
                        this.props.videoCallingEnabled &&
                          React.createElement(
                            'div',
                            { className: n.HtmlClassNames.greenCircle },
                            React.createElement('div', {
                              id: n.HtmlIdNames.videoCallAcceptButton,
                              className: n.HtmlClassNames.videoCallAcceptButton,
                              tabIndex: 0,
                              style: { backgroundImage: 'url(' + n.ScriptPaths.VideoCallAcceptButtonPath + ')' },
                              role: n.HtmlAttributeNames.button,
                              onClick: this.props.onVideoCallAccept.bind(this),
                              onKeyDown: this.keyHandlerAcceptVideoCall.bind(this),
                              'aria-label': this.props.locale.ACCEPT_VIDEO_CALL,
                              title: this.props.locale.ACCEPT_VIDEO_CALL
                            })
                          ),
                        React.createElement(
                          'div',
                          { className: n.HtmlClassNames.greenCircle },
                          React.createElement('div', {
                            id: n.HtmlIdNames.callAcceptButton,
                            className: n.HtmlClassNames.callAcceptButton,
                            tabIndex: 0,
                            style: { backgroundImage: 'url(' + n.ScriptPaths.CallAcceptButtonPath + ')' },
                            role: n.HtmlAttributeNames.button,
                            onClick: this.props.onVoiceCallAccept.bind(this),
                            onKeyDown: this.keyHandlerAcceptVoiceCall.bind(this),
                            'aria-label': this.props.locale.ACCEPT_VOICE_CALL,
                            title: this.props.locale.ACCEPT_VOICE_CALL
                          })
                        )
                      )
                    )
                ),
                this.props.isIncomingCallPopup === !1 &&
                  React.createElement(
                    'div',
                    { id: n.HtmlIdNames.currentCallFooter, className: n.HtmlClassNames.noMargin + i },
                    React.createElement(
                      'div',
                      { id: n.HtmlIdNames.currentCallActions, className: n.HtmlClassNames.noMargin + u },
                      this.props.isVoiceOnly === !1 &&
                        React.createElement('div', {
                          id: n.HtmlIdNames.toggleVideo,
                          className:
                            this.props.isLocalVideoEnabled === !0
                              ? n.HtmlClassNames.videoOn
                              : n.HtmlClassNames.videoOff,
                          tabIndex: 0,
                          style:
                            this.props.isLocalVideoEnabled === !0
                              ? { backgroundImage: 'url(' + n.ScriptPaths.VideoCallOnButtonPath + ')' }
                              : { backgroundImage: 'url(' + n.ScriptPaths.VideoCallOffButtonPath + ')' },
                          role: n.HtmlAttributeNames.button,
                          onClick: this.props.onToggleLocalVideoClick.bind(this),
                          onKeyDown: this.keyHandlerToggleCamera.bind(this),
                          title:
                            this.props.isLocalVideoEnabled === !0
                              ? this.props.locale.TURN_CAMERA_OFF
                              : this.props.locale.TURN_CAMERA_ON,
                          'aria-label':
                            this.props.isLocalVideoEnabled === !0
                              ? this.props.locale.TURN_CAMERA_OFF
                              : this.props.locale.TURN_CAMERA_ON
                        }),
                      React.createElement('div', {
                        id: n.HtmlIdNames.toggleAudio,
                        className:
                          this.props.isMicrophoneMuted === !0 ? n.HtmlClassNames.voiceOn : n.HtmlClassNames.voiceOff,
                        tabIndex: 0,
                        style:
                          this.props.isMicrophoneMuted === !1
                            ? { backgroundImage: 'url(' + n.ScriptPaths.VoiceOnButtonPath + ')' }
                            : { backgroundImage: 'url(' + n.ScriptPaths.VoiceOffButtonPath + ')' },
                        role: n.HtmlAttributeNames.button,
                        onClick: this.props.onToggleMuteClick.bind(this),
                        onKeyDown: this.keyHandlerToggleMute.bind(this),
                        title: this.props.isMicrophoneMuted === !1 ? this.props.locale.MUTE : this.props.locale.UNMUTE,
                        'aria-label':
                          this.props.isMicrophoneMuted === !1 ? this.props.locale.MUTE : this.props.locale.UNMUTE
                      }),
                      React.createElement(
                        'div',
                        { className: n.HtmlClassNames.redBox },
                        React.createElement('div', {
                          id: n.HtmlIdNames.callRejectButton,
                          className: n.HtmlClassNames.callRejectButton,
                          tabIndex: 0,
                          style: { backgroundImage: 'url(' + n.ScriptPaths.CallRejectButtonPath + ')' },
                          role: n.HtmlAttributeNames.button,
                          onClick: this.props.onVoiceVideoCallStopClick.bind(this),
                          onKeyDown: this.keyHandlerEndCall.bind(this),
                          title: this.props.locale.END_CALL,
                          'aria-label': this.props.locale.END_CALL
                        })
                      )
                    )
                  )
              )
            );
          }),
          (i.prototype.keyHandlerRejectCall = function (t) {
            t.ctrlKey && t.shiftKey && t.keyCode === n.Constants.KeyCodes.KEY_D && this.props.onCallReject();
          }),
          (i.prototype.keyHandlerAcceptVoiceCall = function (t) {
            t.ctrlKey && t.shiftKey && t.keyCode === n.Constants.KeyCodes.KEY_S && this.props.onVoiceCallAccept();
          }),
          (i.prototype.keyHandlerAcceptVideoCall = function (t) {
            t.ctrlKey && t.shiftKey && t.keyCode === n.Constants.KeyCodes.KEY_A && this.props.onVideoCallAccept();
          }),
          (i.prototype.keyHandlerToggleCamera = function (t) {
            t.ctrlKey && t.shiftKey && t.keyCode === n.Constants.KeyCodes.KEY_O && this.props.onToggleLocalVideoClick();
          }),
          (i.prototype.keyHandlerToggleMute = function (t) {
            t.ctrlKey && t.shiftKey && t.keyCode === n.Constants.KeyCodes.KEY_M && this.props.onToggleMuteClick();
          }),
          (i.prototype.keyHandlerEndCall = function (t) {
            t.ctrlKey &&
              t.shiftKey &&
              t.keyCode === n.Constants.KeyCodes.KEY_D &&
              this.props.onVoiceVideoCallStopClick();
          }),
          i
        );
      })(React.Component);
      n.CurrentCall = t;
    })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
  })((t = n.Omnichannel || (n.Omnichannel = {})));
})(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            return t.call(this) || this;
          }
          return (
            __extends(i, t),
            (i.prototype.componentDidMount = function () {
              n.Utility.preventFocusToMoveOutOfElement(n.HtmlIdNames.webChatCloseConversationConfirm);
              n.Utility.focusOnElement(n.HtmlIdNames.webChatCloseConversationConfirmButtonConfirm);
            }),
            (i.prototype.render = function () {
              return React.createElement(
                'div',
                {
                  id: n.HtmlIdNames.webChatCloseConversationConfirm,
                  className: n.HtmlClassNames.webChatCloseConversationConfirm,
                  role: n.HtmlAttributeNames.region,
                  tabIndex: -1,
                  onKeyDown: this.onEscapeKeyDown.bind(this)
                },
                React.createElement(
                  'div',
                  { className: n.HtmlClassNames.webChatCloseConversationContentContainer },
                  React.createElement(
                    'h1',
                    { className: n.HtmlClassNames.webChatCloseConversationConfirmTitle },
                    this.props.closeConfirmationInput.title
                  ),
                  React.createElement(
                    'p',
                    { className: n.HtmlClassNames.webChatCloseConversationConfirmSubtitle },
                    this.props.closeConfirmationInput.description
                  )
                ),
                React.createElement(
                  'div',
                  { className: n.HtmlClassNames.webChatCloseConversationConfirmButtonContainer },
                  React.createElement(
                    'div',
                    {
                      id: n.HtmlIdNames.webChatCloseConversationConfirmButtonConfirm,
                      className: n.HtmlClassNames.webChatCloseConversationConfirmButtonConfirm,
                      tabIndex: 0,
                      role: 'button',
                      onClick: this.props.closeConfirmationInput.onConfirm.bind(this),
                      onKeyDown: this.onConfirmKeyHandler.bind(this)
                    },
                    this.props.closeConfirmationInput.confirmationButtonText
                  ),
                  React.createElement(
                    'div',
                    {
                      className: n.HtmlClassNames.webChatCloseConversationConfirmButtonCancel,
                      tabIndex: 0,
                      role: 'button',
                      onClick: this.props.closeConfirmationInput.onCancel.bind(this),
                      onKeyDown: this.onCancelKeyHandler.bind(this)
                    },
                    this.props.closeConfirmationInput.cancelButtonText
                  )
                )
              );
            }),
            (i.prototype.onEscapeKeyDown = function (t) {
              t.keyCode === n.Constants.KeyCodes.KEY_ESC && this.props.closeConfirmationInput.onCancel();
            }),
            (i.prototype.onConfirmKeyHandler = function (t) {
              (t.keyCode === n.Constants.KeyCodes.KEY_ENTER || t.keyCode === n.Constants.KeyCodes.KEY_SPACE) &&
                this.props.closeConfirmationInput.onConfirm();
            }),
            (i.prototype.onCancelKeyHandler = function (t) {
              (t.keyCode === n.Constants.KeyCodes.KEY_ENTER || t.keyCode === n.Constants.KeyCodes.KEY_SPACE) &&
                this.props.closeConfirmationInput.onCancel();
            }),
            i
          );
        })(React.Component);
        n.CloseConfirmation = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            return t.call(this) || this;
          }
          return (
            __extends(i, t),
            (i.prototype.render = function () {
              var t = this.props.liveChatConfig.chatButtonIconUrl ? this.props.liveChatConfig.chatButtonIconUrl : '',
                i = this.props.liveChatConfig.chatButtonIconUrl ? '' : n.HtmlClassNames.webChatImageFile;
              return React.createElement(
                'div',
                {
                  id: n.HtmlIdNames.webChatHeader,
                  className: n.HtmlClassNames.webChatHeader,
                  style: { background: this.props.liveChatConfig.chatButtonColor },
                  role: n.HtmlAttributeNames.region
                },
                this.props.showIconAndTitle &&
                  React.createElement('div', {
                    className: n.HtmlClassNames.webChatHeaderIcon + ' ' + i,
                    style: { backgroundImage: 'url(' + t + ')' }
                  }),
                this.props.showIconAndTitle &&
                  React.createElement(
                    'div',
                    { className: n.HtmlClassNames.webChatHeaderTitle, id: n.HtmlIdNames.webChatHeaderTitle },
                    this.props.liveChatConfig.chatButtonTitle
                  ),
                React.createElement(
                  'div',
                  { className: n.HtmlClassNames.webChatHeaderButtonGroup },
                  this.props.showMinimizeButton &&
                    React.createElement(
                      'div',
                      {
                        id: n.HtmlIdNames.webChatHeaderMinimizeButton,
                        className: n.HtmlClassNames.webChatHeaderMinimizeButton,
                        tabIndex: 0,
                        role: n.HtmlAttributeNames.button,
                        onClick: this.props.onMinimize.bind(this),
                        onKeyDown: this.keyHandlerMinimize.bind(this)
                      },
                      React.createElement(
                        'div',
                        {
                          class: n.HtmlClassNames.webChatHeaderButtonTitle,
                          title: this.props.locale.MINIMIZE_BUTTON_LABEL
                        },
                        this.props.locale.MINIMIZE_BUTTON_LABEL
                      )
                    ),
                  this.props.showCloseButton &&
                    React.createElement(
                      'div',
                      {
                        id: n.HtmlIdNames.webChatHeaderCloseButton,
                        className: n.HtmlClassNames.webChatHeaderCloseButton,
                        tabIndex: 0,
                        role: n.HtmlAttributeNames.button,
                        onClick: this.props.onClose.bind(this),
                        onKeyDown: this.keyHandlerClose.bind(this)
                      },
                      React.createElement(
                        'div',
                        {
                          class: n.HtmlClassNames.webChatHeaderButtonTitle,
                          title: this.props.locale.CLOSE_BUTTON_LABEL
                        },
                        this.props.locale.CLOSE_BUTTON_LABEL
                      )
                    )
                )
              );
            }),
            (i.prototype.keyHandlerMinimize = function (t) {
              (t.keyCode === n.Constants.KeyCodes.KEY_ENTER || t.keyCode === n.Constants.KeyCodes.KEY_SPACE) &&
                this.props.onMinimize();
            }),
            (i.prototype.keyHandlerClose = function (t) {
              (t.keyCode === n.Constants.KeyCodes.KEY_ENTER || t.keyCode === n.Constants.KeyCodes.KEY_SPACE) &&
                this.props.onClose();
            }),
            i
          );
        })(React.Component);
        n.Header = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        function i() {
          var i = document.createElement(n.Constants.HTMLConstants.div);
          i.id = n.HtmlIdNames.MSLiveChatWidget;
          document.getElementsByTagName(n.Constants.HTMLConstants.body)[0].appendChild(i);
          n.Render.ReactRender(React.createElement(t, null), i);
        }
        var t = (function (t) {
          function i(n) {
            return t.call(this, n) || this;
          }
          return (
            __extends(i, t),
            (i.prototype.componentDidMount = function () {
              this.bindFunc(
                this.refs.chatRef.state.handleChatButtonClick.bind(this),
                this.refs.chatRef.state.startProactiveChat.bind(this)
              );
            }),
            (i.prototype.render = function () {
              return React.createElement(
                'div',
                {
                  className: n.HtmlClassNames.chatRootReactClassName,
                  id: n.HtmlIdNames.chatRootReactId,
                  dir: n.Util.getLocaleDirection(n.Loader.liveChatConfig.chatWidgetLocaleLCID)
                },
                React.createElement(n.ChatContainer, {
                  ref: 'chatRef',
                  liveChatConfig: n.Loader.liveChatConfig,
                  locale: n.Loader.Locale
                })
              );
            }),
            (i.prototype.bindFunc = function (n, t) {
              i.handleChatButtonClick = n;
              i.startProactiveChat = t;
            }),
            i
          );
        })(React.Component);
        n.ChatRootReact = t;
        n.renderMain = i;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        n.DIRECT_LINE_CONNECT_FULFILLED = 'DIRECT_LINE/CONNECT_FULFILLED';
        n.DIRECT_LINE_CONNECT = 'DIRECT_LINE/CONNECT';
        n.DIRECT_LINE_CONNECT_PENDING = 'DIRECT_LINE/CONNECT_PENDING';
        n.DIRECT_LINE_UPDATE_CONNECTION_STATUS = 'DIRECT_LINE/UPDATE_CONNECTION_STATUS';
        n.DIRECT_LINE_CONNECT_FULFILLING = 'DIRECT_LINE/CONNECT_FULFILLING';
        n.DIRECT_LINE_POST_ACTIVITY = 'DIRECT_LINE/POST_ACTIVITY';
        n.DIRECT_LINE_POST_ACTIVITY_PENDING = 'DIRECT_LINE/POST_ACTIVITY_PENDING';
        n.DIRECT_LINE_POST_ACTIVITY_FULFILLED = 'DIRECT_LINE/POST_ACTIVITY_FULFILLED';
        n.DIRECT_LINE_INCOMING_ACTIVITY = 'DIRECT_LINE/INCOMING_ACTIVITY';
        n.WEB_CHAT_SET_LANGUAGE = 'WEB_CHAT/SET_LANGUAGE';
        n.WEB_CHAT_SEND_MESSAGE = 'WEB_CHAT/SEND_MESSAGE';
        n.WEB_CHAT_SET_SEND_TIMEOUT = 'WEB_CHAT/SET_SEND_TIMEOUT';
        n.WEB_CHAT_SET_SEND_TYPING_INDICATOR = 'WEB_CHAT/SET_SEND_TYPING_INDICATOR';
        n.WEB_CHAT_SET_SUGGESTED_ACTIONS = 'WEB_CHAT/SET_SUGGESTED_ACTIONS';
        n.WEB_CHAT_STOP_DICTATE = 'WEB_CHAT/STOP_DICTATE';
        n.WEB_CHAT_STOP_SPEAKING = 'WEB_CHAT/STOP_SPEAKING';
        n.WEB_CHAT_SEND_EVENT = 'WEB_CHAT/SEND_EVENT';
        n.WEB_CHAT_SET_NOTIFICATION = 'WEB_CHAT/SET_NOTIFICATION';
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        function t() {
          return function () {
            return function (t) {
              return function (i) {
                var f = i.activity,
                  a = f.channelData.tags,
                  s = f.from,
                  v = s.name,
                  y = s.role,
                  p = f.timestamp,
                  r = i.sendState,
                  w = i.sameTimestampGroup,
                  h = a,
                  c = v,
                  b = y,
                  k = p,
                  e = w,
                  u;
                if (i[n.WebChatMiddlewareConstants.nextVisibleActivity]) {
                  var o = i.nextVisibleActivity,
                    d = o.channelData.tags,
                    l = o.from,
                    g = l.name,
                    nt = l.role,
                    tt = o.timestamp,
                    et = d,
                    it = g,
                    ot = nt,
                    rt = tt,
                    ut = Date.parse(k),
                    ft = Date.parse(rt);
                  (c !== it || ft - ut > n.WebChatMiddlewareConstants.timeBetweenTimestampGroups) && (e = !1);
                }
                if ((!h || !h.includes(n.Constants.SystemMessageTag)) && (!e || r !== n.SendStatus.Sent))
                  return (
                    (u = n.Util.getLocaleDirection(n.Loader.liveChatConfig.chatWidgetLocaleLCID)),
                    React.createElement(
                      'span',
                      { className: n.HtmlClassNames.oclcwWebChatActivityStatusTimestamp },
                      r === n.SendStatus.Sending &&
                        React.createElement(n.SendingTimestamp, { next: t, args: i, dir: u }),
                      r === n.SendStatus.SendFailed &&
                        React.createElement(n.NotDeliveredTimestamp, { next: t, args: i, dir: u }),
                      r === n.SendStatus.Sent &&
                        React.createElement(n.DeliveredTimestamp, {
                          next: t,
                          args: i,
                          dir: u,
                          role: b,
                          name: c,
                          sameTimestampGroupTemp: e
                        })
                    )
                  );
              };
            };
          };
        }
        n.createActivityStatusMiddleware = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        function t() {
          return function () {
            return function (t) {
              return function (r) {
                if (r.activity) {
                  if (
                    r.activity.channelData &&
                    r.activity.channelData.tags &&
                    r.activity.channelData.tags.includes(n.Constants.SystemMessageTag)
                  )
                    return i(t, r);
                  if (
                    !n.Util.isNullOrEmptyString(r.activity.text) &&
                    r.activity.type === n.WebChatMiddlewareConstants.message &&
                    r.activity.from &&
                    r.activity.from.role &&
                    r.activity.from.role !== n.WebChatMiddlewareConstants.user
                  )
                    return function (i) {
                      return React.createElement(
                        'div',
                        { className: n.WebChatMiddlewareConstants.receivedMessageClassName },
                        t(r)(i)
                      );
                    };
                }
                return t(r);
              };
            };
          };
        }
        function i(t, i) {
          return i.nextVisibleActivity &&
            i.nextVisibleActivity.channelData &&
            i.nextVisibleActivity.channelData.clientmessageid &&
            i.nextVisibleActivity.channelData.clientmessageid === i.activity.channelData.clientmessageid
            ? function () {
                return !1;
              }
            : function (r) {
                return React.createElement(
                  'div',
                  { key: i.activity.id, className: n.HtmlClassNames.webChatSystemMessage },
                  t(i)(r)
                );
              };
        }
        n.createActivityMiddleware = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        function i(n, t) {
          var u = n.activity,
            f = n.attachment,
            i = Object.assign({}, f),
            e,
            r;
          return (
            (i.contentType = t.contentType),
            (i.thumbnailUrl = t.thumbnailUrl),
            (e = u.attachments.map(function (n) {
              return n === f ? i : n;
            })),
            (r = Object.assign({}, u)),
            (r.attachments = e),
            { activity: r, attachment: i }
          );
        }
        function f() {
          var r = n.Util.getLocaleDirection(n.Loader.liveChatConfig.chatWidgetLocaleLCID);
          return function () {
            return function (u) {
              return function (f) {
                var h = f.activity.attachments,
                  e = f.attachment,
                  o;
                if (!h || !h.length || !e) return u(f);
                var c = e || { content: '', contentType: '' },
                  a = c.content,
                  v = c.contentType,
                  y = (a || { type: '' }).type;
                if (
                  y === n.WebChatMiddlewareConstants.adaptiveCard ||
                  n.Constants.supportedAdaptiveCardContentTypes.indexOf(v) >= 0
                )
                  return React.createElement(
                    'div',
                    { className: n.WebChatMiddlewareConstants.adaptiveCardAttachmentClassName },
                    u(f)
                  );
                f.activity.channelData && f.activity.channelData.middlewareData
                  ? (e.contentUrl = f.activity.channelData.middlewareData[e.name])
                  : e.tempContentUrl && (e.contentUrl = e.tempContentUrl);
                var l = e.name.substring(e.name.lastIndexOf('.') + 1, e.name.length) || e.name,
                  p = n.FileAttachmentIconManager.imageRegex.test(e.name),
                  s = n.FileAttachmentIconManager.getFileAttachmentIconData(l, r);
                return p
                  ? ((o = i(f, { contentType: n.MimeTypes.UnknownFileType, thumbnailUrl: undefined })),
                    React.createElement(t, { iconData: s, imageCard: f, textCard: o, renderer: u }))
                  : l === 'txt'
                  ? ((o = i(f, { contentType: n.MimeTypes.UnknownFileType, thumbnailUrl: undefined })),
                    React.createElement(t, { iconData: s, textCard: o, renderer: u }))
                  : React.createElement(t, { iconData: s, textCard: f, renderer: u });
              };
            };
          };
        }
        var t = function (t) {
            var s = t.name,
              f = t.iconData,
              i = t.imageCard,
              e = t.textCard,
              o = t.renderer;
            return React.createElement(
              'div',
              { dir: n.Util.getLocaleDirection(n.Loader.liveChatConfig.chatWidgetLocaleLCID) },
              i && o(i),
              i && React.createElement('hr', { className: n.HtmlClassNames.webChatAttachmentDivider }),
              React.createElement(r, null, React.createElement(u, { src: f.icon, style: f.attachmentStyle }), e && o(e))
            );
          },
          r = function (t) {
            return React.createElement('div', { className: n.HtmlClassNames.webChatAttachment }, t.children);
          },
          u = function (t) {
            var i = t.src,
              r = t.style;
            return React.createElement(
              'div',
              { style: r },
              i ? i : n.FileAttachmentIconManager.getFileAttachmentIconData('txt').icon
            );
          };
        n.createAttachmentMiddleware = f;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        function t() {
          return function () {
            return function () {
              return function (t) {
                var i = t.activity,
                  r = i.channelData.tags,
                  f = i.from.name,
                  u = t.fromUser;
                return n.Util.isNullOrUndefined(u) || u || (r && r.includes(n.Constants.SystemMessageTag))
                  ? !1
                  : function () {
                      return React.createElement(
                        'div',
                        {
                          className: n.HtmlClassNames.webChatAvatar,
                          style: { background: n.Loader.liveChatConfig.chatButtonColor }
                        },
                        React.createElement(
                          'p',
                          { className: n.HtmlClassNames.webChatAvatarInitials },
                          ' ',
                          n.Utility.getIconText(f),
                          ' '
                        )
                      );
                    };
              };
            };
          };
        }
        n.createAvatarMiddleware = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.prototype.applicable = function (t) {
              var i = t.payload.text;
              return (
                n.Util.isMaskingforCustomer(n.Bootstrapper.lcConfig.maskingInfo) &&
                i &&
                t.type === n.WEB_CHAT_SEND_MESSAGE
              );
            }),
            (t.prototype.apply = function (n) {
              var t = this.applyDataMasking(n);
              return { dispatchAction: null, nextAction: t };
            }),
            (t.prototype.applyDataMasking = function (t) {
              var i, r, e, u, o;
              try {
                if (((i = t.payload.text), (r = n.Bootstrapper.lcConfig.maskingInfo.dataMaskingRules), r)) {
                  for (e in r)
                    if (((u = r[e]), u))
                      for (var s = new RegExp(u, 'g'), f = void 0; (f = s.exec(i)); )
                        (o = f[0].replace(/./g, '#')), (i = i.replace(f[0], o));
                  t.payload.text = i;
                } else console.error('Unable to load masking rules! ');
              } catch (h) {
                console.error('Failed to apply data masking: ', h);
              }
              return t;
            }),
            t
          );
        })();
        (n.DataMaskingMiddleware = t),
          (function () {
            window.addEventListener('StoreFactoryReady', function () {
              n.StoreFactory.getInstance().isSubscribed(n.Constants.DataMaskingMiddlewareId) ||
                n.StoreFactory.getInstance().subscribe(n.Constants.DataMaskingMiddlewareId, new t());
            });
          })();
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {
            this.MBtoBRatio = 1e6;
          }
          return (
            (t.prototype.applicable = function (t) {
              if (t.type === n.DIRECT_LINE_POST_ACTIVITY) {
                var r = t.payload.activity,
                  u = r.attachments,
                  i = r.channelData;
                return (
                  !n.Util.isNullOrUndefined(u) &&
                  !n.Util.isNullOrUndefined(i) &&
                  !n.Util.isNullOrUndefined(i.attachmentSizes) &&
                  u.length === i.attachmentSizes.length
                );
              }
              return !1;
            }),
            (t.prototype.apply = function (n) {
              var t = this.validateAttachment(n);
              return { dispatchAction: null, nextAction: t };
            }),
            (t.prototype.validateAttachment = function (t) {
              for (
                var r = t.payload.activity.attachments,
                  s = r,
                  u = t.payload.activity.channelData.attachmentSizes,
                  h = u,
                  i = 0;
                i < r.length;
                i++
              ) {
                var f = this.validateFileExtension(r[i]),
                  e = this.validateFileSize(u[i]),
                  o = parseInt(u[i]) == 0;
                (f && e && !o) ||
                  (n.NotificationHandler.notifyError(
                    n.NotificationScenarios.AttachmentError,
                    this.buildErrorMessage(r[i].name, f, e, o)
                  ),
                  r.splice(i, 1),
                  u.splice(i, 1),
                  i--);
              }
              return t.payload.activity.attachments.length > 0 ? t : { type: '', payload: null };
            }),
            (t.prototype.validateFileExtension = function (t) {
              var i, r, u, f;
              return n.Loader.liveChatConfig.fileExtensions
                ? ((i = t.name.toLowerCase()), (r = i.lastIndexOf('.')), !r)
                  ? !1
                  : ((u = i.substring(r)),
                    (f = n.Loader.liveChatConfig.fileExtensions.toLowerCase().split(',')),
                    f.indexOf(u) > -1)
                : !0;
            }),
            (t.prototype.validateFileSize = function (t) {
              return (
                n.Loader.liveChatConfig.fileSize &&
                parseInt(n.Loader.liveChatConfig.fileSize) * this.MBtoBRatio > parseInt(t)
              );
            }),
            (t.prototype.buildErrorMessage = function (t, i, r, u) {
              return !t || !n.Loader.liveChatConfig || !n.Loader.liveChatConfig.fileSize
                ? n.Loader.Locale.BANNER_FILE_NULL_ERROR
                : i || r
                ? r
                  ? i
                    ? u
                      ? n.Loader.Locale.BANNER_FILE_IS_EMPTY_ERROR
                      : n.Loader.Locale.BANNER_ERROR_MESSAGE
                    : this.getFileExtensionErrorMessage(t)
                  : this.getFileSizeErrorMessage()
                : this.getFileSizeAndFileExtensionErrorMessage(t);
            }),
            (t.prototype.getFileSizeAndFileExtensionErrorMessage = function (t) {
              var r = t.lastIndexOf('.'),
                i,
                u;
              return (
                r < 0
                  ? (i = n.Loader.Locale.BANNER_FILE_SIZE_WITHOUT_EXTENSION_ERROR)
                  : ((u = t.substring(r)),
                    (i = n.Loader.Locale.BANNER_FILE_SIZE_EXTENSION_ERROR),
                    (i = i.replace('{1}', u))),
                i.replace('{0}', n.Loader.liveChatConfig.fileSize)
              );
            }),
            (t.prototype.getFileExtensionErrorMessage = function (t) {
              var i = t.lastIndexOf('.'),
                r;
              return i < 0
                ? n.Loader.Locale.BANNER_FILE_WITHOUT_EXTENSION
                : ((r = t.substring(i)), n.Loader.Locale.BANNER_FILE_EXTENSION_ERROR.replace('{0}', r));
            }),
            (t.prototype.getFileSizeErrorMessage = function () {
              return n.Loader.Locale.BANNER_FILE_SIZE_ERROR.replace('{0}', n.Loader.liveChatConfig.fileSize);
            }),
            t
          );
        })();
        (n.AttachmentUploadValidatorMiddleware = t),
          (function () {
            window.addEventListener('StoreFactoryReady', function () {
              n.StoreFactory.getInstance().isSubscribed(n.Constants.AttachmentUploadValidatorMiddlewareId) ||
                n.StoreFactory.getInstance().subscribe(n.Constants.AttachmentUploadValidatorMiddlewareId, new t());
            });
          })();
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.prototype.processANode = function (t) {
              for (var u = t.getElementsByTagName(n.HtmlAttributeNames.aTagName), i, r = 0; r < u.length; r++)
                ((i = u[r]), i && i.tagName && i.tagName.toLowerCase() === n.HtmlAttributeNames.aTagName && i.href) &&
                  (!i.target || (i.target && i.target !== n.WebChatMiddlewareConstants.blank)) &&
                  (i.target = n.WebChatMiddlewareConstants.blank);
            }),
            (t.prototype.applicable = function (t) {
              var r, f, u, i;
              if (t && t.type && t.type === n.DIRECT_LINE_INCOMING_ACTIVITY) {
                r = '';
                try {
                  return ((r = t.payload.activity.text), !r)
                    ? !1
                    : ((f = this.convertTextToHtmlNode(r)),
                      (u = f.getElementsByTagName(n.HtmlAttributeNames.aTagName)),
                      !!u && u.length && u.length > 0);
                } catch (e) {
                  i = 'Failed to validate action.';
                  try {
                    i = i + JSON.stringify(t);
                  } catch (e) {
                    i + ' (unable to stringify action)';
                  }
                  console.error(i);
                  n.TelemetryClient.error({
                    Event: i,
                    ActionType: n.TelemetryEvent.ProcessingHTMLTextMiddlewareFailed,
                    ExceptionDetails: e
                  });
                }
              }
              return !1;
            }),
            (t.prototype.apply = function (t) {
              var u = t,
                f,
                r,
                i;
              try {
                f = t.payload.activity.text;
                r = this.convertTextToHtmlNode(f);
                r &&
                  (this.processANode(r),
                  (u = window.simpleUpdateIn(
                    t,
                    [
                      n.WebChatMiddlewareConstants.payload,
                      n.WebChatMiddlewareConstants.activity,
                      n.WebChatMiddlewareConstants.text
                    ],
                    function () {
                      return r.innerHTML;
                    }
                  )));
              } catch (e) {
                i = 'Failed to apply action: ';
                try {
                  i = i + JSON.stringify(t);
                } catch (e) {
                  i + ' (unable to stringify action)';
                }
                console.error(i);
                n.TelemetryClient.error({
                  Event: i,
                  ActionType: n.TelemetryEvent.ProcessingHTMLTextMiddlewareFailed,
                  ExceptionDetails: e
                });
              } finally {
                return { dispatchAction: null, nextAction: u };
              }
            }),
            (t.prototype.convertTextToHtmlNode = function (t) {
              var i, r;
              if (!t) return '';
              i = document.createElement(n.HtmlAttributeNames.div);
              try {
                t = window.DOMPurify.sanitize(t);
                i.innerHTML = t;
              } catch (u) {
                r = 'Failed to purify and set innertHTML with text: ' + t;
                console.error(r);
                n.TelemetryClient.error({
                  Event: r,
                  ActionType: n.TelemetryEvent.ProcessingHTMLTextMiddlewareFailed,
                  ExceptionDetails: u
                });
              }
              return i;
            }),
            t
          );
        })();
        (n.HTMLTextMiddleware = t),
          (function () {
            window.addEventListener('StoreFactoryReady', function () {
              n.StoreFactory.getInstance().isSubscribed(n.Constants.HTMLTextMiddlewareId) ||
                n.StoreFactory.getInstance().subscribe(n.Constants.HTMLTextMiddlewareId, new t());
            });
          })();
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        function t() {
          return function () {
            return function () {
              return function (t) {
                var r = t.activeTyping,
                  o = t.visible,
                  u,
                  e,
                  f;
                if (!r || !o) return null;
                for (
                  r = Object.keys(r).map(function (n) {
                    return r[n];
                  }),
                    u = 0;
                  u < r.length;
                  u++
                )
                  r[u].role && r[u].role === n.DirectLineSenderRole.User && (r.splice(u, 1), u--);
                return (
                  (e = i(r)),
                  (f = n.Loader.liveChatConfig.chatButtonColor),
                  r &&
                    r.length !== 0 &&
                    React.createElement(
                      'div',
                      { className: n.HtmlClassNames.webChatTypingIndicator },
                      React.createElement('div', {
                        className: n.HtmlClassNames.webChatTypingIndicatorBubble,
                        style: { background: f }
                      }),
                      React.createElement('div', {
                        className: n.HtmlClassNames.webChatTypingIndicatorBubble,
                        style: { background: f }
                      }),
                      React.createElement('div', {
                        className: n.HtmlClassNames.webChatTypingIndicatorBubble,
                        style: { background: f }
                      }),
                      React.createElement('div', null, ' ', e, ' ')
                    )
                );
              };
            };
          };
        }
        function i(t) {
          if (t && t.length !== 0) {
            if (t.length === 1) return n.Loader.Locale.TYPING_INDICATOR_ONE.replace('{0}', t[0].name);
            if (t.length === 2) {
              var i = t[0].name,
                r = t[1].name;
              return n.Loader.Locale.TYPING_INDICATOR_TWO.replace('{0}', i).replace('{1}', r);
            }
            return n.Loader.Locale.TYPING_INDICATOR_MULTIPLE.replace('{0}', t.length);
          }
          return '';
        }
        n.createTypingIndicatorMiddleware = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function n() {}
          return (
            (n.Connection = 'connection'),
            (n.DownloadTranscriptError = 'download transcript'),
            (n.EmailTranscriptError = 'email transcript'),
            (n.AttachmentError = 'attachment'),
            (n.InternetConnection = 'internet connection'),
            n
          );
        })();
        n.NotificationScenarios = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.notify = function (t, i, r) {
              n.Loader.store &&
                n.Loader.store.dispatch({
                  type: n.WEB_CHAT_SET_NOTIFICATION,
                  payload: { id: t, level: i, message: r }
                });
            }),
            (t.notifyError = function (t, i) {
              this.notify(t, n.NotificationLevel.Error, i);
            }),
            (t.notifyWarning = function (t, i) {
              this.notify(t, n.NotificationLevel.Warning, i);
            }),
            (t.notifyInfo = function (t, i) {
              this.notify(t, n.NotificationLevel.Info, i);
            }),
            (t.notifySuccess = function (t, i) {
              this.notify(t, n.NotificationLevel.Success, i);
            }),
            (t.notifyWithLevel = function (n, t, i) {
              i ? this.notify(n, i, t) : this.notifyInfo(n, t);
            }),
            t
          );
        })();
        n.NotificationHandler = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            return t.call(this) || this;
          }
          return (
            __extends(i, t),
            (i.prototype.componentDidMount = function () {
              this.addListeners(window);
              this.addListenersForParent();
            }),
            (i.prototype.componentWillUnmount = function () {
              this.removeListeners(window);
            }),
            (i.prototype.addListenersForParent = function () {
              window.addEventListener('message', function (t) {
                if (t.data)
                  try {
                    var i = t.data,
                      r = i.messageName;
                    switch (r) {
                      case n.HtmlEventNames.handleControlSlash:
                        n.WebChatSendBoxUtils.setFocus();
                    }
                  } catch (u) {
                    console.error(u);
                  }
              });
            }),
            (i.prototype.addListeners = function (t) {
              t && t.addEventListener && t.addEventListener(n.HtmlEventNames.keydown, this.handleKeydown);
            }),
            (i.prototype.removeListeners = function (t) {
              t && t.addEventListener && t.removeEventListener(n.HtmlEventNames.keydown, this.handleKeydown);
            }),
            (i.prototype.handleKeydown = function (t) {
              t.ctrlKey && t.keyCode === n.Constants.KeyCodes.KEY_SLASH && n.WebChatSendBoxUtils.setFocus();
            }),
            (i.prototype.render = function () {
              return null;
            }),
            i
          );
        })(React.Component);
        n.WebChatEventListener = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = 'textarea[data-id="webchat-sendbox-input"]',
          i = (function () {
            function n() {}
            return (
              (n.getSendBox = function () {
                return document.querySelector(t);
              }),
              (n.setFocus = function () {
                var t = n.getSendBox();
                t && t.offsetParent && t.focus();
              }),
              n
            );
          })();
        n.WebChatSendBoxUtils = i;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {}));
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
(function (n) {
  var t;
  (function (n) {
    var t;
    (function (n) {
      function t() {
        return function (t) {
          var u = t.data,
            f = t.dimensions,
            e = t.duration,
            o = t.error,
            s = t.fatal,
            i = t.level,
            h = t.Event,
            c = t.type,
            r = i ? i.toUpperCase() : '';
          switch (r) {
            case n.LogLevel.DEBUG:
              n.TelemetryClient.debug(t, n.ScenarioType.WEBCHAT);
              break;
            case n.LogLevel.WARNING:
              n.TelemetryClient.warning(t, n.ScenarioType.WEBCHAT);
              break;
            case n.LogLevel.ERROR:
              n.TelemetryClient.error(t, n.ScenarioType.WEBCHAT);
              break;
            case n.LogLevel.INFO:
            default:
              n.TelemetryClient.info(t, n.ScenarioType.WEBCHAT);
          }
        };
      }
      n.createWebChatTelemetry = t;
    })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
  })((t = n.Omnichannel || (n.Omnichannel = {})));
})(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t;
        (function (n) {
          n.Success = 'success';
          n.Info = 'info';
          n.Warning = 'warn';
          n.Error = 'error';
        })((t = n.NotificationLevel || (n.NotificationLevel = {})));
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {
            this.middlewares = {};
          }
          return (
            (t.prototype.setWebChat = function (n) {
              this.webChat = n;
              this.ready();
            }),
            (t.prototype.ready = function () {
              var n = new Event('StoreFactoryReady');
              window.dispatchEvent(n);
            }),
            (t.getInstance = function () {
              return this._instance || (this._instance = new t()), this._instance;
            }),
            (t.prototype.isSubscribed = function (n) {
              return n in this.middlewares;
            }),
            (t.prototype.subscribe = function (n, t) {
              this.middlewares[n] = t;
            }),
            (t.prototype.createWebChatStore = function () {
              var t = this;
              if (!this.webChat) throw new TypeError('WebChat is NOT configured!');
              return this.webChat.createStore({}, function (i) {
                var r = i.dispatch;
                return function (i) {
                  return function (u) {
                    var o, e, h, s, f;
                    if (
                      (u.type === n.DIRECT_LINE_POST_ACTIVITY &&
                        ((o = u.payload.activity),
                        (o.from && o.from.role !== n.Constants.UserMessageTag) ||
                          (u = __assign({}, u, {
                            payload: __assign({}, u.payload, {
                              activity: __assign({}, u.payload.activity, { textFormat: n.Constants.Markdown })
                            })
                          }))),
                      (e = u),
                      u && u.payload)
                    )
                      for (h in t.middlewares)
                        (s = t.middlewares[h]),
                          s.applicable(e) &&
                            ((f = s.apply(e)),
                            f && (f.dispatchAction && r(f.dispatchAction), f.nextAction && (e = f.nextAction)));
                    return i(e);
                  };
                };
              });
            }),
            t
          );
        })();
        n.StoreFactory = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        n.DeliveredTimestamp = function (t) {
          var o = t.next,
            r = t.args,
            u = t.dir,
            f = t.role,
            s = t.name,
            h = t.sameTimestampGroupTemp,
            e = n.Loader.react,
            c = e.useRef,
            l = e.useEffect,
            i = c(),
            a = r.activity.timestamp;
          return (
            l(
              function () {
                i.current[n.WebChatMiddlewareConstants.childNodes][1].innerText = n.Utility.getTimestampHourMinute(a);
              },
              [i]
            ),
            React.createElement(
              'div',
              { className: n.HtmlClassNames.oclcwWebChatActivityStatusTimestampContent, dir: u },
              f === n.DirectLineSenderRole.Bot &&
                React.createElement(
                  React.Fragment,
                  null,
                  React.createElement('span', { 'aria-hidden': 'false' }, s),
                  React.createElement('span', null, ' - ')
                ),
              React.createElement('span', { ref: i, dir: u }, ' ', o(__assign({}, r, { sameTimestampGroup: h }))),
              f === n.DirectLineSenderRole.User &&
                React.createElement(
                  React.Fragment,
                  null,
                  React.createElement(
                    'span',
                    { className: n.HtmlClassNames.oclcwWebChatActivityStatusTimestampContent },
                    ' - '
                  ),
                  React.createElement('span', { 'aria-hidden': 'false' }, n.Loader.Locale.MESSAGE_DELIVERED)
                )
            )
          );
        };
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        n.SendingTimestamp = function (t) {
          var r = t.args,
            f = t.next,
            e = t.dir,
            u = n.Loader.react,
            o = u.useRef,
            s = u.useEffect,
            i = o(),
            h = r.activity.timestamp;
          return (
            s(
              function () {
                i.current[n.WebChatMiddlewareConstants.childNodes][1].innerText = n.Utility.getTimestampHourMinute(h);
              },
              [i]
            ),
            React.createElement(
              'div',
              { className: n.HtmlClassNames.oclcwWebChatActivityStatusTimestampContent },
              React.createElement(
                'span',
                { ref: i },
                ' ',
                f(__assign({}, r, { sendState: n.SendStatus.Sent, sameTimestampGroup: !1 }))
              ),
              React.createElement(
                'span',
                { dir: e },
                React.createElement('span', null, '  ', ' - ', ' '),
                React.createElement('span', null, '  ', n.Loader.Locale.MESSAGE_SENT, ' ')
              )
            )
          );
        };
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var s = (function () {
            function n() {}
            return (
              (n.chatRootReactClassName = 'chat-root-react'),
              (n.webChat = 'web-chat'),
              (n.webChatPlaceholder = 'web-chat-placeholder'),
              (n.webChatDimLayer = 'web-chat-dim-layer'),
              (n.pageContainer = 'oclcw-page-container'),
              (n.errorText = 'oclcw-error-text'),
              (n.pushButton = 'button.ac-pushButton'),
              (n.errorContainer = 'oclcw-error-container'),
              (n.webChatSystemMessage = 'oclcw-web-chat-system-message'),
              (n.webChatAttachment = 'oclcw-web-chat-attachment'),
              (n.webChatAttachmentDivider = 'oclcw-web-chat-attachment-divider'),
              (n.actionBar = 'oclcw-actionBar'),
              (n.actionBarActive = 'oclcw-actionBar-active'),
              (n.actionBarInactive = 'oclcw-actionBar-inactive'),
              (n.actionBarIconContainer = 'icon-container'),
              (n.actionBarIconButton = 'icon-button'),
              (n.actionBarIconImage = 'icon-image'),
              (n.actionBarIconsContainer = 'oclcw-actionBar-icons-container'),
              (n.emailTranscriptDialogContainer = 'oclcw-emailTranscriptDialog-container'),
              (n.emailTranscriptDialog = 'oclcw-emailTranscript-dialog'),
              (n.emailTranscriptDialogContentContainer = 'oclcw-emailTranscriptDialog-contentContainer'),
              (n.emailTranscriptDialogTitle = 'oclcw-emailTranscriptDialog-title'),
              (n.emailTranscriptDialogTextContent = 'oclcw-emailTranscriptDialog-textContent'),
              (n.emailTranscriptDialogTextFieldContainer = 'oclcw-emailTranscriptDialog-textField-container'),
              (n.emailTranscriptDialogTextField = 'oclcw-emailTranscriptDialog-textField'),
              (n.emailTranscriptDialogInvalidEmail = 'oclcw-invalidEmail'),
              (n.emailTranscriptDialogButtons = 'oclcw-emailTranscriptDialog-buttons'),
              (n.emailTranscriptDialogActionButtonSend = 'oclcw-emailTranscriptDialog-actionButton_send'),
              (n.emailTranscriptDialogActionButtonCancel = 'oclcw-emailTranscriptDialog-actionButton_cancel'),
              (n.chat = 'chat-button'),
              (n.notificationIcon = 'notification-icon'),
              (n.loadingScreen = 'loading-screen'),
              (n.loadingMessage = 'loading-message'),
              (n.chatButton = 'oclcw-chatbutton'),
              (n.oclcwt1 = 'oclcw-t1'),
              (n.oclcwt2 = 'oclcw-t2'),
              (n.chatIconTitle = 'oclcw-chatbutton-title'),
              (n.chatIcon = 'oclcw-chaticon'),
              (n.chatIconContainer = 'oclcw-chaticon-container'),
              (n.webChatHeader = 'web-chat-header'),
              (n.headerActive = 'header-active'),
              (n.headerInactive = 'header-inactive'),
              (n.webChatHeaderIcon = 'web-chat-header-icon'),
              (n.webChatHeaderTitle = 'web-chat-header-title'),
              (n.webChatImageFile = 'web-chat-image-file'),
              (n.webChatHeaderButtonGroup = 'web-chat-header-button-group'),
              (n.webChatHeaderMinimizeButton = 'web-chat-header-minimizebutton'),
              (n.webChatHeaderCloseButton = 'web-chat-header-closebutton'),
              (n.webChatCloseConversationConfirm = 'web-chat-close-conversation-confirm'),
              (n.webChatCloseConversationContentContainer = 'web-chat-close-conversation-content-container'),
              (n.webChatCloseConversationConfirmTitle = 'web-chat-close-conversation-confirm-title'),
              (n.webChatCloseConversationConfirmSubtitle = 'web-chat-close-conversation-confirm-subtitle'),
              (n.webChatCloseConversationConfirmButtonContainer =
                'web-chat-close-conversation-confirm-button-container'),
              (n.webChatCloseConversationConfirmButtonConfirm = 'web-chat-close-conversation-confirm-button-confirm'),
              (n.webChatCloseConversationConfirmButtonCancel = 'web-chat-close-conversation-confirm-button-cancel'),
              (n.webChatHeaderButtonTitle = 'web-chat-header-button-title'),
              (n.callContainer = 'call-container'),
              (n.incomingCallPopup = 'incoming-call-popup'),
              (n.incomingCallButtonGroup = 'incoming-call-button-group'),
              (n.callRejectButton = 'call-reject-button'),
              (n.callAcceptButton = 'call-accept-button'),
              (n.toggleAudio = 'microphone-button'),
              (n.videoCallAcceptButton = 'video-call-accept-button'),
              (n.videoOn = 'video-call-on-button'),
              (n.videoOff = 'video-call-off-button'),
              (n.voiceOn = 'voice-call-on-button'),
              (n.voiceOff = 'voice-call-off-button'),
              (n.incomingCallMessage = 'incoming-call-message'),
              (n.callingContainer = 'calling-container'),
              (n.redBox = 'redbox'),
              (n.redCircle = 'redcircle'),
              (n.greenCircle = 'greencircle'),
              (n.noMargin = 'no-margin '),
              (n.incomingProactiveChatPageContainer = 'oclcw-incomingproactivechat-page-container'),
              (n.ipcpClose = 'oclcw-ipcp-close'),
              (n.ipcpWelcomMessageText = 'oclcw-ipcp-welcomemessage-text'),
              (n.ipcpAcceptButton = 'oclcw-ipcp-accept-button'),
              (n.ipcpAcceptButtonText = 'oclcw-ipcp-accept-button-text'),
              (n.ipcpBanner = 'oclcw-ipcp-banner'),
              (n.ipcpBannerText = 'oclcw-ipcp-banner-text'),
              (n.ipcpBannerTextRow1 = 'oclcw-ipcp-banner-text-row-1'),
              (n.ipcpBannerTextRow2 = 'oclcw-ipcp-banner-text-row-2'),
              (n.pageContainerWelcomePage = 'oclcw-page-container welcome-page'),
              (n.wpWelcomePage = 'oclcw-welcome-page'),
              (n.wpContainer = 'oclcw-wp-container'),
              (n.wpSubContainer = 'oclcw-wp-sub-container'),
              (n.wpLogo = 'oclcw-wp-logo'),
              (n.wpLogoInset = 'oclcw-wp-logo-inset'),
              (n.wpLogoWelcomeText = 'oclcw-wp-logo-welcome-text'),
              (n.wpMessage = 'oclcw-wp-msg'),
              (n.wpt1 = 't1'),
              (n.wpt2 = 't2'),
              (n.wpt3 = 't3'),
              (n.wpLogoAlertText = 'oclcw-wp-logo-alert-text'),
              (n.wpAlertMessage = 'oclcw-wp-alert-msg'),
              (n.wpLoading = 'oclcw-wp-loading'),
              (n.postChatPage = 'oclcw-postchat-page'),
              (n.cardContainer = 'oclcw-card-container'),
              (n.ppContainer = 'oclcw-pp-container'),
              (n.ppPostchatMainContainer = 'oclcw-pp-postchat-main-container'),
              (n.ppPostchatContainer = 'oclcw-pp-postchatcontainer card adaptive'),
              (n.preChatPage = 'oclcw-prechat-page'),
              (n.ppPrechatMainContainer = 'oclcw-pp-prechat-main-container'),
              (n.ppPrechatContainer = 'oclcw-pp-prechatcontainer oclcw-card-container card adaptive'),
              (n.oclcwWebChatActivityStatusTimestamp = 'oclcw-web-chat-activityStatus-timestamp'),
              (n.oclcwWebChatActivityStatusTimestampContent = 'oclcw-web-chat-activityStatus-timestampContent'),
              (n.oclcwWebChatActivityStatusTimestampFailed = 'oclcw-web-chat-activityStatus-timestampFailed'),
              (n.oclcwWebChatActivityStatusTimestampRetry = 'oclcw-web-chat-activityStatus-timestampRetry'),
              (n.content = 'content'),
              (n.webChatBubbleContent = 'webchat__bubble__content'),
              (n.webChatTypingIndicator = 'webchat__typingIndicator'),
              (n.webChatTypingIndicatorBubble = 'bubble'),
              (n.webChatAvatar = 'webchat__avatar'),
              (n.webChatAvatarInitials = 'webchat__avatar_initials'),
              n
            );
          })(),
          t,
          i,
          r,
          u,
          f,
          e,
          o;
        n.HtmlClassNames = s;
        t = (function () {
          function n() {}
          return (
            (n.MSLiveChatWidget = 'MSLiveChatWidget'),
            (n.chatPlaceHolder = 'chatPlaceHolder'),
            (n.chatPlaceholderWrapper = 'chatPlaceholderWrapper'),
            (n.surveyPlaceholderId = 'oclcw-survey-placeholder'),
            (n.chatRootReactId = 'chatRootReact'),
            (n.webChatRoot = 'web-chat-root'),
            (n.webChatRootDiv = 'web-chat-root-div'),
            (n.chat = 'chat'),
            (n.chatDimLayer = 'chatDimLayer'),
            (n.errorElementId = 'surveyFieldError'),
            (n.actionBar = 'oclcw-actionBar'),
            (n.actionBarIconsContainer = 'oclcw-actionBarIconsContainer'),
            (n.emailTranscriptDialogContainer = 'oclcw-emailTranscriptDialogContainer'),
            (n.emailTranscriptDialogTextField = 'oclcw-emailTranscriptDialogTextField'),
            (n.emailTranscriptButton = 'oclcw-actionBar-EmailTranscript-button'),
            (n.downloadTranscriptButton = 'oclcw-actionBar-DownloadTranscript-button'),
            (n.chatButtonContainer = 'oclw-chat'),
            (n.chatButton = 'oclcw-chatButton'),
            (n.notificationIcon = 'notificationIcon'),
            (n.loadingScreen = 'loadingScreen'),
            (n.webChatHeader = 'webChatHeader'),
            (n.webChatHeaderTitle = 'webChatHeaderTitle'),
            (n.webChatHeaderCloseButton = 'webChatHeaderCloseButton'),
            (n.webChatHeaderMinimizeButton = 'webChatHeaderMinimizeButton'),
            (n.webChatCloseConversationConfirm = 'webChatCloseConversationConfirm'),
            (n.webChatCloseConversationConfirmButtonConfirm = 'webChatCloseConversationConfirmButtonConfirm'),
            (n.incomingCallPopup = 'incomingCallPopup'),
            (n.callRejectButton = 'callRejectButton'),
            (n.callAcceptButton = 'callAcceptButton'),
            (n.videoCallAcceptButton = 'videoCallAcceptButton'),
            (n.incomingCallMessage = 'incomingCallMessage'),
            (n.microphoneButton = 'microphoneButton'),
            (n.toggleVideo = 'toggleVideo'),
            (n.toggleAudio = 'toggleAudio'),
            (n.callingContainer = 'calling-container'),
            (n.callContainer = 'call-container'),
            (n.currentCallBody = 'currentCall-body'),
            (n.remoteVideo = 'remoteVideo'),
            (n.selfVideo = 'selfVideo'),
            (n.currentCallActions = 'currentCall-actionicons'),
            (n.currentCallFooter = 'currentCall-footer'),
            (n.incomingProactiveChat = 'oclw-incomingproactivechat'),
            (n.ipcpIncomingProactiveChatAcceptButton = 'oclcw-ipcp-incomingproactivechat-accept-button'),
            (n.wpWelcomeText = 'oclcw-wp-welcome-text'),
            (n.wpLoadingText = 'oclcw-wp-loadingtext'),
            (n.wpAlertText = 'oclcw-wp-alert-text'),
            (n.MicrosoftOmnichannelLCWidgetChatIframePageId = 'Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window'),
            n
          );
        })();
        n.HtmlIdNames = t;
        i = (function () {
          function n() {}
          return (
            (n.resizeMSLcwIframe = 'resizeMSLcwIframe'),
            (n.repositionMSLcwIframe = 'repositionMSLcwIframe'),
            (n.webChatPanel = 'web_chat_panel'),
            (n.leftBottom = 'BottomLeft'),
            (n.rightBottom = 'BottomRight'),
            (n.proactiveChatPanel = 'proactive_chat_panel'),
            (n.startChatButton = 'start_chat_button'),
            (n.defaultClassName = 'web_chat_panel right_bottom'),
            n
          );
        })();
        n.IFrameValues = i;
        r = (function () {
          function n() {}
          return (
            (n.role = 'role'),
            (n.ariaLabel = 'aria-label'),
            (n.ariaDisabled = 'aria-disabled'),
            (n.form = 'form'),
            (n.ariaLabelledby = 'aria-labelledby'),
            (n.tabindex = 'tabindex'),
            (n.ariaRequired = 'aria-required'),
            (n.ariaDesribedby = 'aria-describedby'),
            (n.disabled = 'disabled'),
            (n.prechatContainer = 'oclcw-pp-prechatcontainer'),
            (n.download = 'download'),
            (n.href = 'href'),
            (n.false = 'false'),
            (n.true = 'true'),
            (n.region = 'region'),
            (n.button = 'button'),
            (n.input = 'Input'),
            (n.style = 'style'),
            (n.head = 'head'),
            (n.type = 'type'),
            (n.csstext = 'text/css'),
            (n.listItem = 'LI'),
            (n.unorderedList = 'UL'),
            (n.div = 'div'),
            (n.aTagName = 'a'),
            n
          );
        })();
        n.HtmlAttributeNames = r;
        u = (function () {
          function n() {}
          return (
            (n.keydown = 'keydown'),
            (n.click = 'click'),
            (n.keyup = 'keyup'),
            (n.keypress = 'keypress'),
            (n.unload = 'unload'),
            (n.handleControlSlash = 'handleControlSlash'),
            n
          );
        })();
        n.HtmlEventNames = u;
        f = (function () {
          function n() {}
          return (
            (n.adaptiveCardFont = 'Segoe UI, Helvetica Neue, sans-serif'),
            (n.invalidEmailBorder = '1px solid '),
            (n.webChatMarginBottomWithActionBar = 'calc(100% - 88px)'),
            (n.webChatMarginBottomWithoutActionBar = 'calc(100% - 68px)'),
            (n.webChatUserBubbleDefaultColor = 'White'),
            (n.webChatUserBubbleFailedColor = '#FAEDEC'),
            (n.style = 'style'),
            (n.height = 'height'),
            (n.webChatHeightWhenVoiceOrIncoming = 'height: calc(100% - 110px)'),
            (n.webChatHeightWhenVideoCall = 'height: calc(100% - 290px)'),
            (n.webChatHeightWhenNoCallingPopup = 'height: calc(100% - 50px)'),
            (n.voiceCallOrIncomingPopupHeight = 'height: 60px'),
            (n.videoCallDialogHeight = 'height: 240px'),
            (n.NoCallDialogHeight = 'height: 0px'),
            (n.activeActionBarHeight = 30),
            n
          );
        })();
        n.HtmlCssConstants = f;
        e = (function () {
          function n() {}
          return (
            (n.show = 'show'),
            (n.hide = 'hide'),
            (n.minimize = 'minimize'),
            (n.maximize = 'maximize'),
            (n.withVideo = 'withVideo'),
            (n.withoutVideo = 'withoutVideo'),
            n
          );
        })();
        n.HtmlCallingCssConstants = e;
        o = (function () {
          function n() {}
          return (
            (n.activity = 'activity'),
            (n.payload = 'payload'),
            (n.text = 'text'),
            (n.nextVisibleActivity = 'nextVisibleActivity'),
            (n.timeBetweenTimestampGroups = 3e5),
            (n.closest = 'closest'),
            (n.childNodes = 'childNodes'),
            (n.receivedMessageClassName = 'ms_lcw_webchat_received_message'),
            (n.adaptiveCardAttachmentClassName = 'ms_lcw_webchat_adaptive_card'),
            (n.message = 'message'),
            (n.user = 'user'),
            (n.adaptiveCard = 'AdaptiveCard'),
            (n.blank = '_blank'),
            n
          );
        })();
        n.WebChatMiddlewareConstants = o;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = this;
        n.NotDeliveredTimestamp = function (i) {
          var o = i.args,
            w = i.next,
            s = i.dir,
            u = n.Loader.react,
            b = u.useCallback,
            h = u.useRef,
            c = u.useEffect,
            l = n.Loader.webChat.hooks,
            k = l.usePostActivity,
            d = l.useFocusSendBox,
            f = h(),
            e = h(),
            a = d(),
            v = k(),
            r = o[n.WebChatMiddlewareConstants.activity],
            g = r.timestamp,
            y,
            p;
          return (
            c(
              function () {
                e.current[n.WebChatMiddlewareConstants.childNodes][1].innerText = n.Utility.getTimestampHourMinute(g);
              },
              [e]
            ),
            (y = b(
              function (n) {
                return __awaiter(t, void 0, void 0, function () {
                  return __generator(this, function (t) {
                    switch (t.label) {
                      case 0:
                        return p(n), (r.previousClientActivityID = r.channelData.clientActivityID), [4, v(r)];
                      case 1:
                        return t.sent(), a(), [2];
                    }
                  });
                });
              },
              [r, a, v]
            )),
            (p = function (t) {
              for (var i = t.target.parentElement; i.tagName != n.HtmlAttributeNames.listItem; )
                if (((i = i.parentElement), i.tagName == n.HtmlAttributeNames.unorderedList)) return;
              i.parentNode.removeChild(i);
            }),
            c(
              function () {
                n.Utility.setBubbleColorFromTimestamp(
                  f.current[n.WebChatMiddlewareConstants.closest]('.' + n.HtmlClassNames.content),
                  n.HtmlCssConstants.webChatUserBubbleFailedColor
                );
              },
              [f]
            ),
            React.createElement(
              'div',
              { ref: f, className: n.HtmlClassNames.oclcwWebChatActivityStatusTimestampContent },
              React.createElement(
                'span',
                { ref: e },
                ' ',
                w(__assign({}, o, { sendState: n.SendStatus.Sent, sameTimestampGroup: !1 }))
              ),
              React.createElement(
                'span',
                { dir: s },
                React.createElement('span', null, '  ', ' - ', ' '),
                React.createElement(
                  'span',
                  { className: n.HtmlClassNames.oclcwWebChatActivityStatusTimestampFailed },
                  '  ',
                  n.Loader.Locale.MESSAGE_NOT_DELIVERED,
                  ' '
                )
              ),
              React.createElement(
                'span',
                { onClick: y, dir: s },
                React.createElement('span', null, '  ', ' - ', ' '),
                React.createElement(
                  'span',
                  { className: n.HtmlClassNames.oclcwWebChatActivityStatusTimestampRetry },
                  '  ',
                  n.Loader.Locale.MESSAGE_RETRY,
                  ' '
                )
              )
            )
          );
        };
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            return t.call(this) || this;
          }
          return (
            __extends(i, t),
            (i.prototype.componentDidMount = function () {
              this.props.welcomePageDisplayStyle.minimizeButtonVisibility
                ? n.Utility.focusOnElement(n.HtmlIdNames.webChatHeaderMinimizeButton)
                : this.props.welcomePageDisplayStyle.closeButtonVisibility &&
                  n.Utility.focusOnElement(n.HtmlIdNames.webChatHeaderCloseButton);
              n.FrameHandler.setToDefaultSize(window);
            }),
            (i.prototype.render = function () {
              var t = this.props.liveChatConfig.chatButtonIconUrl ? this.props.liveChatConfig.chatButtonIconUrl : '',
                i = this.props.liveChatConfig.chatButtonIconUrl ? '' : n.HtmlClassNames.webChatImageFile;
              return React.createElement(
                'div',
                {
                  className: n.HtmlClassNames.pageContainerWelcomePage,
                  role: n.HtmlAttributeNames.region,
                  'aria-label': n.Loader.Locale.WELCOME_SCREEN_LANDMARK,
                  onKeyDown: this.onEscapeKeyDown.bind(this)
                },
                React.createElement(
                  'div',
                  {
                    className: n.HtmlClassNames.wpWelcomePage,
                    style: { backgroundColor: n.Loader.liveChatConfig.chatTitleColor },
                    'aria-labelledby': n.HtmlIdNames.wpWelcomeText + ' ' + n.HtmlIdNames.wpLoadingText
                  },
                  React.createElement(n.Header, {
                    liveChatConfig: this.props.liveChatConfig,
                    locale: this.props.locale,
                    onMinimize: this.props.onMinimize.bind(this),
                    onClose: this.props.onClose.bind(this),
                    showIconAndTitle: !1,
                    showMinimizeButton: this.props.welcomePageDisplayStyle.minimizeButtonVisibility,
                    showCloseButton: this.props.welcomePageDisplayStyle.closeButtonVisibility
                  }),
                  React.createElement(
                    'div',
                    { className: n.HtmlClassNames.wpContainer },
                    React.createElement(
                      'div',
                      { className: n.HtmlClassNames.wpSubContainer },
                      React.createElement(
                        'div',
                        { className: n.HtmlClassNames.wpLogo },
                        React.createElement(
                          'div',
                          { className: n.HtmlClassNames.wpLogoInset + ' ' + i },
                          React.createElement('img', { src: t })
                        )
                      ),
                      React.createElement(
                        'div',
                        {
                          id: n.HtmlIdNames.wpWelcomeText,
                          className: n.HtmlClassNames.wpLogoWelcomeText,
                          style: {
                            display: this.props.welcomePageDisplayStyle.welcomeTextComponentVisibility
                              ? n.Constants.HTMLConstants.block
                              : n.Constants.HTMLConstants.none
                          }
                        },
                        React.createElement(
                          'span',
                          { className: n.HtmlClassNames.wpMessage + ' ' + n.HtmlClassNames.wpt1 },
                          n.Loader.Locale.WELCOME_SCREEN_WELCOME_TO_TEXT
                        ),
                        React.createElement(
                          'span',
                          { className: n.HtmlClassNames.wpMessage + ' ' + n.HtmlClassNames.wpt2 },
                          n.Loader.Locale.WELCOME_SCREEN_LIVE_CHAT_SUPPORT_TEXT
                        )
                      ),
                      React.createElement(
                        'div',
                        {
                          id: n.HtmlIdNames.wpAlertText,
                          className: n.HtmlClassNames.wpLogoAlertText,
                          style: {
                            display: this.props.welcomePageDisplayStyle.alertTextComponentVisibility
                              ? n.Constants.HTMLConstants.block
                              : n.Constants.HTMLConstants.none
                          }
                        },
                        React.createElement(
                          'span',
                          { className: n.HtmlClassNames.wpAlertMessage + ' ' + n.HtmlClassNames.wpt1 },
                          this.props.welcomePageDisplayStyle.alertHeaderText
                        ),
                        React.createElement(
                          'span',
                          { className: n.HtmlClassNames.wpAlertMessage + ' ' + n.HtmlClassNames.wpt2 },
                          this.props.welcomePageDisplayStyle.alertSubheaderText
                        )
                      )
                    ),
                    React.createElement(
                      'div',
                      { className: n.HtmlClassNames.wpLoading },
                      React.createElement('img', {
                        alt: n.Loader.Locale.WELCOME_SCREEN_ICON_ALT,
                        src: n.ScriptPaths.LoadingImagePath
                      }),
                      React.createElement(
                        'span',
                        {
                          id: n.HtmlIdNames.wpLoadingText,
                          className: n.HtmlClassNames.wpMessage + ' ' + n.HtmlClassNames.wpt3
                        },
                        n.Loader.Locale.WELCOME_SCREEN_LOADING_TEXT
                      )
                    )
                  )
                )
              );
            }),
            (i.prototype.onMinimizeKeyDown = function (t) {
              (t.keyCode === n.Constants.KeyCodes.KEY_ENTER || t.keyCode === n.Constants.KeyCodes.KEY_SPACE) &&
                this.props.onMinimize();
            }),
            (i.prototype.onCloseKeyDown = function (t) {
              (t.keyCode === n.Constants.KeyCodes.KEY_ENTER || t.keyCode === n.Constants.KeyCodes.KEY_SPACE) &&
                this.props.onClose();
            }),
            (i.prototype.onEscapeKeyDown = function (t) {
              t.keyCode === n.Constants.KeyCodes.KEY_ESC && this.props.onMinimize();
            }),
            i
          );
        })(React.Component);
        n.WelcomePage = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t;
        (function (n) {
          n.User = 'user';
          n.Bot = 'bot';
          n.Channel = 'channel';
        })((t = n.DirectLineSenderRole || (n.DirectLineSenderRole = {})));
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t;
        (function (n) {
          n.Sending = 'sending';
          n.SendFailed = 'send failed';
          n.Sent = 'sent';
        })((t = n.SendStatus || (n.SendStatus = {})));
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            return t.call(this) || this;
          }
          return (
            __extends(i, t),
            (i.prototype.componentDidMount = function () {
              n.Utility.focusOnElement(n.HtmlIdNames.ipcpIncomingProactiveChatAcceptButton);
              var t = document.getElementById(n.HtmlIdNames.incomingProactiveChat);
              t
                ? n.FrameHandler.resizeFrame(window, n.IFrameValues.proactiveChatPanel)
                : console.error('Failed to find element: ', n.HtmlIdNames.incomingProactiveChat);
            }),
            (i.prototype.render = function () {
              return React.createElement(
                'div',
                {
                  id: n.HtmlIdNames.incomingProactiveChat,
                  className: n.HtmlClassNames.incomingProactiveChatPageContainer,
                  role: n.HtmlAttributeNames.region,
                  'aria-label': this.props.locale.WELCOME_SCREEN_LANDMARK,
                  onKeyDown: this.onEscapeKeyDown.bind(this)
                },
                React.createElement(
                  'div',
                  {
                    className: n.HtmlClassNames.ipcpBanner,
                    'aria-label':
                      this.props.locale.PROACTIVE_CHAT_BANNER_WELCOME_TO_TEXT +
                      this.props.locale.PROACTIVE_CHAT_BANNER_LIVE_CHAT_SUPPORT_TEXT,
                    style: { backgroundColor: this.props.liveChatConfig.chatTitleColor }
                  },
                  React.createElement('span', {
                    role: n.HtmlAttributeNames.button,
                    tabIndex: 0,
                    className: n.HtmlClassNames.ipcpClose,
                    'aria-label': this.props.locale.CLOSE_CHAT,
                    onClick: this.handleRejectButtonClickForProactiveNotification.bind(this),
                    onKeyDown: this.onCloseKeyDown.bind(this)
                  }),
                  React.createElement(
                    'span',
                    { className: n.HtmlClassNames.ipcpBannerText },
                    React.createElement(
                      'p',
                      { className: n.HtmlClassNames.ipcpBannerTextRow1 },
                      this.props.locale.PROACTIVE_CHAT_BANNER_WELCOME_TO_TEXT
                    ),
                    React.createElement(
                      'p',
                      { className: n.HtmlClassNames.ipcpBannerTextRow2 },
                      this.props.locale.PROACTIVE_CHAT_BANNER_LIVE_CHAT_SUPPORT_TEXT
                    )
                  )
                ),
                React.createElement(
                  'span',
                  { className: n.HtmlClassNames.ipcpWelcomMessageText },
                  ' ',
                  n.Loader.proactiveChatNotificationConfig.message,
                  ' '
                ),
                React.createElement(
                  'div',
                  {
                    id: n.HtmlIdNames.ipcpIncomingProactiveChatAcceptButton,
                    className: n.HtmlClassNames.ipcpAcceptButton,
                    style: { backgroundColor: this.props.liveChatConfig.chatTitleColor },
                    onClick: this.handleAcceptButtonClickForProactiveNotification.bind(this),
                    onKeyDown: this.onAcceptKeyDown.bind(this)
                  },
                  React.createElement(
                    'span',
                    { tabIndex: 0, className: n.HtmlClassNames.ipcpAcceptButtonText },
                    this.props.locale.PROACTIVE_CHAT_ACCEPT
                  )
                )
              );
            }),
            (i.prototype.onEscapeKeyDown = function (t) {
              t.keyCode === n.Constants.KeyCodes.KEY_ESC && this.handleRejectButtonClickForProactiveNotification();
            }),
            (i.prototype.onCloseKeyDown = function (t) {
              (t.keyCode === n.Constants.KeyCodes.KEY_ENTER || t.keyCode === n.Constants.KeyCodes.KEY_SPACE) &&
                this.handleRejectButtonClickForProactiveNotification();
            }),
            (i.prototype.onAcceptKeyDown = function (t) {
              (t.keyCode === n.Constants.KeyCodes.KEY_ENTER || t.keyCode === n.Constants.KeyCodes.KEY_SPACE) &&
                this.handleAcceptButtonClickForProactiveNotification();
            }),
            (i.prototype.handleAcceptButtonClickForProactiveNotification = function () {
              n.TelemetryClient.info({ Event: n.TelemetryEvent.ProactiveChatAccepted });
              n.Loader.currentConversation.isProactiveChat = !0;
              n.ProactiveChatController.clearTimeout();
              this.props.handleChatButtonClick(!1);
            }),
            (i.prototype.handleRejectButtonClickForProactiveNotification = function () {
              var t = n.Util.timer();
              n.TelemetryClient.info({ Event: n.TelemetryEvent.ProactiveChatRejected });
              n.ProactiveChatController.clearTimeout();
              this.props.showComponents(n.Components.ChatButton);
              n.LogHelper.logProactiveChatCloseTimeAfterReject(t.milliSecondsElapsed);
            }),
            i
          );
        })(React.Component);
        n.ProactiveChatPage = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            var i = t.call(this) || this;
            return (
              AdaptiveCards.AdaptiveCard.elementTypeRegistry.registerType(n.RatingInput.RatingType, function () {
                return new n.RatingInput();
              }),
              i
            );
          }
          return (
            __extends(i, t),
            (i.prototype.componentDidMount = function () {
              this.props.renderCard(this.onSurveySubmit.bind(this));
            }),
            (i.prototype.render = function () {
              return React.createElement(
                'div',
                {
                  role: n.HtmlAttributeNames.region,
                  className: n.HtmlClassNames.postChatPage + ' ' + n.HtmlClassNames.cardContainer,
                  'aria-label': this.props.locale.POSTCHAT_LANDMARK,
                  'aria-labelledby': n.HtmlIdNames.webChatHeaderTitle
                },
                React.createElement(
                  'div',
                  { className: n.HtmlClassNames.ppContainer, onKeyDown: this.onEscapeKeyDown.bind(this) },
                  React.createElement(n.Header, {
                    liveChatConfig: this.props.liveChatConfig,
                    locale: this.props.locale,
                    onMinimize: this.onMinimizeClick.bind(this),
                    onClose: this.onCloseClick.bind(this),
                    showIconAndTitle: !0,
                    showMinimizeButton: !0,
                    showCloseButton: !0
                  }),
                  React.createElement(
                    'div',
                    { className: n.HtmlClassNames.ppPostchatMainContainer },
                    React.createElement('div', { className: n.HtmlClassNames.ppPostchatContainer })
                  )
                )
              );
            }),
            (i.prototype.onMinimizeClick = function () {
              this.props.showComponents(n.Components.ChatButton);
              this.props.changeCurrentSurveyWidgetState(n.WidgetState.Minimized);
            }),
            (i.prototype.onEscapeKeyDown = function (t) {
              t.keyCode === n.Constants.KeyCodes.KEY_ESC && this.onMinimizeClick();
            }),
            (i.prototype.closePostchatView = function () {
              n.Loader.currentConversation.isPostChatResponseSubmitted = !0;
              this.props.closeConversation();
              this.props.showComponents(n.Components.ChatButton);
            }),
            (i.prototype.onCloseClick = function () {
              this.closePostchatView();
              this.props.changeCurrentSurveyWidgetState(n.WidgetState.Closed);
            }),
            (i.prototype.onSurveySubmit = function (t) {
              var i, r;
              this.props.validator.canSubmitSurvey(t) &&
                (n.TelemetryClient.info({ Event: n.TelemetryEvent.PostchatSubmitted }),
                (i = this.extractSurveyResponses(t)),
                this.props.enableSurveySubmit(!1),
                this.props.validator.disableInputs(t),
                (r = { postChatResponse: i }),
                this.submitPostChatResponse(r, n.Loader.currentConversation),
                (n.Loader.currentConversation.isPostChatResponseSubmitted = !0),
                this.closePostchatView());
            }),
            (i.prototype.extractSurveyResponses = function (n) {
              return n.data;
            }),
            (i.prototype.submitPostChatResponse = function (t, i) {
              var r = this,
                u = null;
              return new Promise(function (f) {
                return __awaiter(r, void 0, void 0, function () {
                  var h, r, e, s, o;
                  return __generator(this, function (c) {
                    switch (c.label) {
                      case 0:
                        return ((h = n.Util.timer()),
                        n.Bootstrapper.debugInfo.addSubmitPostChatRequestId(i.currentRequestId),
                        (r = function () {
                          n.TelemetryClient.info({
                            Event: n.TelemetryEvent.SubmitPostChatSuccess,
                            ElapsedTimeInMilliseconds: h.milliSecondsElapsed
                          });
                          f();
                        }),
                        (e = function (t) {
                          n.TelemetryClient.info({
                            Event: n.TelemetryEvent.SubmitPostChatFailure,
                            ExceptionDetails: t
                          });
                        }),
                        !n.Loader.liveChatConfig.authClientFunction)
                          ? [3, 3]
                          : ((o = n.Loader.authTokenProvider), o)
                          ? [3, 2]
                          : [4, n.Util.getAuthTokenMethodFromString(n.Loader.liveChatConfig.authClientFunction, !0)];
                      case 1:
                        o = c.sent();
                        c.label = 2;
                      case 2:
                        if (((s = o), s))
                          try {
                            s(function (f) {
                              if (n.Util.isNullOrEmptyString(f)) {
                                var o = new Error('Received empty token');
                                n.LCWErrorTypes.raiseErrorEvent(
                                  n.LCWErrorCode.LCW_AUTHTOKENPROVIDER_NO_TOKEN_RECEIVED,
                                  o
                                );
                              } else u = f;
                              n.OmnichannelProxy.getInstance().submitPostChatResponse(i.currentRequestId, t).then(r, e);
                            });
                          } catch (l) {
                            n.TelemetryClient.info({
                              Event: n.TelemetryEvent.AuthClientMethodException,
                              ExceptionDetails: l
                            });
                            n.LCWErrorTypes.raiseErrorEvent(n.LCWErrorCode.LCW_AUTHTOKENPROVIDER_METHOD_FAIL, l);
                            n.OmnichannelProxy.getInstance().submitPostChatResponse(i.currentRequestId, t).then(r, e);
                          }
                        else
                          n.TelemetryClient.info({
                            Event: n.TelemetryEvent.InvalidAuthClientMethod,
                            ExceptionDetails: { ErrorDetails: 'Undefined method found for LivechatConfig' }
                          });
                        return [3, 4];
                      case 3:
                        n.OmnichannelProxy.getInstance().submitPostChatResponse(i.currentRequestId, t).then(r, e);
                        c.label = 4;
                      case 4:
                        return [2];
                    }
                  });
                });
              });
            }),
            i
          );
        })(React.Component);
        n.PostchatPage = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            var i = t.call(this) || this;
            return (i.validator = new n.SurveyValidator(i.enableSurveySubmit.bind(i))), i;
          }
          return (
            __extends(i, t),
            (i.prototype.componentDidMount = function () {
              this.setDefaultFocusOnFirstInput(this.adaptiveCard);
            }),
            (i.prototype.render = function () {
              return React.createElement(
                'div',
                {
                  id: n.HtmlIdNames.surveyPlaceholderId,
                  style: {
                    display: this.props.shouldShowSurvey
                      ? n.Constants.HTMLConstants.block
                      : n.Constants.HTMLConstants.none
                  }
                },
                React.createElement(
                  'div',
                  {
                    className: n.HtmlClassNames.pageContainer,
                    dir: n.Util.getLocaleDirection(this.props.liveChatConfig.chatWidgetLocaleLCID)
                  },
                  this.props.surveyType === n.SurveyType.Prechat &&
                    React.createElement(n.PrechatPage, {
                      liveChatConfig: this.props.liveChatConfig,
                      locale: this.props.locale,
                      showComponents: this.props.showComponents.bind(this),
                      addAriaLabelForInputElements: this.addAriaLabelForInputElements.bind(this),
                      enableSurveySubmit: this.enableSurveySubmit.bind(this),
                      loadWidget: this.props.loadWidget.bind(this),
                      validator: this.validator,
                      renderCard: this.renderCard.bind(this),
                      changeCurrentSurveyWidgetState: this.props.changeCurrentSurveyWidgetState.bind(this),
                      showHeader: !n.Bootstrapper.renderOnMobileDevice
                    }),
                  this.props.surveyType === n.SurveyType.Postchat &&
                    React.createElement(n.PostchatPage, {
                      liveChatConfig: this.props.liveChatConfig,
                      locale: this.props.locale,
                      showComponents: this.props.showComponents.bind(this),
                      addAriaLabelForInputElements: this.addAriaLabelForInputElements.bind(this),
                      enableSurveySubmit: this.enableSurveySubmit.bind(this),
                      closeConversation: this.props.closeConversation.bind(this),
                      validator: this.validator,
                      renderCard: this.renderCard.bind(this),
                      changeCurrentSurveyWidgetState: this.props.changeCurrentSurveyWidgetState.bind(this)
                    })
                )
              );
            }),
            (i.prototype.addAriaLabelForInputElements = function (t) {
              var r = t.getAllInputs(),
                u;
              if (r && r.length > 0)
                for (u = 0; u < r.length; u++) {
                  var i = r[u],
                    f = t.getItemAt(i.index - 1),
                    e = f && f.renderedElement && f.renderedElement.textContent ? f.renderedElement.textContent : '';
                  i &&
                    i.renderedElement &&
                    (i.renderedElement.setAttribute(n.HtmlAttributeNames.ariaLabel, e),
                    this.addAriaRequiredForRequiredField(i));
                }
            }),
            (i.prototype.setDefaultFocusOnFirstInput = function (n) {
              if (n) {
                var t = n.getAllInputs();
                t && t.length > 0 && t[0].renderedElement && t[0].renderedElement.focus();
              }
            }),
            (i.prototype.addAriaRequiredForRequiredField = function (t) {
              try {
                var i = JSON.parse(t.id);
                i.IsRequired === !0 && t.renderedElement.setAttribute(n.HtmlAttributeNames.ariaRequired, !0);
              } catch (r) {
                n.TelemetryClient.info({ Event: n.TelemetryEvent.InvalidAdaptiveCardFormat, ExceptionDetails: r });
              }
            }),
            (i.prototype.enableSurveySubmit = function (t) {
              var i = $j(n.HtmlClassNames.pushButton)[0];
              t ? i.classList.remove(n.HtmlAttributeNames.disabled) : i.classList.add(n.HtmlAttributeNames.disabled);
              i.setAttribute(
                n.HtmlAttributeNames.ariaDisabled,
                t ? n.HtmlAttributeNames.false : n.HtmlAttributeNames.true
              );
            }),
            (i.prototype.renderCard = function (t) {
              var i = new AdaptiveCards.AdaptiveCard(),
                r;
              this.adaptiveCard = i;
              i.hostConfig = new AdaptiveCards.HostConfig({ fontFamily: n.HtmlCssConstants.adaptiveCardFont });
              i.onParseElement = this.validator.attachFieldValidators.bind(this.validator);
              i.onExecuteAction = t.bind(this);
              i.parse(this.props.liveChatConfig.preChatSurvey);
              r = i.render();
              this.addAriaLabelForInputElements(i);
              r.setAttribute(n.HtmlAttributeNames.role, n.HtmlAttributeNames.form);
              r.setAttribute(n.HtmlAttributeNames.ariaLabelledby, n.HtmlIdNames.webChatHeaderTitle);
              r.setAttribute(n.HtmlAttributeNames.tabindex, '-1');
              document.getElementsByClassName(n.HtmlAttributeNames.prechatContainer)[0].appendChild(r);
            }),
            i
          );
        })(React.Component);
        n.SurveyPlaceholder = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            return t.call(this) || this;
          }
          return (
            __extends(i, t),
            (i.prototype.componentDidMount = function () {
              this.props.renderCard(this.onSurveySubmit.bind(this));
              n.FrameHandler.setToDefaultSize(window);
            }),
            (i.prototype.render = function () {
              return React.createElement(
                'div',
                {
                  role: n.HtmlAttributeNames.region,
                  className: n.HtmlClassNames.preChatPage + ' ' + n.HtmlClassNames.cardContainer,
                  'aria-label': this.props.locale.PRECHAT_LANDMARK,
                  'aria-labelledby': n.HtmlIdNames.webChatHeaderTitle
                },
                React.createElement(
                  'div',
                  { className: n.HtmlClassNames.ppContainer, onKeyDown: this.onEscapeKeyDown.bind(this) },
                  this.props.showHeader &&
                    React.createElement(n.Header, {
                      liveChatConfig: this.props.liveChatConfig,
                      locale: this.props.locale,
                      onMinimize: this.onMinimizeClick.bind(this),
                      onClose: undefined,
                      showIconAndTitle: !0,
                      showMinimizeButton: !0,
                      showCloseButton: !1
                    }),
                  React.createElement(
                    'div',
                    { className: n.HtmlClassNames.ppPrechatMainContainer },
                    React.createElement('div', { className: n.HtmlClassNames.ppPrechatContainer })
                  )
                )
              );
            }),
            (i.prototype.onMinimizeClick = function () {
              this.props.showComponents(n.Components.ChatButton);
              this.props.changeCurrentSurveyWidgetState(n.WidgetState.Minimized);
            }),
            (i.prototype.onEscapeKeyDown = function (t) {
              t.keyCode === n.Constants.KeyCodes.KEY_ESC && this.onMinimizeClick();
            }),
            (i.prototype.onSurveySubmit = function (t) {
              if (this.props.validator.canSubmitSurvey(t)) {
                n.TelemetryClient.info({ Event: n.TelemetryEvent.PrechatSubmitted });
                n.Util.setAriaLiveAlert(n.Loader.Locale.LOADING_CHAT_WIDGET);
                var i = this.extractSurveyResponses(t),
                  r = n.Util.timer();
                this.props.enableSurveySubmit(!1);
                this.props.validator.disableInputs(t);
                this.persistPreChatResponse(i);
                this.props.loadWidget().then(function () {
                  return n.TelemetryClient.info({ Event: n.TelemetryEvent.WebChatLoaded });
                });
              }
            }),
            (i.prototype.persistPreChatResponse = function (t) {
              n.Loader.initContext.preChatResponse = t;
              n.ContextSpecificDataStore.PersistData(
                n.DataContextType.UserContext | n.DataContextType.WidgetContext | n.DataContextType.OrganizationContext,
                n.WidgetDataKeys.PreChatResponse,
                t
              );
            }),
            (i.prototype.extractSurveyResponses = function (n) {
              return n.data;
            }),
            i
          );
        })(React.Component);
        n.PrechatPage = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.getInitContext = function () {
              return t.populateInitContext();
            }),
            (t.populateInitContext = function () {
              return new Promise(function (t) {
                var i = new n.InitContext();
                i.locale = n.Loader.liveChatConfig.chatWidgetLocale;
                i.device = n.DeviceInfo.getDeviceType();
                i.os = n.OSInfo.getOsType().toString();
                i.browser = n.BrowserInfo.getBrowserName();
                i.originurl = n.Util.getCurrentUrl();
                i.fetchPortalContactId = function () {
                  if (
                    typeof window[n.Constants.Microsoft][n.Constants.Dynamic365] != n.Constants.Undefined &&
                    typeof window[n.Constants.Microsoft][n.Constants.Dynamic365][n.Constants.Portal] !=
                      n.Constants.Undefined &&
                    typeof window[n.Constants.Microsoft][n.Constants.Dynamic365][n.Constants.Portal][
                      n.Constants.User
                    ] != n.Constants.Undefined
                  )
                    return window[n.Constants.Microsoft][n.Constants.Dynamic365][n.Constants.Portal][n.Constants.User][
                      n.Constants.ContactId
                    ].toString();
                };
                t(i);
              });
            }),
            (t.setInitContext = function () {
              var i = t.getInitContext();
              return i.then(function (t) {
                n.Loader.initContext = t;
                n.Loader.initContext.preChatResponse = n.ContextSpecificDataStore.GetData(
                  n.DataContextType.UserContext |
                    n.DataContextType.WidgetContext |
                    n.DataContextType.OrganizationContext,
                  n.WidgetDataKeys.PreChatResponse
                );
              });
            }),
            (t.resetInitContext = function () {
              n.Loader.initContext.authenticatedUserToken = null;
              n.Loader.initContext.customContextData = null;
            }),
            (t.addCustomContextData = function () {
              var t, u, f, i, r;
              if (n.Loader.contextProvider) {
                t = null;
                try {
                  t = n.Loader.contextProvider();
                } catch (e) {
                  n.TelemetryClient.error({ Event: n.TelemetryEvent.ContextProviderException, ExceptionDetails: e });
                  n.LCWErrorTypes.raiseErrorEvent(n.LCWErrorCode.LCW_CONTEXTPROVIDER_METHOD_FAIL, e);
                  return;
                }
                if (t) {
                  u = {};
                  for (f in t)
                    ((i = t[f]), (r = {}), typeof i != 'function') &&
                      ((r =
                        typeof i == 'object'
                          ? this.getCustomPropertiesBag(i)
                          : this.getCustomPropertiesBag({ value: i })),
                      r && (u[f] = r));
                  n.Loader.initContext.customContextData = u;
                }
              }
            }),
            (t.getCustomPropertiesBag = function (n) {
              var i = this.getCustomPropertiesDefaultValueMapping(),
                t,
                r;
              for (t in i)
                if (t in n) {
                  if (((r = n[t]), typeof r == 'function' || (typeof r == 'object' && r !== null))) continue;
                  i[t] = n[t];
                }
              return i.value ? i : null;
            }),
            (t.getCustomPropertiesDefaultValueMapping = function () {
              return { value: null, isDisplayable: !1 };
            }),
            t
          );
        })();
        n.ContextService = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var i, r, t;
        (function (n) {
          n[(n.LCW_CONTEXTPROVIDER_METHOD_FAIL = 1)] = 'LCW_CONTEXTPROVIDER_METHOD_FAIL';
          n[(n.LCW_AUTHTOKENPROVIDER_METHOD_FAIL = 2)] = 'LCW_AUTHTOKENPROVIDER_METHOD_FAIL';
          n[(n.LCW_AUTHTOKENPROVIDER_NO_TOKEN_RECEIVED = 3)] = 'LCW_AUTHTOKENPROVIDER_NO_TOKEN_RECEIVED';
          n[(n.LCW_AUTHTOKENPROVIDER_INVALID_TOKEN_RECEIVED = 4)] = 'LCW_AUTHTOKENPROVIDER_INVALID_TOKEN_RECEIVED';
        })((i = n.LCWErrorCode || (n.LCWErrorCode = {})));
        r = (function () {
          function r() {}
          return (
            (r.raiseErrorEvent = function (t, i) {
              var u = { error: i, errorCode: t, errorDescription: r.LCWErrors[t] };
              n.Util.raiseCustomEvent(n.LCWEvents.LCWErrorEvent, u);
            }),
            (r.LCWErrors =
              ((t = {}),
              (t[i.LCW_CONTEXTPROVIDER_METHOD_FAIL] = 'Context provider method execution failed'),
              (t[i.LCW_AUTHTOKENPROVIDER_METHOD_FAIL] = 'Auth token provider method execution failed'),
              (t[i.LCW_AUTHTOKENPROVIDER_NO_TOKEN_RECEIVED] = "Auth token provider didn't provide any token"),
              (t[i.LCW_AUTHTOKENPROVIDER_INVALID_TOKEN_RECEIVED] = 'Auth token provider provided invalid token'),
              t)),
            r
          );
        })();
        n.LCWErrorTypes = r;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.createTimeoutForInvite = function (t) {
              n.Util.isNullOrUndefined(this.timeoutEvent) &&
                ((this.timeoutEvent = setTimeout(
                  this.handleTimeoutForProactiveNotification.bind(this, t.bind(this)),
                  n.Constants.ProactiveChatInviteTimeout
                )),
                (this.timeoutRemoved = !1));
            }),
            (t.clearTimeout = function () {
              this.timeoutRemoved = !0;
              clearTimeout(this.timeoutEvent);
            }),
            (t.handleTimeoutForProactiveNotification = function (t) {
              if (!this.timeoutRemoved) {
                var i = n.Util.timer();
                n.TelemetryClient.info({ Event: n.TelemetryEvent.ProactiveChatInvitationTimedOut });
                clearTimeout(this.timeoutEvent);
                t(n.Components.ChatButton);
                n.LogHelper.logProactiveChatCloseTimeAfterTimeout(i.milliSecondsElapsed);
              }
            }),
            (t.getProactiveChatInviteMessage = function (t, i) {
              var r = i;
              return n.Util.isNullOrUndefined(t) || n.Util.isNullOrEmptyString(t.message) || (r = t.message), r;
            }),
            (t.resetProctiveChatContext = function () {
              n.Loader.currentConversation.isProactiveChat = !1;
            }),
            (t.validateAndSetProactiveChatNotificationConfig = function (t, i) {
              n.Loader.proactiveChatNotificationConfig = new n.ProactiveChatNotificationConfig();
              n.Loader.proactiveChatNotificationConfig.message = this.getProactiveChatInviteMessage(t, i);
            }),
            (t.timeoutRemoved = !1),
            t
          );
        })();
        n.ProactiveChatController = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t(n) {
            this.config = n;
          }
          return (
            (t.prototype.canRenderPostChat = function () {
              return this.config.isPostChatEnabled && n.Utility.isSurveyValid(this.config.postChatSurvey);
            }),
            (t.prototype.shouldRenderPostchat = function () {
              return (
                this.canRenderPostChat() &&
                n.Loader.currentConversation.isChatComplete &&
                !n.Loader.currentConversation.isPostChatResponseSubmitted
              );
            }),
            t
          );
        })();
        n.PostchatController = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            var n = (t !== null && t.apply(this, arguments)) || this;
            return (n.isValid = !0), n;
          }
          return (
            __extends(i, t),
            (i.prototype.internalRender = function () {
              var r, t;
              return (
                (this.value = '' + this.scale),
                (r = document.createElement('div')),
                (r.innerHTML = this.get()),
                (t = this),
                this.addEventListener(
                  n.HtmlIdNames.surveyPlaceholderId,
                  i.RatingStarClass,
                  n.HtmlEventNames.click,
                  function (n) {
                    t.onRatingClick(n);
                  }
                ),
                this.addEventListener(
                  n.HtmlIdNames.surveyPlaceholderId,
                  i.RatingStarClass,
                  n.HtmlEventNames.keypress,
                  function (n) {
                    t.onRatingPress(n);
                  }
                ),
                this.addEventListener(
                  n.HtmlIdNames.surveyPlaceholderId,
                  i.RatingFieldSetClass,
                  n.HtmlEventNames.keydown,
                  function (n) {
                    t.handleArrowKeys(n);
                  }
                ),
                r
              );
            }),
            (i.prototype.addEventListener = function (n, t, i, r) {
              document.getElementById(n).addEventListener(i, function (n) {
                n.target.className.indexOf(t) >= 0 && r(n);
              });
            }),
            (i.prototype.onRatingClick = function (n) {
              var t = n.target.htmlFor,
                i = document.getElementById(t);
              this.value = i.value;
            }),
            (i.prototype.onRatingPress = function (n) {
              var i = n,
                r,
                t;
              (i.keyCode == 13 || i.keyCode == 32) &&
                ((r = n.target.htmlFor), (t = document.getElementById(r)), (this.value = t.value), (t.checked = !0));
            }),
            (i.prototype.handleArrowKeys = function (t) {
              var e, o, r;
              if (t.type == 'keydown') {
                var u = t,
                  f = t.target,
                  i = null;
                u.keyCode == n.Constants.KeyCodes.KEY_ARROW_LEFT
                  ? ((e =
                      parseInt(f.htmlFor.split(n.Constants.HTMLConstants.star)[0]) -
                      1 +
                      n.Constants.HTMLConstants.star),
                    (i = document.getElementById(e)))
                  : u.keyCode == n.Constants.KeyCodes.KEY_ARROW_RIGHT &&
                    ((o =
                      parseInt(f.htmlFor.split(n.Constants.HTMLConstants.star)[0]) +
                      1 +
                      n.Constants.HTMLConstants.star),
                    (i = document.getElementById(o)));
                i && ((r = i), r.labels[0].click(), r.labels[0].focus());
              }
            }),
            (i.prototype.toJSON = function () {
              return t.prototype.toJSON.call(this);
            }),
            (i.prototype.getJsonTypeName = function () {
              return i.RatingType;
            }),
            (i.prototype.parse = function (n, i) {
              this.scale = parseInt(n.scale);
              t.prototype.parse.call(this, n, i);
            }),
            (i.prototype.getRootElementSelector = function () {
              return '.' + n.HtmlClassNames.postChatPage;
            }),
            (i.prototype.get = function () {
              for (
                var t,
                  e,
                  o =
                    '<fieldset class="oclcw-pop-rating" aria-role="radiogroup" aria-label="' +
                    n.Loader.Locale.POSTCHAT_RATING +
                    '">',
                  u = '',
                  f = '0',
                  r = 1;
                r <= this.scale;
                r++
              )
                (t = r + 'star'),
                  (e =
                    '<input type="radio" id="' +
                    t +
                    '" name="rating" value="' +
                    r +
                    '" /><label class = "' +
                    i.RatingStarClass +
                    '" placeholder = "' +
                    t +
                    '" aria-label="' +
                    t +
                    '" for= "' +
                    t +
                    '" title = "' +
                    t +
                    '" tabindex = "' +
                    f +
                    '" aria-role="radio" > </label>'),
                  (u = u + e),
                  (f = '-1');
              return o + u + '</fieldset>';
            }),
            (i.RatingType = 'Input.Rating'),
            (i.RatingStarClass = 'oclcw-pop-rating-star'),
            (i.RatingFieldSetClass = 'oclcw-pop-rating'),
            i
          );
        })(AdaptiveCards.Input);
        n.RatingInput = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t(n) {
            this.config = n;
          }
          return (
            (t.prototype.canRenderPreChat = function () {
              return (
                n.FeaturesManager.shouldShowPrechatScreen() &&
                this.config.isPreChatEnabled &&
                n.Utility.isSurveyValid(this.config.preChatSurvey) &&
                this.canRenderPreChatForProactiveChat()
              );
            }),
            (t.prototype.canRenderPreChatForProactiveChat = function () {
              return n.Loader.currentConversation.isProactiveChat ? n.Loader.isPreChatEnabledForProactiveChat : !0;
            }),
            (t.prototype.shouldRenderPrechat = function () {
              return this.canRenderPreChat() && !this.isPreChatResponseSubmitted();
            }),
            (t.prototype.isPreChatResponseSubmitted = function () {
              return !!n.Loader.initContext.preChatResponse;
            }),
            (t.prototype.resetPreChat = function () {
              n.Loader.initContext.preChatResponse = null;
              n.ContextSpecificDataStore.RemoveData(
                n.DataContextType.UserContext | n.DataContextType.WidgetContext | n.DataContextType.OrganizationContext,
                n.WidgetDataKeys.PreChatResponse
              );
            }),
            t
          );
        })();
        n.PrechatController = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            Object.defineProperty(t, 'Instance', {
              get: function () {
                return t._instance || (t._instance = new t()), t._instance;
              },
              enumerable: !0,
              configurable: !0
            }),
            (t.prototype.validate = function (t, i) {
              i === void 0 && (i = null);
              var r = n.Util.isNullOrEmptyString(t) || !isNaN(t);
              return r || n.Util.isNullOrUndefined(i) || i.push(n.Loader.Locale.INVALID_DATA_TYPE_MESSAGE), r;
            }),
            (t._instance = null),
            t
          );
        })();
        n.NumericFieldValidator = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t(n) {
            this._isFirstPass = !0;
            this.enableSurveySubmit = n;
          }
          return (
            (t.prototype.attachFieldValidators = function (t, i) {
              if (t.isInteractive) {
                t.onValueChanged = this.validateInput.bind(this);
                t.validators = [];
                try {
                  var r = JSON.parse(i.id);
                  t.ocId = 'i' + r.Id;
                  r.IsRequired === !1 || r.IsOption === !0
                    ? (t.isValid = !0)
                    : t.getJsonTypeName() == 'Input.Toggle'
                    ? t.validators.push(n.RequiredBooleanFieldValidator.Instance)
                    : t.validators.push(n.RequiredFieldValidator.Instance);
                } catch (u) {
                  t.isValid = !0;
                }
              }
            }),
            (t.prototype.canSubmitSurvey = function (n) {
              this._isFirstPass = !1;
              var t = n.parent.getRootElement().getAllInputs();
              return this.reEvaluatePrechatForm(t)
                ? !0
                : (t.forEach(function (n) {
                    n.onValueChanged(n);
                  }),
                  !1);
            }),
            (t.prototype.disableInputs = function (n) {
              var t = n.parent.getRootElement().getAllInputs();
              t.forEach(function (n) {
                n._renderedElement.disabled = !0;
              });
            }),
            (t.prototype.cleanUp = function () {
              this._isFirstPass = !0;
            }),
            (t.prototype.validateInput = function (t) {
              var i = [];
              if (t.getJsonTypeName() == n.RatingInput.RatingType) {
                t.isValid = !0;
                return;
              }
              ((t.isValid =
                t.validators.length > 0
                  ? t.validators.every(function (n) {
                      return n.validate(t.value, i);
                    })
                  : !0),
              this._isFirstPass) ||
                (t.isValid
                  ? t.renderedElement.classList.contains(n.Constants.HTMLConstants.error) &&
                    (t.renderedElement.classList.remove(n.Constants.HTMLConstants.error),
                    this.removeErrorMessages(t),
                    this.reEvaluatePrechatForm(t.parent.getAllInputs()))
                  : (t.renderedElement.classList.add(n.Constants.HTMLConstants.error),
                    this.renderErrorMessages(t, i),
                    this.enableSurveySubmit(!1)));
            }),
            (t.prototype.reEvaluatePrechatForm = function (n) {
              var t = n.every(function (n) {
                return n.isValid === !0;
              });
              return t ? this.enableSurveySubmit(!0) : this.enableSurveySubmit(!1), t;
            }),
            (t.prototype.createErrorElement = function (t, i) {
              var r = document.createElement('div');
              return (
                r.classList.add(n.HtmlClassNames.errorContainer),
                (r.innerHTML =
                  '\n                <span>\n                    <img src="' +
                  n.ScriptPaths.ErrorImagePath +
                  '"/>\n                </span>\n                <span class=' +
                  n.HtmlClassNames.errorText +
                  '\n                    id="' +
                  i +
                  '">' +
                  t +
                  '</span>\n            '),
                r
              );
            }),
            (t.prototype.renderErrorMessages = function (t, i) {
              var f = this,
                u = document.querySelectorAll('.' + n.HtmlClassNames.errorContainer + '.' + t.ocId),
                r;
              if (u.length > 0) for (r = 0; r < u.length; r++) u[r].style.display = n.Constants.HTMLConstants.block;
              else
                i.forEach(function (i) {
                  var r = n.HtmlIdNames.errorElementId + t.index,
                    u = f.createErrorElement(i, r);
                  u.classList.add(t.ocId);
                  t.renderedElement.parentNode.insertBefore(u, t.renderedElement.nextSibling);
                  t.renderedElement.setAttribute(n.HtmlAttributeNames.ariaDesribedby, r);
                });
            }),
            (t.prototype.removeErrorMessages = function (t) {
              for (
                var r = document.querySelectorAll('.' + n.HtmlClassNames.errorContainer + '.' + t.ocId), i = 0;
                i < r.length;
                i++
              )
                (r[i].style.display = n.Constants.HTMLConstants.none),
                  t.renderedElement.removeAttribute(n.HtmlAttributeNames.ariaDesribedby);
            }),
            (t.prototype.setFocusFirstErrorField = function (n) {
              var t, i;
              if (n && n.length > 0)
                for (t = 0; t < n.length; t++)
                  if (((i = n[t]), !i.isValid)) {
                    i.renderedElement.focus();
                    break;
                  }
            }),
            t
          );
        })();
        n.SurveyValidator = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            Object.defineProperty(t, 'Instance', {
              get: function () {
                return t._instance || (t._instance = new t()), t._instance;
              },
              enumerable: !0,
              configurable: !0
            }),
            (t.prototype.validate = function (t, i) {
              i === void 0 && (i = null);
              var r = !n.Util.isNullOrUndefined(t) && t.trim && !n.Util.isNullOrEmptyString(t.trim());
              return r || n.Util.isNullOrUndefined(i) || i.push(n.Loader.Locale.REQUIRED_FIELD_MISSING_MESSAGE), r;
            }),
            (t._instance = null),
            t
          );
        })();
        n.RequiredFieldValidator = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            Object.defineProperty(t, 'Instance', {
              get: function () {
                return t._instance || (t._instance = new t()), t._instance;
              },
              enumerable: !0,
              configurable: !0
            }),
            (t.prototype.validate = function (t, i) {
              var r =
                !n.Util.isNullOrUndefined(t) &&
                t.trim &&
                !n.Util.isNullOrEmptyString(t.trim()) &&
                t.toLowerCase() !== 'false';
              return r || n.Util.isNullOrUndefined(i) || i.push(n.Loader.Locale.REQUIRED_FIELD_MISSING_MESSAGE), r;
            }),
            (t._instance = null),
            t
          );
        })();
        n.RequiredBooleanFieldValidator = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t, i, r, u;
        (function (n) {
          n[(n.Pending = 0)] = 'Pending';
          n[(n.Complete = 1)] = 'Complete';
        })((t = n.WidgetLoadingState || (n.WidgetLoadingState = {}))),
          (function (n) {
            n[(n.NewChat = 0)] = 'NewChat';
            n[(n.ExistingChat = 1)] = 'ExistingChat';
          })((i = n.ChatType || (n.ChatType = {}))),
          (function (n) {
            n[(n.ChatNotStarted = 0)] = 'ChatNotStarted';
            n[(n.ChatStarted = 1)] = 'ChatStarted';
          })((r = n.ChatState || (n.ChatState = {}))),
          (function (n) {
            n.Accept = 'accept';
            n.Reject = 'reject';
            n.Connect = 'connect';
            n.End = 'end';
          })((u = n.SecondaryChannelEvents || (n.SecondaryChannelEvents = {})));
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = (function () {
          function i() {
            this.initializeLoader();
            t.Util.setAriaLiveAlert();
          }
          return (
            (i.startSessionInit = function () {
              var n = this;
              return new Promise(function (r, u) {
                return __awaiter(n, void 0, void 0, function () {
                  var n, c, e, o, f, h, s;
                  return __generator(this, function (l) {
                    switch (l.label) {
                      case 0:
                        return t.Utility.validateIfSessionInitIsStartedOrComplete(this.currentConversation)
                          ? (r(), [2])
                          : ((n = i.currentRequestId),
                            t.Bootstrapper.debugInfo.addSessionInitRequestId(n),
                            (c = t.Util.timer()),
                            (e = function () {
                              i.currentConversation.sessionInitState = t.SessionInitState.SessionInitComplete;
                              i.currentConversation.portalContactId = i.initContext.portalcontactid;
                              t.ContextSpecificDataStore.UpsertData(
                                t.DataContextType.UserContext |
                                  t.DataContextType.WidgetContext |
                                  t.DataContextType.OrganizationContext,
                                t.WidgetDataKeys.ConversationData,
                                i.currentConversation
                              );
                              r();
                            }),
                            (o = function (n) {
                              u(n);
                            }),
                            t.ContextService.addCustomContextData(),
                            (i.initContext.isProactiveChat = i.currentConversation.isProactiveChat),
                            (f = {
                              initContext: {
                                locale: i.initContext.locale,
                                originurl: i.initContext.originurl,
                                preChatResponse: i.initContext.preChatResponse,
                                customContextData: i.initContext.customContextData,
                                portalcontactid: i.initContext.fetchPortalContactId(),
                                latitude: i.initContext.latitude,
                                longitude: i.initContext.longitude
                              },
                              getContext: !0
                            }),
                            !i.liveChatConfig.authClientFunction)
                          ? [3, 3]
                          : ((s = i.authTokenProvider), s)
                          ? [3, 2]
                          : [4, t.Util.getAuthTokenMethodFromString(i.liveChatConfig.authClientFunction, !0)];
                      case 1:
                        s = l.sent();
                        l.label = 2;
                      case 2:
                        if (((h = s), h))
                          try {
                            h(function (r) {
                              if (t.Util.isNullOrEmptyString(r)) {
                                var u = new Error('Received empty token');
                                t.LCWErrorTypes.raiseErrorEvent(
                                  t.LCWErrorCode.LCW_AUTHTOKENPROVIDER_NO_TOKEN_RECEIVED,
                                  u
                                );
                              } else (i.initContext.authenticatedUserToken = r), (f.authenticatedUserToken = r);
                              i.currentConversation.sessionInitState = t.SessionInitState.SessionInitStarted;
                              t.OmnichannelProxy.getInstance().sessionInit(n, f).then(e, o);
                            });
                          } catch (a) {
                            t.TelemetryClient.info({
                              Event: t.TelemetryEvent.AuthClientMethodException,
                              ExceptionDetails: a
                            });
                            t.LCWErrorTypes.raiseErrorEvent(t.LCWErrorCode.LCW_AUTHTOKENPROVIDER_METHOD_FAIL, a);
                            t.OmnichannelProxy.getInstance().sessionInit(n, f).then(e, o);
                          }
                        else
                          t.TelemetryClient.info({
                            Event: t.TelemetryEvent.InvalidAuthClientMethod,
                            ExceptionDetails: { ErrorDetails: 'Undefined method found for LivechatConfig' }
                          });
                        return [3, 4];
                      case 3:
                        t.OmnichannelProxy.getInstance().sessionInit(n, f).then(e, o);
                        l.label = 4;
                      case 4:
                        return [2];
                    }
                  });
                });
              });
            }),
            (i.prototype.createLoaderPromise = function () {
              i.loaderPromise = new Promise(function (n, t) {
                i.loaderPromiseResolver = n;
                i.loaderPromiseRejecter = t;
              });
            }),
            (i.prototype.initializeLoader = function () {
              var r = this;
              t.Util.isNullOrUndefined(t.Bootstrapper.bootStrappingPromise)
                ? setTimeout(function () {
                    return r.initializeLoader();
                  }, t.ConfigurationManager.BootstrapperPromiseStateCheckInterval)
                : (this.createLoaderPromise(),
                  t.Bootstrapper.bootStrappingPromise.then(function () {
                    i.Locale = n.Omnichannel.LiveChatWidget.Locale;
                    i.liveChatConfig = t.Bootstrapper.LiveChatConfiguration;
                    t.Bootstrapper.debugInfo.setWebChatVersion(t.ConfigurationManager.WebChatSdkVersion);
                    t.Bootstrapper.debugInfo.setOcSdkVersion(t.ConfigurationManager.OmnichannelSdkVersion);
                    r.initializeLiveChatWidget();
                  }));
            }),
            (i.prototype.initializeLiveChatWidget = function () {
              var n = this;
              return t.ContextService.setInitContext()
                .then(function () {
                  return t.Bootstrapper.debugInfo.addDebugButtonIfNotPresent();
                })
                .then(function () {
                  return t.Bootstrapper.debugInfo.setDebugButtonDisplay();
                })
                .then(function () {
                  return t.Bootstrapper.debugInfo.setRuntimeId(t.Bootstrapper.lcwRuntimeId);
                })
                .then(function () {
                  return i.initializeConversationFromCache();
                })
                .then(function () {
                  return n.injectRootComponent();
                })
                .then(function () {
                  return i.loaderPromiseResolver();
                })
                .catch(function () {
                  return i.loaderPromiseRejecter();
                })
                .then(function () {
                  return i.getLocation();
                });
            }),
            (i.initializeConversationFromCache = function () {
              var n = t.ContextSpecificDataStore.GetData(
                t.DataContextType.UserContext | t.DataContextType.WidgetContext | t.DataContextType.OrganizationContext,
                t.WidgetDataKeys.ConversationData
              );
              n && ((i.currentConversation = n), (i.currentRequestId = n.currentRequestId));
            }),
            (i.prototype.injectRootComponent = function () {
              var n = document.getElementById(t.HtmlIdNames.chatRootReactId);
              n || t.renderMain();
            }),
            (i.fetchChatToken = function () {
              return new Promise(function (n, r) {
                var u = t.Util.newGuid(),
                  f;
                i.currentRequestId = u;
                t.Bootstrapper.debugInfo.addGetChatTokenRequestId(u);
                f = t.Util.timer();
                t.OmnichannelProxy.getInstance()
                  .getChatToken(u)
                  .then(
                    function (r) {
                      i.currentConversation.token = new t.Token();
                      i.currentConversation.chatId = r.ChatId;
                      i.currentConversation.token.skypeToken = r.Token;
                      i.currentConversation.token.expiresIn = r.ExpiresIn;
                      i.currentConversation.token.visitorId = r.VisitorId;
                      i.currentConversation.currentRequestId = u;
                      i.currentConversation.regionGtms = JSON.parse(r.RegionGtms);
                      i.currentConversation.conversationStartTime = new Date();
                      i.currentConversation.userId = r.VisitorId;
                      var f = t.ConfigurationManager.TokenRefreshTime;
                      t.ContextSpecificDataStore.UpsertData(
                        t.DataContextType.UserContext |
                          t.DataContextType.WidgetContext |
                          t.DataContextType.OrganizationContext,
                        t.WidgetDataKeys.ConversationData,
                        i.currentConversation,
                        f
                      );
                      n();
                    },
                    function (n) {
                      r(n);
                    }
                  );
              });
            }),
            (i.sendSessionCloseEvent = function (n) {
              var r = this;
              return new Promise(function (u) {
                return __awaiter(r, void 0, void 0, function () {
                  var s, r, f, o, e;
                  return __generator(this, function (h) {
                    switch (h.label) {
                      case 0:
                        return ((s = t.Util.timer()),
                        t.Bootstrapper.debugInfo.addSessionCloseRequestId(n.currentRequestId),
                        (r = function () {
                          u();
                        }),
                        (f = function () {}),
                        !i.liveChatConfig.authClientFunction)
                          ? [3, 3]
                          : ((e = i.authTokenProvider), e)
                          ? [3, 2]
                          : [4, t.Util.getAuthTokenMethodFromString(i.liveChatConfig.authClientFunction, !0)];
                      case 1:
                        e = h.sent();
                        h.label = 2;
                      case 2:
                        if (((o = e), o))
                          try {
                            o(function (i) {
                              if (t.Util.isNullOrEmptyString(i)) {
                                var u = new Error('Received empty token');
                                t.LCWErrorTypes.raiseErrorEvent(
                                  t.LCWErrorCode.LCW_AUTHTOKENPROVIDER_NO_TOKEN_RECEIVED,
                                  u
                                );
                              }
                              t.OmnichannelProxy.getInstance().sessionClose(n.currentRequestId).then(r, f);
                            });
                          } catch (c) {
                            t.TelemetryClient.info({
                              Event: t.TelemetryEvent.AuthClientMethodException,
                              ExceptionDetails: c
                            });
                            t.LCWErrorTypes.raiseErrorEvent(t.LCWErrorCode.LCW_AUTHTOKENPROVIDER_METHOD_FAIL, c);
                            t.OmnichannelProxy.getInstance().sessionClose(n.currentRequestId).then(r, f);
                          }
                        else
                          t.TelemetryClient.info({
                            Event: t.TelemetryEvent.InvalidAuthClientMethod,
                            ExceptionDetails: { ErrorDetails: 'Undefined method found for LivechatConfig' }
                          });
                        return [3, 4];
                      case 3:
                        t.OmnichannelProxy.getInstance().sessionClose(n.currentRequestId).then(r, f);
                        h.label = 4;
                      case 4:
                        return [2];
                    }
                  });
                });
              });
            }),
            (i.getLocation = function () {
              var r = t.LocationInfo.requestLocationDetection(),
                n;
              r
                ? ((n = t.LocationInfo.getLocationInfo()),
                  n.then(function (n) {
                    i.initContext.latitude = n.latitude.toString();
                    i.initContext.longitude = n.longitude.toString();
                  }))
                : ((i.initContext.latitude = ''), (i.initContext.longitude = ''));
            }),
            (i.handleSecondaryChannelEvent = function (n, r) {
              if (!t.Util.isNullOrUndefined(i.currentConversation.currentRequestId)) {
                var f = i.currentConversation,
                  u = new t.SecondaryChannelEventBody();
                u.SecondaryChannelType = n;
                u.SecondaryChannelEventType = r;
                i.secondaryChannelEvent(f, u);
              }
            }),
            (i.secondaryChannelEvent = function (n, r) {
              var f = this,
                u = null;
              return new Promise(function (e) {
                return __awaiter(f, void 0, void 0, function () {
                  var c, f, o, h, s;
                  return __generator(this, function (l) {
                    switch (l.label) {
                      case 0:
                        return ((c = t.Util.timer()),
                        t.Bootstrapper.debugInfo.addSecondaryChannelEventRequestId(n.currentRequestId),
                        (f = function () {
                          t.TelemetryClient.info({
                            Event: t.TelemetryEvent.SecondaryChannelEventSuccess,
                            ElapsedTimeInMilliseconds: c.milliSecondsElapsed
                          });
                          e();
                        }),
                        (o = function (n) {
                          t.TelemetryClient.error({
                            Event: t.TelemetryEvent.SecondaryChannelEventFailure,
                            ExceptionDetails: n
                          });
                        }),
                        !i.liveChatConfig.authClientFunction)
                          ? [3, 3]
                          : ((s = i.authTokenProvider), s)
                          ? [3, 2]
                          : [4, t.Util.getAuthTokenMethodFromString(i.liveChatConfig.authClientFunction, !0)];
                      case 1:
                        s = l.sent();
                        l.label = 2;
                      case 2:
                        if (((h = s), h))
                          try {
                            h(function (i) {
                              if (t.Util.isNullOrEmptyString(i)) {
                                var e = new Error('Received empty token');
                                t.LCWErrorTypes.raiseErrorEvent(
                                  t.LCWErrorCode.LCW_AUTHTOKENPROVIDER_NO_TOKEN_RECEIVED,
                                  e
                                );
                              } else u = i;
                              t.OmnichannelProxy.getInstance()
                                .makeSecondaryChannelEventRequest(n.currentRequestId, r, u)
                                .then(f, o);
                            });
                          } catch (a) {
                            t.TelemetryClient.info({ Event: t.TelemetryEvent.AuthClientMethodException });
                            t.LCWErrorTypes.raiseErrorEvent(t.LCWErrorCode.LCW_AUTHTOKENPROVIDER_METHOD_FAIL, a);
                            t.OmnichannelProxy.getInstance()
                              .makeSecondaryChannelEventRequest(n.currentRequestId, r, u)
                              .then(f, o);
                          }
                        else t.TelemetryClient.info({ Event: t.TelemetryEvent.InvalidAuthClientMethod });
                        return [3, 4];
                      case 3:
                        t.OmnichannelProxy.getInstance()
                          .makeSecondaryChannelEventRequest(n.currentRequestId, r)
                          .then(f, o);
                        l.label = 4;
                      case 4:
                        return [2];
                    }
                  });
                });
              });
            }),
            (i.liveChatConfig = null),
            (i.currentConversation = new t.Conversation()),
            (i.isPreChatEnabledForProactiveChat = !0),
            (i.getChatTokenPromise = null),
            (i.sessionInitPromise = null),
            (i.proactiveChatNotificationConfig = null),
            (i.loaderPromise = null),
            i
          );
        })();
        t.Loader = i;
      })((i = t.LiveChatWidget || (t.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {}));
window.isMock ||
  (function () {
    new Microsoft.Omnichannel.LiveChatWidget.Loader();
  })('docReady', window),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t;
        (function (n) {
          function t(n, t) {
            ReactDOM.render(n, t);
          }
          n.ReactRender = t;
        })((t = n.Render || (n.Render = {})));
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.createResizeMessage = function (t) {
              return {
                messageName: n.IFrameValues.resizeMSLcwIframe,
                id: n.HtmlIdNames.MicrosoftOmnichannelLCWidgetChatIframePageId,
                className: t
              };
            }),
            (t.getResizeClassName = function (t) {
              var i = n.IFrameValues.defaultClassName,
                r = n.IFrameValues.rightBottom;
              return (
                n.Util.isNullOrUndefined(n.Bootstrapper) ||
                  n.Util.isNullOrUndefined(n.Bootstrapper.LiveChatConfiguration) ||
                  n.Util.isNullOrUndefined(n.Bootstrapper.LiveChatConfiguration.chatButtonPosition) ||
                  (r = n.Bootstrapper.LiveChatConfiguration.chatButtonPosition),
                n.Util.isNullOrEmptyString(t) || (i = t),
                i.concat(' ').concat(r)
              );
            }),
            (t.resizeFrame = function (t, i) {
              if (n.Util.isNullOrUndefined(t) || n.Util.isNullOrEmptyString(i)) {
                console.error('Failed to resize parent window; invalid parameters: ', t);
                return;
              }
              var r = t.parent,
                u = this.getResizeClassName(i);
              r
                ? r.postMessage(this.createResizeMessage(u), '*')
                : console.error('Failed to find parent window during resizeFrame! ', r);
            }),
            (t.setToDefaultSize = function (t) {
              this.resizeFrame(t, n.IFrameValues.webChatPanel);
            }),
            t
          );
        })();
        n.FrameHandler = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.getFileAttachmentIconData = function (i, r) {
              r === void 0 && (r = n.TextDirection.LTR);
              var e = i.startsWith('.') ? i.slice(1) : i || '',
                u = t.FileAttachmentIconMap[e.toLowerCase()] || t.BlankIcon,
                f = {
                  padding:
                    r === n.TextDirection.RTL
                      ? n.Constants.AttachmentIconStyle.RTLDefaultPadding
                      : n.Constants.AttachmentIconStyle.defaultPadding
                };
              return (
                (u === t.ImageIcon || u === t.BlankIcon) &&
                  (f.padding =
                    r === n.TextDirection.RTL
                      ? n.Constants.AttachmentIconStyle.RTLImagePadding
                      : n.Constants.AttachmentIconStyle.imagePadding),
                { icon: u, attachmentStyle: f }
              );
            }),
            (t.imageRegex = /(\.)(jpeg|jpg|jiff|png|gif|bmp)$/i),
            (t.ArchiveIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d:
                  'M1792 0q27 0 50 10t40 27 28 41 10 50v480q0 45-9 77t-24 58-31 46-31 40-23 44-10 55v992q0 27-10 50t-27 40-41 28-50 10H256V0h1536zM640 128v384h256V128H640zm1024 800q0-31-9-54t-24-44-31-41-31-45-23-58-10-78V128h-512v512H768v128H640V640H512V128H384v1792h384v-128h128v128h768V928zm128-800h-128v480q0 24 4 42t13 33 20 29 27 32q15-17 26-31t20-30 13-33 5-42V128zM640 896h128v128H640V896zm0 256h128v128H640v-128zm0 256h128v128H640v-128zm128 256v128H640v-128h128zm0-768V768h128v128H768zm0 256v-128h128v128H768zm0 256v-128h128v128H768zm0 256v-128h128v128H768z'
              })
            )),
            (t.AudioIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d:
                  'M1792 1408q0 62-29 109t-76 80-104 50-111 17q-54 0-111-17t-103-49-76-80-30-110q0-61 29-109t76-80 104-50 111-17q51 0 100 12t92 39V226L768 450v1214q0 62-29 109t-76 80-104 50-111 17q-54 0-111-17t-103-49-76-80-30-110q0-61 29-109t76-80 104-50 111-17q51 0 100 12t92 39V350L1792 62v1346z'
              })
            )),
            (t.BlankIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d: 'M549 0h1243v1755l-293 293H256V293L549 0zm1115 1701V128H603L384 347v1573h1061l219-219z'
              })
            )),
            (t.ExcelIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d:
                  'M2048 475v1445q0 27-10 50t-27 40-41 28-50 10H640q-27 0-50-10t-40-27-28-41-10-50v-256H115q-24 0-44-9t-37-25-25-36-9-45V627q0-24 9-44t25-37 36-25 45-9h397V128q0-27 10-50t27-40 41-28 50-10h933q26 0 49 9t42 28l347 347q18 18 27 41t10 50zm-384-256v165h165l-165-165zM261 1424h189q2-4 12-23t25-45 29-55 29-53 23-41 10-17q27 59 60 118t65 116h187l-209-339 205-333H707q-31 57-60 114t-63 112q-29-57-57-113t-57-113H279l199 335-217 337zm379 496h1280V512h-256q-27 0-50-10t-40-27-28-41-10-50V128H640v384h397q24 0 44 9t37 25 25 36 9 45v922q0 24-9 44t-25 37-36 25-45 9H640v256zm640-1024V768h512v128h-512zm0 256v-128h512v128h-512zm0 256v-128h512v128h-512z'
              })
            )),
            (t.ImageIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d:
                  'M256 1920h1536v128H128V0h1115l549 549v91h-640V128H256v1792zM1280 512h293l-293-293v293zm768 256v1024H640V768h1408zM768 896v421l320-319 416 416 160-160 256 256V896H768zm987 768h139l-230-230-69 70 160 160zm-987 0h805l-485-486-320 321v165zm960-512q-26 0-45-19t-19-45q0-26 19-45t45-19q26 0 45 19t19 45q0 26-19 45t-45 19z'
              })
            )),
            (t.OneNoteIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d:
                  'M1963 128q35 0 60 25t25 60v1622q0 35-25 60t-60 25H597q-35 0-60-25t-25-60v-299H85q-35 0-60-25t-25-60V597q0-35 25-60t60-25h427V213q0-35 25-60t60-25h1366zM389 939l242 420h152V689H635v429L402 689H241v670h148V939zm1531 853v-256h-256v256h256zm0-384v-256h-256v256h256zm0-384V768h-256v256h256zm0-384V256H640v256h299q35 0 60 25t25 60v854q0 35-25 60t-60 25H640v256h896V640h384z'
              })
            )),
            (t.PDFIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d:
                  'M1920 1664h-128v384H128v-384H0V640h128V0h1243l421 421v219h128v1024zM1408 384h165l-165-165v165zM256 640h1408V512h-384V128H256v512zm1408 1024H256v256h1408v-256zm128-896H128v768h1664V768zM448 896q40 0 75 15t61 41 41 61 15 75q0 40-15 75t-41 61-61 41-75 15h-64v128H256V896h192zm0 256q26 0 45-19t19-45q0-26-19-45t-45-19h-64v128h64zm448-256q53 0 99 20t82 55 55 81 20 100q0 53-20 99t-55 82-81 55-100 20H768V896h128zm0 384q27 0 50-10t40-27 28-41 10-50q0-27-10-50t-27-40-41-28-50-10v256zm384-384h320v128h-192v128h192v128h-192v128h-128V896z'
              })
            )),
            (t.PowerpointIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d:
                  'M2048 475v1445q0 27-10 50t-27 40-41 28-50 10H640q-27 0-50-10t-40-27-28-41-10-50v-256H115q-24 0-44-9t-37-25-25-36-9-45V627q0-24 9-44t25-37 36-25 45-9h397V128q0-27 10-50t27-40 41-28 50-10h933q26 0 49 9t42 28l347 347q18 18 27 41t10 50zm-384-256v165h165l-165-165zM368 752v672h150v-226h100q52 0 97-15t78-46 53-72 20-97q0-56-17-97t-50-67-76-39-97-13H368zm1552 1168V512h-256q-27 0-50-10t-40-27-28-41-10-50V128H640v384h397q24 0 44 9t37 25 25 36 9 45v922q0 24-9 44t-25 37-36 25-45 9H640v256h1280zM1536 640q79 0 149 30t122 82 83 123 30 149h-384V640zm-128 128v384h384q0 80-30 149t-82 122-123 83-149 30q-33 0-65-6t-63-18V792q31-11 63-17t65-7zm-804 300h-86V883h90q47 0 74 20t27 70q0 52-28 73t-77 22z'
              })
            )),
            (t.VideoIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d:
                  'M0 256h2048v1408H0V256zm256 1280v-128H128v128h128zm0-256v-128H128v128h128zm0-256V896H128v128h128zm0-256V640H128v128h128zm0-256V384H128v128h128zm1408 786V384H384v823l411-549 741 878-329-558 137-137 320 457zm256 238v-128h-128v128h128zm0-256v-128h-128v128h128zm0-256V896h-128v128h128zm0-256V640h-128v128h128zm0-256V384h-128v128h128z'
              })
            )),
            (t.VisioIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d:
                  'M2048 475v1445q0 27-10 50t-27 40-41 28-50 10H640q-27 0-50-10t-40-27-28-41-10-50v-256H115q-24 0-44-9t-37-25-25-36-9-45V627q0-24 9-44t25-37 36-25 45-9h397V128q0-27 10-50t27-40 41-28 50-10h933q26 0 49 9t42 28l347 347q18 18 27 41t10 50zm-384-256v165h165l-165-165zM493 1424h163l255-672H745l-147 427q-5 16-10 31t-11 31q-41-123-82-244t-84-245H241l248 662 4 10zm147 496h1280V512h-256q-27 0-50-10t-40-27-28-41-10-50V128H640v384h397q24 0 44 9t37 25 25 36 9 45v922q0 24-9 44t-25 37-36 25-45 9H640v256zm960-1280l192 192-128 128v448h-256v128h-128v-384h128v128h128V960l-128-128 192-192z'
              })
            )),
            (t.WordIcon = React.createElement(
              'svg',
              {
                xmlns: 'http://www.w3.org/2000/svg',
                viewBox: '0 0 2048 2048',
                width: n.Constants.AttachmentIconStyle.iconSize,
                height: n.Constants.AttachmentIconStyle.iconSize
              },
              React.createElement('path', {
                d:
                  'M2048 475v1445q0 27-10 50t-27 40-41 28-50 10H640q-27 0-50-10t-40-27-28-41-10-50v-256H115q-24 0-44-9t-37-25-25-36-9-45V627q0-24 9-44t25-37 36-25 45-9h397V128q0-27 10-50t27-40 41-28 50-10h933q26 0 49 9t42 28l347 347q18 18 27 41t10 50zm-384-256v165h165l-165-165zM320 1424h161q2-8 9-43t18-83 21-103 22-101 16-76 8-31l7 30q7 30 17 77t23 100 23 103 19 84 10 43h160l148-672H834l-80 438-100-438H502l-96 440-86-440H170l150 672zm320 496h1280V512h-256q-27 0-50-10t-40-27-28-41-10-50V128H640v384h397q24 0 44 9t37 25 25 36 9 45v922q0 24-9 44t-25 37-36 25-45 9H640v256zm640-1024V768h512v128h-512zm0 256v-128h512v128h-512zm0 256v-128h512v128h-512z'
              })
            )),
            (t.FileAttachmentIconMap = {
              aac: t.AudioIcon,
              aiff: t.AudioIcon,
              alac: t.AudioIcon,
              avchd: t.VideoIcon,
              avi: t.VideoIcon,
              bmp: t.ImageIcon,
              doc: t.WordIcon,
              docx: t.WordIcon,
              flac: t.AudioIcon,
              flv: t.VideoIcon,
              gif: t.ImageIcon,
              jiff: t.ImageIcon,
              jpeg: t.ImageIcon,
              jpg: t.ImageIcon,
              mpe: t.VideoIcon,
              mpeg: t.VideoIcon,
              mpg: t.VideoIcon,
              mpv: t.VideoIcon,
              mp2: t.AudioIcon,
              mp3: t.AudioIcon,
              mp4: t.VideoIcon,
              m4p: t.VideoIcon,
              m4v: t.VideoIcon,
              mov: t.VideoIcon,
              one: t.OneNoteIcon,
              pcm: t.AudioIcon,
              pdf: t.PDFIcon,
              png: t.ImageIcon,
              ppt: t.PowerpointIcon,
              pptx: t.PowerpointIcon,
              qt: t.VideoIcon,
              rar: t.ArchiveIcon,
              swf: t.VideoIcon,
              tar: t.ArchiveIcon,
              'tar.gz': t.ArchiveIcon,
              tgz: t.ArchiveIcon,
              txt: t.BlankIcon,
              vsd: t.VisioIcon,
              vsdx: t.VisioIcon,
              wav: t.AudioIcon,
              webm: t.VideoIcon,
              wma: t.AudioIcon,
              wmv: t.VideoIcon,
              xls: t.ExcelIcon,
              xlsx: t.ExcelIcon,
              zip: t.ArchiveIcon,
              zipx: t.ArchiveIcon,
              '7z': t.ArchiveIcon
            }),
            t
          );
        })();
        n.FileAttachmentIconManager = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.logChatWidgetLoadTime = function (t) {
              n.TelemetryClient.info({ Event: n.TelemetryEvent.WebChatLoaded, ElapsedTimeInMilliseconds: t });
            }),
            (t.logPrechatWidgetLoadTime = function (t) {
              n.TelemetryClient.info({ Event: n.TelemetryEvent.PrechatWidgetLoaded, ElapsedTimeInMilliseconds: t });
            }),
            (t.logPostchatWidgetLoadTime = function (t) {
              n.TelemetryClient.info({ Event: n.TelemetryEvent.PostchatWidgetLoaded, ElapsedTimeInMilliseconds: t });
            }),
            (t.logIncomingProactiveChatLoadTime = function (t) {
              n.TelemetryClient.info({
                Event: n.TelemetryEvent.IncomingProactiveChatScreenLoaded,
                ElapsedTimeInMilliseconds: t
              });
            }),
            (t.logProactiveChatCloseTimeAfterReject = function (t) {
              n.TelemetryClient.info({ Event: n.TelemetryEvent.ProactiveChatRejected, ElapsedTimeInMilliseconds: t });
            }),
            (t.logProactiveChatCloseTimeAfterTimeout = function (t) {
              n.TelemetryClient.info({
                Event: n.TelemetryEvent.ProactiveChatInvitationTimedOut,
                ElapsedTimeInMilliseconds: t
              });
            }),
            t
          );
        })();
        n.LogHelper = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var f = (function () {
            function n() {}
            return (
              (n.Script = 'script'),
              (n.Scripts = '/scripts/'),
              (n.WebChatVersionScripts = '/WebChatControl/scripts/'),
              (n.Lib = '/lib/'),
              (n.Head = 'head'),
              (n.Body = 'body'),
              (n.Meta = 'meta'),
              (n.Viewport = 'viewport'),
              (n.ViewportMetaContent = 'width=device-width, initial-scale=1.0'),
              (n.HostName = 'hostname'),
              (n.SRC = 'src'),
              (n.ID = 'id'),
              (n.Html = 'html'),
              (n.Iframe = 'iframe'),
              (n.ALLOW = 'allow'),
              (n.DataLcwVersion = 'data-lcw-version'),
              (n.ScriptSelector = 'script#'),
              (n.MicrosoftOmnichannelLCWidget = 'Microsoft_Omnichannel_LCWidget'),
              (n.JavascriptFlag = 'text/javascript'),
              (n.InitializerScriptDownloadTriggeredFlag = 'isOmniChannelBootstrapperWebChatDownloadTriggered'),
              (n.InitializerScriptPath = 'LiveChatWidgetScripts.min.js'),
              (n.LibsScriptPath = 'LiveChatWidgetLibs.min.js'),
              (n.MicrosoftOmnichannelLCWidgetChatIframePageId = 'Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window'),
              (n.MicrosoftOmnichannelLCWidgetChatIframePageStyleId =
                'Microsoft_Omnichannel_LCWidget_Chat_Iframe_Style'),
              (n.AllowValues = 'microphone *; camera *; geolocation *;'),
              (n.DataAppId = 'data-app-id'),
              (n.DataOrgUrl = 'data-org-url'),
              (n.DataOrgId = 'data-org-id'),
              (n.EnableTelemetry = 'data-enable-telemetry'),
              (n.URLDelimiter = '&'),
              (n.Equal = '='),
              (n.Class = 'class'),
              (n.Style = 'style'),
              (n.Title = 'title'),
              (n.LiveChatWidgetHideChatButton = 'data-hide-chat-button'),
              (n.RenderOnMobileDevice = 'data-render-mobile'),
              (n.SDK = 'SDK'),
              (n.Return = 'return'),
              (n.SPACE = ' '),
              (n.Microsoft = 'Microsoft'),
              (n.Dynamic365 = 'Dynamic365'),
              (n.Portal = 'Portal'),
              (n.User = 'User'),
              n
            );
          })(),
          t,
          i,
          r,
          u;
        n.BootstrapperConstants = f;
        t = (function () {
          function n() {}
          return (
            (n.Transparent = 'transparent'),
            (n.BackgroundColor = 'background-color'),
            (n.FrameBorder = 'frameBorder'),
            (n.AllowTransparency = 'allowTransparency'),
            (n.BorderWidth = 'border-width'),
            (n.ZIndex = 'z-index'),
            (n.Position = 'position'),
            (n.Right = 'right'),
            (n.Bottom = 'bottom'),
            (n.None = 'none'),
            n
          );
        })();
        n.StyleConstants = t;
        i = (function () {
          function n() {}
          return (
            (n.FrameBorderWidth = '0px'),
            (n.AllowTransparency = !0),
            (n.IFramePosition = 'fixed'),
            (n.IFrameBackgroundColor = 'transparent'),
            (n.IFrameZIndex = '999999'),
            n
          );
        })();
        n.DefaultCssValues = i;
        r = (function () {
          function n() {}
          return (
            (n.message = 'message'),
            (n.keydown = 'keydown'),
            (n.setContextProvider = 'setContextProvider'),
            (n.getContextProvider = 'getContextProvider'),
            (n.removeContextProvider = 'removeContextProvider'),
            (n.setAuthTokenProvider = 'setAuthTokenProvider'),
            (n.getAuthTokenProvider = 'getAuthTokenProvider'),
            (n.removeAuthTokenProvider = 'removeAuthTokenProvider'),
            (n.getContactInfoRequest = 'getContactInfoRequest'),
            (n.getContactInfoResponse = 'getContactInfoResponse'),
            (n.LcwReady = 'lcw:ready'),
            (n.LcwError = 'lcw:error'),
            (n.startChat = 'startChat'),
            (n.startProactiveChat = 'startProactiveChat'),
            (n.CustomEvent = 'CustomEvent'),
            n
          );
        })();
        n.EventConstants = r;
        u = (function () {
          function n() {}
          return (
            (n.resizeMSLcwIframe = 'resizeMSLcwIframe'),
            (n.authTokenRequest = 'authTokenRequest'),
            (n.authTokenResponse = 'authTokenResponse'),
            (n.removeKeyboardEventHandler = 'removeKeyboardEventHandler'),
            (n.repositionMSLcwIframe = 'repositionMSLcwIframe'),
            (n.webChatPanel = 'web_chat_panel'),
            (n.leftBottom = 'BottomLeft'),
            (n.rightBottom = 'BottomRight'),
            (n.hideIframe = 'hide_iframe'),
            (n.proactiveChatPanel = 'proactive_chat_panel'),
            (n.startChatButton = 'start_chat_button'),
            (n.defaultClassName = [n.webChatPanel, n.rightBottom, n.hideIframe]),
            (n.defaultStyle =
              '#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window{bottom:20px;right:20px}#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window.hide_iframe{display:none}#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window.start_chat_button{height:70px;width:195px}#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window.proactive_chat_panel{height:214px;width:255px}#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window.web_chat_panel{height:560px;width:360px}#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window.BottomRight{right:20px;bottom:20px}#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window.BottomLeft{left:20px;bottom:20px}@media screen and (max-height:600px){#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window.web_chat_panel{height:calc(100vh - 40px)}}@media screen and (max-width:470px){#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window.web_chat_panel.BottomLeft,#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window.web_chat_panel.BottomRight{right:0;left:0;bottom:0}#Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window.web_chat_panel{height:100%;width:100%;right:0;left:0;bottom:0}}'),
            (n.handleControlSlash = 'handleControlSlash'),
            (n.KEY_SLASH = 191),
            (n.iFrameTitle = 'Microsoft Omnichannel Live Chat Widget'),
            n
          );
        })();
        n.IFrameBootstrapperValues = u;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (t) {
      var i;
      (function (t) {
        var i = (function () {
          function i(n) {
            t.Loader.webChat = window[t.Constants.WebChat];
            t.Loader.react = window[t.Constants.React];
            this.config = n;
          }
          return (
            (i.prototype.createWebChat = function () {
              var n = this.checkIfBrowserIE();
              if (n) {
                this.onAppend(document.head, this.bootstrapChat.bind(this));
                this.getPolyfills();
              } else this.bootstrapChat();
            }),
            (i.prototype.onAppend = function (n, i) {
              var r = new MutationObserver(function (n) {
                n.forEach(function (n) {
                  if (n.addedNodes[0].attributes[0].nodeValue.indexOf(t.Constants.WebChatIEPolyfillsBaseURL) > -1)
                    var r = setInterval(function () {
                      String.prototype.includes && (clearInterval(r), i());
                    }, 200);
                });
              });
              r.observe(n, { childList: !0 });
            }),
            (i.prototype.generatePolyfillsURL = function () {
              var n = t.Constants.WebChatIEPolyfillsBaseURL + '?features=';
              for (var i in t.Constants.WebChatIEPolyfillsFeatures)
                n = n + '%2C' + t.Constants.WebChatIEPolyfillsFeatures[i];
              return n;
            }),
            (i.prototype.bootstrapChat = function () {
              this.createContainer();
              this.initStyleSet();
              this.createRuntimeStyle();
              this.initMiddlewares();
              this.initStores();
              this.initIC3Adapter();
              this.createMarkdown();
              this.renderWebChat();
            }),
            (i.prototype.getPolyfills = function () {
              var t = document.createElement('script');
              t.setAttribute(n.Omnichannel.LiveChatWidget.BootstrapperConstants.SRC, this.generatePolyfillsURL());
              document.head.appendChild(t);
            }),
            (i.prototype.checkIfBrowserIE = function () {
              var n = window.navigator.userAgent;
              return n.indexOf('Trident') > -1;
            }),
            (i.prototype.createContainer = function () {
              var i = document.getElementById(t.HtmlIdNames.webChatRoot),
                n = document.createElement(t.Constants.HTMLConstants.div);
              n.id = t.HtmlIdNames.webChatRootDiv;
              i.appendChild(n);
            }),
            (i.prototype.createRuntimeStyle = function () {
              var n, i;
              try {
                document &&
                  ((n = document.createElement(t.HtmlAttributeNames.style)),
                  n &&
                    ((n.innerHTML = this.getReceivedMessageStyle().concat(this.getSuggestedActionStyle())),
                    n.setAttribute(t.HtmlAttributeNames.type, t.HtmlAttributeNames.csstext),
                    (i = document.getElementsByTagName(t.HtmlAttributeNames.head)),
                    i && i[0] && i[0].appendChild(n)));
              } catch (r) {
                console.error('Failed to attach runtime styling: ', r);
              }
            }),
            (i.prototype.getReceivedMessageStyle = function () {
              var n = t.Util.isNullOrEmptyString(t.ConfigurationManager.WebChatStyles.receivedMesageBackground)
                  ? t.Bootstrapper.lcConfig.bubbleColor
                  : t.ConfigurationManager.WebChatStyles.receivedMesageBackground,
                i = t.Util.isNullOrEmptyString(t.ConfigurationManager.WebChatStyles.receivedMesageTextColor)
                  ? this.defaultWebChatParams.receivedMesageTextColor
                  : t.ConfigurationManager.WebChatStyles.receivedMesageTextColor;
              return (
                '.ms_lcw_webchat_received_message>[class^=css]>div>.webchat__row.message>[class^=css]:not(.from-user)>.webchat__bubble__content{color:' +
                i +
                ';background-color:' +
                n +
                '}'
              );
            }),
            (i.prototype.getSuggestedActionStyle = function () {
              return (
                '#web-chat-root-div>div>div[role=form][class^=css]>div[role=status]>div[class^=css]>div[class^=css]>div[class^=css]>ul>li>div>button{border-color:' +
                t.Bootstrapper.lcConfig.bubbleColor +
                ';color:' +
                t.Bootstrapper.lcConfig.bubbleColor +
                '}'
              );
            }),
            (i.prototype.initStyleSet = function () {
              this.defaultWebChatParams = {
                backgroundColor: '#F7F7F9',
                receivedMesageBackground: this.config.bubbleColor,
                bubbleBackground: 'White',
                bubbleBorderRadius: 4,
                bubbleBorderWidth: 0,
                bubbleFromUserBackground: t.HtmlCssConstants.webChatUserBubbleDefaultColor,
                bubbleFromUserBorderRadius: 4,
                bubbleFromUserBorderWidth: 1,
                bubbleFromUserTextColor: 'Black',
                bubbleImageHeight: 240,
                bubbleMaxWidth: 250,
                bubbleMinHeight: 34,
                bubbleMinWidth: 20,
                receivedMesageTextColor: 'White',
                bubbleTextColor: 'Black',
                sendBoxTextWrap: !0,
                sendBoxMaxHeight: 96,
                sendBoxBackground: 'White',
                hideUploadButton: !this.config.canUploadFile
              };
              this.styleSet = t.ConfigurationManager.ShouldOverrideWebChatStyles
                ? t.Loader.webChat.createStyleSet(
                    __assign({}, this.defaultWebChatParams, t.ConfigurationManager.WebChatStyles)
                  )
                : t.Loader.webChat.createStyleSet(__assign({}, this.defaultWebChatParams));
            }),
            (i.prototype.initMiddlewares = function () {
              this.activityMiddleware = t.createActivityMiddleware();
              this.activityStatusMiddleware = t.createActivityStatusMiddleware();
              this.attachmentMiddleware = t.createAttachmentMiddleware();
              this.avatarMiddleware = t.createAvatarMiddleware();
              this.typingIndicatorMiddleware = t.createTypingIndicatorMiddleware();
              this.webChatTelemetry = t.createWebChatTelemetry();
            }),
            (i.prototype.initStores = function () {
              var n = t.StoreFactory.getInstance();
              n.setWebChat(t.Loader.webChat);
              t.Loader.store = n.createWebChatStore();
            }),
            (i.prototype.initIC3Adapter = function () {
              var n = function (n) {
                n.id && n.message && t.NotificationHandler.notifyWithLevel(n.id, n.message, n.level);
              };
              // HACK
              // t.Loader.IC3Adapter = new window[t.Constants.Microsoft][t.Constants.BotFramework][
              //   t.Constants.WebChat
              // ].IC3Adapter(
              t.Loader.IC3Adapter = window.Microsoft.BotFramework.WebChat.createIC3Adapter(
                {
                  chatToken: {
                    chatId: t.Loader.currentConversation.chatId,
                    regionGTMS: t.Loader.currentConversation.regionGtms,
                    requestId: t.Loader.currentConversation.currentRequestId,
                    token: t.Loader.currentConversation.token.skypeToken
                  },
                  userDisplayName: t.Constants.CustomerDisplayName,
                  userId: t.Loader.currentConversation.userId || t.Constants.DefaultUserId,
                  callbackOnNotification: n,
                  sdkURL: t.ScriptPaths.IC3ClientPath.replace('{VERSION}', t.ConfigurationManager.IC3ClientVersion)
                },
                new t.IC3ClientSdkLogger()
              );
            }),
            (i.prototype.createMarkdown = function () {
              t.Loader.MarkdownItForInline = window[t.Constants.MarkdownItForInline];
              t.Loader.MarkdownIt = new window[t.Constants.MarkdownIt](t.Constants.Zero, { html: !0, linkify: !0 });
              t.Loader.MarkdownIt.use(t.Loader.MarkdownItForInline, 'url_new_win', 'link_open', function (n, i) {
                var u = n[i].attrIndex(t.Constants.Target),
                  r;
                ~u ? (n[i].attrs[u][1] = t.Constants.Blank) : n[i].attrPush([t.Constants.Target, t.Constants.Blank]);
                r = n[i].attrIndex(t.Constants.TargetRelationship);
                ~r
                  ? (n[i].attrs[r][1] = t.Constants.TargetRelationshipAttributes)
                  : n[i].attrPush([t.Constants.Target, t.Constants.TargetRelationshipAttributes]);
              });
              t.Loader.MarkdownIt.enable(['entity', 'linkify', 'html_inline', 'newline']);
            }),
            (i.prototype.renderMarkDown = function (n) {
              return t.Loader.MarkdownIt.renderInline(n);
            }),
            (i.prototype.internetConnectionChangeHandler = function () {
              return __awaiter(this, void 0, void 0, function () {
                var n;
                return __generator(this, function (i) {
                  switch (i.label) {
                    case 0:
                      return [4, t.ConnectivityManager.isInternetConnected()];
                    case 1:
                      return (
                        (n = i.sent()),
                        n
                          ? t.NotificationHandler.notifySuccess(
                              t.NotificationScenarios.InternetConnection,
                              t.Loader.Locale.BANNER_INTERNET_BACK_ONLINE
                            )
                          : t.NotificationHandler.notifyError(
                              t.NotificationScenarios.InternetConnection,
                              t.Loader.Locale.BANNER_NO_INTERNET_CONNECTION
                            ),
                        [2]
                      );
                  }
                });
              });
            }),
            (i.prototype.renderWebChat = function () {
              var n = this;
              t.Loader.webChat.renderWebChat(
                {
                  activityMiddleware: this.activityMiddleware,
                  activityStatusMiddleware: this.activityStatusMiddleware,
                  attachmentMiddleware: this.attachmentMiddleware,
                  avatarMiddleware: this.avatarMiddleware,
                  directLine: t.Loader.IC3Adapter,
                  locale: t.Loader.liveChatConfig.chatWidgetLocale,
                  sendTypingIndicator: !0,
                  styleSet: this.styleSet,
                  store: t.Loader.store,
                  renderMarkdown: this.renderMarkDown,
                  typingIndicatorMiddleware: this.typingIndicatorMiddleware,
                  username: t.Constants.CustomerDisplayName,
                  userID: t.Loader.currentConversation.userId,
                  onTelemetry: this.webChatTelemetry
                },
                document.getElementById(t.HtmlIdNames.webChatRootDiv)
              );
              window.addEventListener(
                'online',
                function () {
                  return n.internetConnectionChangeHandler();
                },
                !1
              );
              window.addEventListener(
                'offline',
                function () {
                  return n.internetConnectionChangeHandler();
                },
                !1
              );
            }),
            i
          );
        })();
        t.WebChat = i;
      })((i = t.LiveChatWidget || (t.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function (t) {
          function i() {
            return t.call(this) || this;
          }
          return (
            __extends(i, t),
            (i.prototype.render = function () {
              var t = this.props.actionBarActive
                  ? n.HtmlClassNames.actionBarActive
                  : n.HtmlClassNames.actionBarInactive,
                i = this.props.headerActive ? n.HtmlClassNames.headerActive : n.HtmlClassNames.headerInactive;
              return React.createElement('div', {
                className: n.HtmlClassNames.webChat + ' ' + t + '-' + i,
                id: n.HtmlIdNames.webChatRoot,
                role: n.HtmlAttributeNames.region
              });
            }),
            i
          );
        })(React.Component);
        n.WebChatRoot = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = '([\\d,.]+)',
          i;
        n.UNKNOWN_VERSION = 'U';
        i = (function () {
          function i() {}
          return (
            (i.userAgentContainsString = function (n) {
              return this.userAgent.indexOf(n) > -1;
            }),
            (i.isChrome = function () {
              return (
                this.userAgentContainsString(n.BrowserVendor.CHROME) &&
                !this.userAgentContainsString(n.BrowserVendor.EDGE) &&
                !this.userAgentContainsString(n.BrowserVendor.EDGE_CHROMIUM)
              );
            }),
            (i.isIe = function () {
              return this.userAgentContainsString('Trident');
            }),
            (i.isEdge = function () {
              return (
                this.userAgentContainsString(n.BrowserVendor.EDGE) ||
                this.userAgentContainsString(n.BrowserVendor.EDGE_CHROMIUM)
              );
            }),
            (i.isOpera = function () {
              return this.userAgentContainsString('OPR/');
            }),
            (i.getBrowserName = function () {
              return this.isOpera()
                ? n.BrowserVendor.OPERA
                : this.isEdge()
                ? n.BrowserVendor.EDGE
                : this.userAgentContainsString(n.BrowserVendor.CHROME)
                ? n.BrowserVendor.CHROME
                : this.userAgentContainsString(n.BrowserVendor.FIREFOX)
                ? n.BrowserVendor.FIREFOX
                : this.userAgentContainsString(n.BrowserVendor.SAFARI)
                ? n.BrowserVendor.SAFARI
                : this.isIe()
                ? n.BrowserVendor.IE
                : n.BrowserVendor.UNKNOWN;
            }),
            (i.getUserAgent = function () {
              return this.userAgent;
            }),
            (i.getBrowserVersion = function () {
              var i = this,
                r = function () {
                  var r,
                    u = i.getUserAgent(),
                    f = u.match(new RegExp(n.BrowserVendor.IE + ' ' + t));
                  return f ? f[1] : ((r = u.match(new RegExp('rv:' + t))), r) ? r[1] : undefined;
                },
                u = function (r) {
                  var u;
                  return (r === n.BrowserVendor.SAFARI && (r = 'Version'),
                  (u = i.getUserAgent().match(new RegExp(r + '/' + t))),
                  u)
                    ? u[1]
                    : n.UNKNOWN_VERSION;
                };
              return this.isIe() ? r() : u(this.getBrowserName());
            }),
            (i.userAgent = window.navigator.userAgent),
            i
          );
        })();
        n.BrowserInfo = i;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.getDeviceType = function () {
              return window.navigator.userAgent.match(
                /(android|ipod|windows phone|wpdesktop|windows ce|blackberry\w*|meego|webos|palm|symbian|pda|\w*?mobile\w*?|\w*?phone\w*?)/i
              )
                ? n.DeviceType.Mobile
                : window.navigator.userAgent.match(/tablet|ipad/i)
                ? n.DeviceType.Tablet
                : n.DeviceType.Desktop;
            }),
            t
          );
        })();
        n.DeviceInfo = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.getLocationInfo = function () {
              return new Promise(function (i) {
                var r, u;
                navigator.geolocation
                  ? ((u = t.getLocation()),
                    u.then(function (n) {
                      i(n);
                    }))
                  : (console.error('Location is not supported'),
                    (r = new n.Location()),
                    (r.latitude = ''),
                    (r.longitude = ''),
                    i(r));
              });
            }),
            (t.getLocation = function () {
              return new Promise(function (t) {
                function u(u) {
                  i.latitude = u.coords.latitude.toString();
                  i.longitude = u.coords.longitude.toString();
                  n.TelemetryClient.info({
                    Event: n.TelemetryEvent.LocationDetectionSuccess,
                    ElapsedTimeInMilliseconds: r.milliSecondsElapsed
                  });
                  t(i);
                }
                function f(u) {
                  i.latitude = '';
                  i.longitude = '';
                  n.TelemetryClient.info({
                    Event: n.TelemetryEvent.LocationDetectionFailed,
                    ElapsedTimeInMilliseconds: r.milliSecondsElapsed,
                    ExceptionDetails: u
                  });
                  t(i);
                }
                var i = new n.Location(),
                  r = n.Util.timer();
                navigator.geolocation.getCurrentPosition(u, f);
              });
            }),
            (t.requestLocationDetection = function () {
              return n.Loader.liveChatConfig.requestVisitorLocation;
            }),
            t
          );
        })();
        n.LocationInfo = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.getOsType = function () {
              var t = window.navigator.userAgent;
              return t.match(/windows\sphone\s\d+\.\d+/i)
                ? n.OperatingSystem.WINDOWS_PHONE
                : t.match(/ arm;/i)
                ? n.OperatingSystem.WINDOWS_RT
                : t.match(/(iPad|iPhone|iPod)(?=.*like Mac OS X)/i)
                ? n.OperatingSystem.IOS
                : t.match(/android/i)
                ? n.OperatingSystem.ANDROID
                : t.match(
                    /(linux|joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|cros)/i
                  )
                ? n.OperatingSystem.LINUX
                : t.match(/(macintosh|mac os x)/i)
                ? n.OperatingSystem.MACOSX
                : t.match(/(windows|win32)/i)
                ? n.OperatingSystem.WINDOWS
                : n.OperatingSystem.UNKNOWN;
            }),
            t
          );
        })();
        n.OSInfo = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.shouldRenderWelcomeWidget = function () {
              return (
                n.Loader.currentConversation &&
                n.Loader.currentConversation.sessionInitErrorCode ===
                  n.OmnichannelErrorCodes.WidgetUseOutsideOperatingHour
              );
            }),
            (t.isSurveyValid = function (t) {
              return t && t.body
                ? t.body.some(function (t) {
                    if (t.type && t.type.indexOf(n.HtmlAttributeNames.input) == 0) return !0;
                  })
                : !1;
            }),
            (t.validateIfSessionInitIsStartedOrComplete = function (t) {
              return (
                !n.Util.isNullOrUndefined(t) &&
                t.sessionInitState !== n.SessionInitState.SessionInitNotStarted &&
                t.portalContactId === n.Loader.initContext.portalcontactid
              );
            }),
            (t.focusOnElement = function (n) {
              document.getElementById(n).focus();
            }),
            (t.emptyWebChatRoot = function () {
              $j('#' + n.HtmlIdNames.webChatRoot).empty();
            }),
            (t.getTimestampHourMinute = function (n) {
              var t = new Date(n);
              return isNaN(t.getTime()) ? '' : t.toLocaleTimeString().replace(/:\d+ /, ' ');
            }),
            (t.setBubbleColorFromTimestamp = function (t, i) {
              var u, r;
              if (!n.Util.isNullOrUndefined(t))
                for (u = t.getElementsByTagName('*'), r = 0; r < u.length; r++)
                  if (u[r].className === n.HtmlClassNames.webChatBubbleContent) {
                    u[r].style.backgroundColor = i;
                    break;
                  }
            }),
            (t.preventFocusToMoveOutOfElement = function (t) {
              var r = document.getElementById(t);
              if (r != null) {
                var i = Array.prototype.slice.call(
                    r.querySelectorAll(
                      'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex="0"]'
                    )
                  ),
                  u = i[0],
                  f = i[i.length - 1];
                u.onkeydown = function (t) {
                  t.shiftKey && t.keyCode === n.Constants.KeyCodes.KEY_TAB && (t.preventDefault(), f.focus());
                };
                f.onkeydown = function (t) {
                  t.keyCode !== n.Constants.KeyCodes.KEY_TAB || t.shiftKey || (t.preventDefault(), u.focus());
                };
              }
            }),
            (t.getIconText = function (n) {
              if (n) {
                var t = n.split(/\s/).reduce(function (n, t) {
                  return n + t.slice(0, 1);
                }, '');
                return t.length > 1 ? t.substring(0, 2).toUpperCase() : n.substring(0, 2).toUpperCase();
              }
              return '';
            }),
            t
          );
        })();
        n.Utility = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.getAlertHeaderMessage = function (t) {
              var i;
              switch (t) {
                case n.OmnichannelErrorCodes.WidgetUseOutsideOperatingHour:
                  i =
                    n.Bootstrapper.LiveChatConfiguration.outsideOperatingHoursTitle ||
                    n.Loader.Locale.WIDGET_USE_OUTSIDE_BUSINESS_HOUR_ERROR_TITLE ||
                    'We�re currently offline.';
              }
              return i;
            }),
            (t.getAlertSubHeaderMessage = function (t) {
              var i;
              switch (t) {
                case n.OmnichannelErrorCodes.WidgetUseOutsideOperatingHour:
                  i =
                    n.Bootstrapper.LiveChatConfiguration.outsideOperatingHoursSubtitle ||
                    n.Loader.Locale.WIDGET_USE_OUTSIDE_BUSINESS_HOUR_ERROR_SUB_TITLE ||
                    'Please try again during our business hours.';
              }
              return i;
            }),
            t
          );
        })();
        n.AlertMessages = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {}));
/* LiveChatLoader.min.js:end */

/* LiveChatClientSdk.min.js:start */
('use strict');
var Microsoft;
(function (n) {
  var t;
  (function (n) {
    var t;
    (function (n) {
      var t = (function () {
        function n() {}
        return (
          (n.SDKNamespace = 'Microsoft.Omnichannel.LiveChatWidget'),
          (n.SDK = 'SDK'),
          (n.setContextProvider = 'setContextProvider'),
          (n.getContextProvider = 'getContextProvider'),
          (n.removeContextProvider = 'removeContextProvider'),
          (n.setAuthTokenProvider = 'setAuthTokenProvider'),
          (n.getAuthTokenProvider = 'getAuthTokenProvider'),
          (n.removeAuthTokenProvider = 'removeAuthTokenProvider'),
          (n.startChat = 'startChat'),
          (n.startProactiveChat = 'startProactiveChat'),
          (n.portalContactInfoNamespace = 'Microsoft.Dynamic365.Portal.User'),
          n
        );
      })();
      n.SDKConstants = t;
    })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
  })((t = n.Omnichannel || (n.Omnichannel = {})));
})(Microsoft || (Microsoft = {})),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {
            this.initializeSdkObject();
          }
          return (
            (t.prototype.getContextProvider = function () {
              return (
                n.TelemetryClient.info({ Event: n.TelemetryEvent.GetContextProviderSDKCall }), n.Loader.contextProvider
              );
            }),
            (t.prototype.setContextProvider = function (t) {
              if (
                (n.TelemetryClient.info({ Event: n.TelemetryEvent.SetContextProviderSDKCall }), typeof t != 'function')
              ) {
                var i = new Error('Context provider should be a function');
                n.TelemetryClient.error({ Event: n.TelemetryEvent.ContextProviderException, ExceptionDetails: i });
                throw i;
              }
              n.Loader.contextProvider = t;
            }),
            (t.prototype.removeContextProvider = function () {
              n.TelemetryClient.info({ Event: n.TelemetryEvent.RemoveContextProviderSDKCall });
              n.Loader.contextProvider = null;
            }),
            (t.prototype.getAuthTokenProvider = function () {
              return (
                n.TelemetryClient.info({ Event: n.TelemetryEvent.GetAuthTokenProviderSDKCall }),
                n.Loader.authTokenProvider
              );
            }),
            (t.prototype.setAuthTokenProvider = function (t) {
              if (
                (n.TelemetryClient.info({ Event: n.TelemetryEvent.SetAuthTokenProviderSDKCall }),
                typeof t != 'function')
              ) {
                var i = new Error('Auth token provider should be a function');
                n.TelemetryClient.error({ Event: n.TelemetryEvent.AuthClientProviderException, ExceptionDetails: i });
                throw i;
              }
              n.Loader.authTokenProvider = t;
            }),
            (t.prototype.removeAuthTokenProvider = function () {
              n.TelemetryClient.info({ Event: n.TelemetryEvent.RemoveAuthTokenProviderSDKCall });
              n.Loader.authTokenProvider = null;
            }),
            (t.prototype.startChat = function () {
              n.TelemetryClient.info({ Event: n.TelemetryEvent.StartChatSDKCall });
              n.ChatRootReact.handleChatButtonClick(!1);
            }),
            (t.prototype.startProactiveChat = function (t, i) {
              if ((i === void 0 && (i = null), !n.Loader.liveChatConfig.isProactiveChatEnabled)) {
                var r = new Error('Proactive chat is not enabled for the widget');
                n.TelemetryClient.error({ Event: n.TelemetryEvent.ProactiveChatNotEnabled, ExceptionDetails: r });
                throw r;
              }
              n.TelemetryClient.info({ Event: n.TelemetryEvent.StartProactiveChatSDKCall });
              n.ChatRootReact.startProactiveChat(i, t);
            }),
            (t.prototype.initializeSdkObject = function () {
              t.createSdkNameSpaceObject(n.SDKConstants.SDKNamespace, window)[n.SDKConstants.SDK] = this;
              this.raiseLcwReadyEvent();
            }),
            (t.createSdkNameSpaceObject = function (n, t) {
              var u, i, f, e, r;
              if (n && ((u = n.split('.')), u))
                for (i = 0, f = u; i < f.length; i++) (e = f[i]), (r = e.trim()), (t[r] = t[r] || {}), (t = t[r]);
              return t;
            }),
            (t.prototype.raiseLcwReadyEvent = function () {
              var t = this;
              n.Util.isNullOrUndefined(n.Loader.loaderPromise)
                ? setTimeout(function () {
                    return t.raiseLcwReadyEvent();
                  }, n.ConfigurationManager.LoaderPromiseStateCheckInterval)
                : n.Loader.loaderPromise.then(function () {
                    n.Util.raiseCustomEvent(n.LCWEvents.LCWReadyEvent);
                  });
            }),
            t
          );
        })();
        n.ClientSdk = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function () {
    new Microsoft.Omnichannel.LiveChatWidget.ClientSdk();
  })('docReady', window),
  (function (n) {
    var t;
    (function (n) {
      var t;
      (function (n) {
        var t = (function () {
          function t() {}
          return (
            (t.createEventDelegation = function () {
              var i = this;
              window.addEventListener('message', function (r) {
                var u, f, e, o, s, h, c, l;
                if (r.data)
                  try {
                    u = r.data;
                    f = u.messageName;
                    switch (f) {
                      case n.SDKConstants.setContextProvider:
                        e = u.contextVariables;
                        o = function () {
                          return e;
                        };
                        n.ClientSdk.createSdkNameSpaceObject(n.SDKConstants.SDKNamespace, window)[
                          n.SDKConstants.SDK
                        ].setContextProvider(o);
                        break;
                      case n.SDKConstants.removeContextProvider:
                        n.ClientSdk.createSdkNameSpaceObject(n.SDKConstants.SDKNamespace, window)[
                          n.SDKConstants.SDK
                        ].removeContextProvider();
                        break;
                      case n.SDKConstants.setAuthTokenProvider:
                        i.authTokenCache = u.jwtToken;
                        s = function (n) {
                          n(t.authTokenCache);
                        };
                        n.ClientSdk.createSdkNameSpaceObject(n.SDKConstants.SDKNamespace, window)[
                          n.SDKConstants.SDK
                        ].setAuthTokenProvider(s);
                        break;
                      case n.SDKConstants.removeAuthTokenProvider:
                        n.ClientSdk.createSdkNameSpaceObject(n.SDKConstants.SDKNamespace, window)[
                          n.SDKConstants.SDK
                        ].removeAuthTokenProvider();
                        i.authTokenCache && (i.authTokenCache = undefined);
                        break;
                      case n.SDKConstants.startChat:
                        n.ClientSdk.createSdkNameSpaceObject(n.SDKConstants.SDKNamespace, window)[
                          n.SDKConstants.SDK
                        ].startChat();
                        break;
                      case n.SDKConstants.startProactiveChat:
                        h = u.notificationConfig;
                        c = u.enablePreChat;
                        n.ClientSdk.createSdkNameSpaceObject(n.SDKConstants.SDKNamespace, window)[
                          n.SDKConstants.SDK
                        ].startProactiveChat(h, c);
                        break;
                      case n.EventConstants.getContactInfoResponse:
                        l = u.contactInfo;
                        n.ClientSdk.createSdkNameSpaceObject(n.SDKConstants.portalContactInfoNamespace, window);
                        window[n.BootstrapperConstants.Microsoft][n.BootstrapperConstants.Dynamic365][
                          n.BootstrapperConstants.Portal
                        ][n.BootstrapperConstants.User] = l;
                    }
                  } catch (a) {
                    console.error('Failed to process message from parent:', a);
                  }
              });
            }),
            t
          );
        })();
        n.ClientSdkEventHandler = t;
      })((t = n.LiveChatWidget || (n.LiveChatWidget = {})));
    })((t = n.Omnichannel || (n.Omnichannel = {})));
  })(Microsoft || (Microsoft = {})),
  (function () {
    Microsoft.Omnichannel.LiveChatWidget.ClientSdkEventHandler.createEventDelegation();
  })();
/* LiveChatClientSdk.min.js:end */
